(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}();const t=new class{constructor(){this.listeners=[],this.unexpectedErrorHandler=function(e){setTimeout((()=>{if(e.stack)throw new Error(e.message+"\n\n"+e.stack);throw e}),0)}}emit(e){this.listeners.forEach((t=>{t(e)}))}onUnexpectedError(e){this.unexpectedErrorHandler(e),this.emit(e)}onUnexpectedExternalError(e){this.unexpectedErrorHandler(e)}};function n(e){var n;(n=e)instanceof Error&&n.name===r&&n.message===r||t.onUnexpectedError(e)}function i(e){if(e instanceof Error){let{name:t,message:n}=e;return{$isError:!0,name:t,message:n,stack:e.stacktrace||e.stack}}return e}const r="Canceled";var s;!function(e){e.is=function(e){return e&&"object"==typeof e&&"function"==typeof e[Symbol.iterator]};const t=Object.freeze([]);e.empty=function(){return t},e.single=function*(e){yield e},e.from=function(e){return e||t},e.isEmpty=function(e){return!e||!0===e[Symbol.iterator]().next().done},e.first=function(e){return e[Symbol.iterator]().next().value},e.some=function(e,t){for(const n of e)if(t(n))return!0;return!1},e.find=function(e,t){for(const n of e)if(t(n))return n},e.filter=function*(e,t){for(const n of e)t(n)&&(yield n)},e.map=function*(e,t){let n=0;for(const i of e)yield t(i,n++)},e.concat=function*(...e){for(const t of e)for(const e of t)yield e},e.concatNested=function*(e){for(const t of e)for(const e of t)yield e},e.reduce=function(e,t,n){let i=n;for(const n of e)i=t(i,n);return i},e.slice=function*(e,t,n=e.length){for(t<0&&(t+=e.length),n<0?n+=e.length:n>e.length&&(n=e.length);t<n;t++)yield e[t]},e.consume=function(t,n=Number.POSITIVE_INFINITY){const i=[];if(0===n)return[i,t];const r=t[Symbol.iterator]();for(let t=0;t<n;t++){const t=r.next();if(t.done)return[i,e.empty()];i.push(t.value)}return[i,{[Symbol.iterator]:()=>r}]},e.equals=function(e,t,n=((e,t)=>e===t)){const i=e[Symbol.iterator](),r=t[Symbol.iterator]();for(;;){const e=i.next(),t=r.next();if(e.done!==t.done)return!1;if(e.done)return!0;if(!n(e.value,t.value))return!1}}}(s||(s={}));function o(e){}class a extends Error{constructor(e){super(`Encountered errors while disposing of store. Errors: [${e.join(", ")}]`),this.errors=e}}function l(e){if(s.is(e)){let t=[];for(const n of e)if(n)try{n.dispose()}catch(e){t.push(e)}if(1===t.length)throw t[0];if(t.length>1)throw new a(t);return Array.isArray(e)?[]:e}if(e)return e.dispose(),e}function u(...e){return e.forEach(o),function(t){const n={dispose:()=>{l(e)}};return n}()}class h{constructor(){this._toDispose=new Set,this._isDisposed=!1}dispose(){this._isDisposed||(this._isDisposed=!0,this.clear())}clear(){try{l(this._toDispose.values())}finally{this._toDispose.clear()}}add(e){if(!e)return e;if(e===this)throw new Error("Cannot register a disposable on itself!");return this._isDisposed?h.DISABLE_DISPOSED_WARNING||console.warn(new Error("Trying to add a disposable to a DisposableStore that has already been disposed of. The added object will be leaked!").stack):this._toDispose.add(e),e}}h.DISABLE_DISPOSED_WARNING=!1;class d{constructor(){this._store=new h}dispose(){this._store.dispose()}_register(e){if(e===this)throw new Error("Cannot register a disposable on itself!");return this._store.add(e)}}var c;d.None=Object.freeze({dispose(){}});const f="en";let m,g,_,p=!1,C=!1,b=!1,L=!1,S=!1,N=!1,E=!1,A=null;const y="object"==typeof self?self:"object"==typeof e.g?e.g:{};let v;void 0!==y.vscode&&void 0!==y.vscode.process?v=y.vscode.process:"undefined"!=typeof process&&(v=process);const w="string"==typeof(null===(c=null==v?void 0:v.versions)||void 0===c?void 0:c.electron)&&"renderer"===v.type,O=w&&(null==v?void 0:v.sandboxed);if((()=>{if(O)return"bypassHeatCheck";null==v||v.env.VSCODE_BROWSER_CODE_LOADING})(),"object"!=typeof navigator||w)if("object"==typeof v){p="win32"===v.platform,C="darwin"===v.platform,b="linux"===v.platform,L=b&&!!v.env.SNAP&&!!v.env.SNAP_REVISION,m=f,A=f;const e=v.env.VSCODE_NLS_CONFIG;if(e)try{const t=JSON.parse(e),n=t.availableLanguages["*"];m=t.locale,A=n||f,g=t._translationsConfigFile}catch(e){}S=!0}else console.error("Unable to resolve platform.");else _=navigator.userAgent,p=_.indexOf("Windows")>=0,C=_.indexOf("Macintosh")>=0,(_.indexOf("Macintosh")>=0||_.indexOf("iPad")>=0||_.indexOf("iPhone")>=0)&&!!navigator.maxTouchPoints&&navigator.maxTouchPoints>0,b=_.indexOf("Linux")>=0,!0,m=navigator.language,A=m;let T=0;C?T=1:p?T=3:b&&(T=2);const x=p,I=C,M=function(){if(y.setImmediate)return y.setImmediate.bind(y);if("function"==typeof y.postMessage&&!y.importScripts){let e=[];y.addEventListener("message",(t=>{if(t.data&&t.data.vscodeSetImmediateId)for(let n=0,i=e.length;n<i;n++){const i=e[n];if(i.id===t.data.vscodeSetImmediateId)return e.splice(n,1),void i.callback()}}));let t=0;return n=>{const i=++t;e.push({id:i,callback:n}),y.postMessage({vscodeSetImmediateId:i},"*")}}if("function"==typeof(null==v?void 0:v.nextTick))return v.nextTick.bind(v);const e=Promise.resolve();return t=>e.then(t)}();function R(e){const t=[];for(const n of function(e){let t=[],n=Object.getPrototypeOf(e);for(;Object.prototype!==n;)t=t.concat(Object.getOwnPropertyNames(n)),n=Object.getPrototypeOf(n);return t}(e))"function"==typeof e[n]&&t.push(n);return t}function P(e,t){const n=e=>function(){const n=Array.prototype.slice.call(arguments,0);return t(e,n)};let i={};for(const t of e)i[t]=n(t);return i}class U{constructor(e){this._workerId=-1,this._handler=e,this._lastSentReq=0,this._pendingReplies=Object.create(null)}setWorkerId(e){this._workerId=e}sendMessage(e,t){let n=String(++this._lastSentReq);return new Promise(((i,r)=>{this._pendingReplies[n]={resolve:i,reject:r},this._send({vsWorker:this._workerId,req:n,method:e,args:t})}))}handleMessage(e){e&&e.vsWorker&&(-1!==this._workerId&&e.vsWorker!==this._workerId||this._handleMessage(e))}_handleMessage(e){if(e.seq){let t=e;if(!this._pendingReplies[t.seq])return void console.warn("Got reply to unknown seq");let n=this._pendingReplies[t.seq];if(delete this._pendingReplies[t.seq],t.err){let e=t.err;return t.err.$isError&&(e=new Error,e.name=t.err.name,e.message=t.err.message,e.stack=t.err.stack),void n.reject(e)}return void n.resolve(t.res)}let t=e,n=t.req;this._handler.handleMessage(t.method,t.args).then((e=>{this._send({vsWorker:this._workerId,seq:n,res:e,err:void 0})}),(e=>{e.detail instanceof Error&&(e.detail=i(e.detail)),this._send({vsWorker:this._workerId,seq:n,res:void 0,err:i(e)})}))}_send(e){let t=[];if(e.req){const n=e;for(let e=0;e<n.args.length;e++)n.args[e]instanceof ArrayBuffer&&t.push(n.args[e])}else{const n=e;n.res instanceof ArrayBuffer&&t.push(n.res)}this._handler.sendMessage(e,t)}}class k{constructor(e,t){this._requestHandlerFactory=t,this._requestHandler=null,this._protocol=new U({sendMessage:(t,n)=>{e(t,n)},handleMessage:(e,t)=>this._handleMessage(e,t)})}onmessage(e){this._protocol.handleMessage(e)}_handleMessage(e,t){if("$initialize"===e)return this.initialize(t[0],t[1],t[2],t[3]);if(!this._requestHandler||"function"!=typeof this._requestHandler[e])return Promise.reject(new Error("Missing requestHandler or method: "+e));try{return Promise.resolve(this._requestHandler[e].apply(this._requestHandler,t))}catch(e){return Promise.reject(e)}}initialize(e,t,n,i){this._protocol.setWorkerId(e);const r=P(i,((e,t)=>this._protocol.sendMessage(e,t)));return this._requestHandlerFactory?(this._requestHandler=this._requestHandlerFactory(r),Promise.resolve(R(this._requestHandler))):(t&&(void 0!==t.baseUrl&&delete t.baseUrl,void 0!==t.paths&&void 0!==t.paths.vs&&delete t.paths.vs,void 0!==typeof t.trustedTypesPolicy&&delete t.trustedTypesPolicy,t.catchError=!0,self.require.config(t)),new Promise(((e,t)=>{self.require([n],(n=>{this._requestHandler=n.create(r),this._requestHandler?e(R(this._requestHandler)):t(new Error("No RequestHandler!"))}),t)})))}}class D{constructor(e,t,n,i){this.originalStart=e,this.originalLength=t,this.modifiedStart=n,this.modifiedLength=i}getOriginalEnd(){return this.originalStart+this.originalLength}getModifiedEnd(){return this.modifiedStart+this.modifiedLength}}function F(e){return 55296<=e&&e<=56319}function K(e){return 56320<=e&&e<=57343}String.fromCharCode(65279);class B{constructor(){this._data=JSON.parse("[0,0,0,51592,51592,11,44424,44424,11,72251,72254,5,7150,7150,7,48008,48008,11,55176,55176,11,128420,128420,14,3276,3277,5,9979,9980,14,46216,46216,11,49800,49800,11,53384,53384,11,70726,70726,5,122915,122916,5,129320,129327,14,2558,2558,5,5906,5908,5,9762,9763,14,43360,43388,8,45320,45320,11,47112,47112,11,48904,48904,11,50696,50696,11,52488,52488,11,54280,54280,11,70082,70083,1,71350,71350,7,73111,73111,5,127892,127893,14,128726,128727,14,129473,129474,14,2027,2035,5,2901,2902,5,3784,3789,5,6754,6754,5,8418,8420,5,9877,9877,14,11088,11088,14,44008,44008,5,44872,44872,11,45768,45768,11,46664,46664,11,47560,47560,11,48456,48456,11,49352,49352,11,50248,50248,11,51144,51144,11,52040,52040,11,52936,52936,11,53832,53832,11,54728,54728,11,69811,69814,5,70459,70460,5,71096,71099,7,71998,71998,5,72874,72880,5,119149,119149,7,127374,127374,14,128335,128335,14,128482,128482,14,128765,128767,14,129399,129400,14,129680,129685,14,1476,1477,5,2377,2380,7,2759,2760,5,3137,3140,7,3458,3459,7,4153,4154,5,6432,6434,5,6978,6978,5,7675,7679,5,9723,9726,14,9823,9823,14,9919,9923,14,10035,10036,14,42736,42737,5,43596,43596,5,44200,44200,11,44648,44648,11,45096,45096,11,45544,45544,11,45992,45992,11,46440,46440,11,46888,46888,11,47336,47336,11,47784,47784,11,48232,48232,11,48680,48680,11,49128,49128,11,49576,49576,11,50024,50024,11,50472,50472,11,50920,50920,11,51368,51368,11,51816,51816,11,52264,52264,11,52712,52712,11,53160,53160,11,53608,53608,11,54056,54056,11,54504,54504,11,54952,54952,11,68108,68111,5,69933,69940,5,70197,70197,7,70498,70499,7,70845,70845,5,71229,71229,5,71727,71735,5,72154,72155,5,72344,72345,5,73023,73029,5,94095,94098,5,121403,121452,5,126981,127182,14,127538,127546,14,127990,127990,14,128391,128391,14,128445,128449,14,128500,128505,14,128752,128752,14,129160,129167,14,129356,129356,14,129432,129442,14,129648,129651,14,129751,131069,14,173,173,4,1757,1757,1,2274,2274,1,2494,2494,5,2641,2641,5,2876,2876,5,3014,3016,7,3262,3262,7,3393,3396,5,3570,3571,7,3968,3972,5,4228,4228,7,6086,6086,5,6679,6680,5,6912,6915,5,7080,7081,5,7380,7392,5,8252,8252,14,9096,9096,14,9748,9749,14,9784,9786,14,9833,9850,14,9890,9894,14,9938,9938,14,9999,9999,14,10085,10087,14,12349,12349,14,43136,43137,7,43454,43456,7,43755,43755,7,44088,44088,11,44312,44312,11,44536,44536,11,44760,44760,11,44984,44984,11,45208,45208,11,45432,45432,11,45656,45656,11,45880,45880,11,46104,46104,11,46328,46328,11,46552,46552,11,46776,46776,11,47000,47000,11,47224,47224,11,47448,47448,11,47672,47672,11,47896,47896,11,48120,48120,11,48344,48344,11,48568,48568,11,48792,48792,11,49016,49016,11,49240,49240,11,49464,49464,11,49688,49688,11,49912,49912,11,50136,50136,11,50360,50360,11,50584,50584,11,50808,50808,11,51032,51032,11,51256,51256,11,51480,51480,11,51704,51704,11,51928,51928,11,52152,52152,11,52376,52376,11,52600,52600,11,52824,52824,11,53048,53048,11,53272,53272,11,53496,53496,11,53720,53720,11,53944,53944,11,54168,54168,11,54392,54392,11,54616,54616,11,54840,54840,11,55064,55064,11,65438,65439,5,69633,69633,5,69837,69837,1,70018,70018,7,70188,70190,7,70368,70370,7,70465,70468,7,70712,70719,5,70835,70840,5,70850,70851,5,71132,71133,5,71340,71340,7,71458,71461,5,71985,71989,7,72002,72002,7,72193,72202,5,72281,72283,5,72766,72766,7,72885,72886,5,73104,73105,5,92912,92916,5,113824,113827,4,119173,119179,5,121505,121519,5,125136,125142,5,127279,127279,14,127489,127490,14,127570,127743,14,127900,127901,14,128254,128254,14,128369,128370,14,128400,128400,14,128425,128432,14,128468,128475,14,128489,128494,14,128715,128720,14,128745,128745,14,128759,128760,14,129004,129023,14,129296,129304,14,129340,129342,14,129388,129392,14,129404,129407,14,129454,129455,14,129485,129487,14,129659,129663,14,129719,129727,14,917536,917631,5,13,13,2,1160,1161,5,1564,1564,4,1807,1807,1,2085,2087,5,2363,2363,7,2402,2403,5,2507,2508,7,2622,2624,7,2691,2691,7,2786,2787,5,2881,2884,5,3006,3006,5,3072,3072,5,3170,3171,5,3267,3268,7,3330,3331,7,3406,3406,1,3538,3540,5,3655,3662,5,3897,3897,5,4038,4038,5,4184,4185,5,4352,4447,8,6068,6069,5,6155,6157,5,6448,6449,7,6742,6742,5,6783,6783,5,6966,6970,5,7042,7042,7,7143,7143,7,7212,7219,5,7412,7412,5,8206,8207,4,8294,8303,4,8596,8601,14,9410,9410,14,9742,9742,14,9757,9757,14,9770,9770,14,9794,9794,14,9828,9828,14,9855,9855,14,9882,9882,14,9900,9903,14,9929,9933,14,9963,9967,14,9987,9988,14,10006,10006,14,10062,10062,14,10175,10175,14,11744,11775,5,42607,42607,5,43043,43044,7,43263,43263,5,43444,43445,7,43569,43570,5,43698,43700,5,43766,43766,5,44032,44032,11,44144,44144,11,44256,44256,11,44368,44368,11,44480,44480,11,44592,44592,11,44704,44704,11,44816,44816,11,44928,44928,11,45040,45040,11,45152,45152,11,45264,45264,11,45376,45376,11,45488,45488,11,45600,45600,11,45712,45712,11,45824,45824,11,45936,45936,11,46048,46048,11,46160,46160,11,46272,46272,11,46384,46384,11,46496,46496,11,46608,46608,11,46720,46720,11,46832,46832,11,46944,46944,11,47056,47056,11,47168,47168,11,47280,47280,11,47392,47392,11,47504,47504,11,47616,47616,11,47728,47728,11,47840,47840,11,47952,47952,11,48064,48064,11,48176,48176,11,48288,48288,11,48400,48400,11,48512,48512,11,48624,48624,11,48736,48736,11,48848,48848,11,48960,48960,11,49072,49072,11,49184,49184,11,49296,49296,11,49408,49408,11,49520,49520,11,49632,49632,11,49744,49744,11,49856,49856,11,49968,49968,11,50080,50080,11,50192,50192,11,50304,50304,11,50416,50416,11,50528,50528,11,50640,50640,11,50752,50752,11,50864,50864,11,50976,50976,11,51088,51088,11,51200,51200,11,51312,51312,11,51424,51424,11,51536,51536,11,51648,51648,11,51760,51760,11,51872,51872,11,51984,51984,11,52096,52096,11,52208,52208,11,52320,52320,11,52432,52432,11,52544,52544,11,52656,52656,11,52768,52768,11,52880,52880,11,52992,52992,11,53104,53104,11,53216,53216,11,53328,53328,11,53440,53440,11,53552,53552,11,53664,53664,11,53776,53776,11,53888,53888,11,54000,54000,11,54112,54112,11,54224,54224,11,54336,54336,11,54448,54448,11,54560,54560,11,54672,54672,11,54784,54784,11,54896,54896,11,55008,55008,11,55120,55120,11,64286,64286,5,66272,66272,5,68900,68903,5,69762,69762,7,69817,69818,5,69927,69931,5,70003,70003,5,70070,70078,5,70094,70094,7,70194,70195,7,70206,70206,5,70400,70401,5,70463,70463,7,70475,70477,7,70512,70516,5,70722,70724,5,70832,70832,5,70842,70842,5,70847,70848,5,71088,71089,7,71102,71102,7,71219,71226,5,71231,71232,5,71342,71343,7,71453,71455,5,71463,71467,5,71737,71738,5,71995,71996,5,72000,72000,7,72145,72147,7,72160,72160,5,72249,72249,7,72273,72278,5,72330,72342,5,72752,72758,5,72850,72871,5,72882,72883,5,73018,73018,5,73031,73031,5,73109,73109,5,73461,73462,7,94031,94031,5,94192,94193,7,119142,119142,7,119155,119162,4,119362,119364,5,121476,121476,5,122888,122904,5,123184,123190,5,126976,126979,14,127184,127231,14,127344,127345,14,127405,127461,14,127514,127514,14,127561,127567,14,127778,127779,14,127896,127896,14,127985,127986,14,127995,127999,5,128326,128328,14,128360,128366,14,128378,128378,14,128394,128397,14,128405,128406,14,128422,128423,14,128435,128443,14,128453,128464,14,128479,128480,14,128484,128487,14,128496,128498,14,128640,128709,14,128723,128724,14,128736,128741,14,128747,128748,14,128755,128755,14,128762,128762,14,128981,128991,14,129096,129103,14,129292,129292,14,129311,129311,14,129329,129330,14,129344,129349,14,129360,129374,14,129394,129394,14,129402,129402,14,129413,129425,14,129445,129450,14,129466,129471,14,129483,129483,14,129511,129535,14,129653,129655,14,129667,129670,14,129705,129711,14,129731,129743,14,917505,917505,4,917760,917999,5,10,10,3,127,159,4,768,879,5,1471,1471,5,1536,1541,1,1648,1648,5,1767,1768,5,1840,1866,5,2070,2073,5,2137,2139,5,2307,2307,7,2366,2368,7,2382,2383,7,2434,2435,7,2497,2500,5,2519,2519,5,2563,2563,7,2631,2632,5,2677,2677,5,2750,2752,7,2763,2764,7,2817,2817,5,2879,2879,5,2891,2892,7,2914,2915,5,3008,3008,5,3021,3021,5,3076,3076,5,3146,3149,5,3202,3203,7,3264,3265,7,3271,3272,7,3298,3299,5,3390,3390,5,3402,3404,7,3426,3427,5,3535,3535,5,3544,3550,7,3635,3635,7,3763,3763,7,3893,3893,5,3953,3966,5,3981,3991,5,4145,4145,7,4157,4158,5,4209,4212,5,4237,4237,5,4520,4607,10,5970,5971,5,6071,6077,5,6089,6099,5,6277,6278,5,6439,6440,5,6451,6456,7,6683,6683,5,6744,6750,5,6765,6770,7,6846,6846,5,6964,6964,5,6972,6972,5,7019,7027,5,7074,7077,5,7083,7085,5,7146,7148,7,7154,7155,7,7222,7223,5,7394,7400,5,7416,7417,5,8204,8204,5,8233,8233,4,8288,8292,4,8413,8416,5,8482,8482,14,8986,8987,14,9193,9203,14,9654,9654,14,9733,9733,14,9745,9745,14,9752,9752,14,9760,9760,14,9766,9766,14,9774,9775,14,9792,9792,14,9800,9811,14,9825,9826,14,9831,9831,14,9852,9853,14,9872,9873,14,9880,9880,14,9885,9887,14,9896,9897,14,9906,9916,14,9926,9927,14,9936,9936,14,9941,9960,14,9974,9974,14,9982,9985,14,9992,9997,14,10002,10002,14,10017,10017,14,10055,10055,14,10071,10071,14,10145,10145,14,11013,11015,14,11503,11505,5,12334,12335,5,12951,12951,14,42612,42621,5,43014,43014,5,43047,43047,7,43204,43205,5,43335,43345,5,43395,43395,7,43450,43451,7,43561,43566,5,43573,43574,5,43644,43644,5,43710,43711,5,43758,43759,7,44005,44005,5,44012,44012,7,44060,44060,11,44116,44116,11,44172,44172,11,44228,44228,11,44284,44284,11,44340,44340,11,44396,44396,11,44452,44452,11,44508,44508,11,44564,44564,11,44620,44620,11,44676,44676,11,44732,44732,11,44788,44788,11,44844,44844,11,44900,44900,11,44956,44956,11,45012,45012,11,45068,45068,11,45124,45124,11,45180,45180,11,45236,45236,11,45292,45292,11,45348,45348,11,45404,45404,11,45460,45460,11,45516,45516,11,45572,45572,11,45628,45628,11,45684,45684,11,45740,45740,11,45796,45796,11,45852,45852,11,45908,45908,11,45964,45964,11,46020,46020,11,46076,46076,11,46132,46132,11,46188,46188,11,46244,46244,11,46300,46300,11,46356,46356,11,46412,46412,11,46468,46468,11,46524,46524,11,46580,46580,11,46636,46636,11,46692,46692,11,46748,46748,11,46804,46804,11,46860,46860,11,46916,46916,11,46972,46972,11,47028,47028,11,47084,47084,11,47140,47140,11,47196,47196,11,47252,47252,11,47308,47308,11,47364,47364,11,47420,47420,11,47476,47476,11,47532,47532,11,47588,47588,11,47644,47644,11,47700,47700,11,47756,47756,11,47812,47812,11,47868,47868,11,47924,47924,11,47980,47980,11,48036,48036,11,48092,48092,11,48148,48148,11,48204,48204,11,48260,48260,11,48316,48316,11,48372,48372,11,48428,48428,11,48484,48484,11,48540,48540,11,48596,48596,11,48652,48652,11,48708,48708,11,48764,48764,11,48820,48820,11,48876,48876,11,48932,48932,11,48988,48988,11,49044,49044,11,49100,49100,11,49156,49156,11,49212,49212,11,49268,49268,11,49324,49324,11,49380,49380,11,49436,49436,11,49492,49492,11,49548,49548,11,49604,49604,11,49660,49660,11,49716,49716,11,49772,49772,11,49828,49828,11,49884,49884,11,49940,49940,11,49996,49996,11,50052,50052,11,50108,50108,11,50164,50164,11,50220,50220,11,50276,50276,11,50332,50332,11,50388,50388,11,50444,50444,11,50500,50500,11,50556,50556,11,50612,50612,11,50668,50668,11,50724,50724,11,50780,50780,11,50836,50836,11,50892,50892,11,50948,50948,11,51004,51004,11,51060,51060,11,51116,51116,11,51172,51172,11,51228,51228,11,51284,51284,11,51340,51340,11,51396,51396,11,51452,51452,11,51508,51508,11,51564,51564,11,51620,51620,11,51676,51676,11,51732,51732,11,51788,51788,11,51844,51844,11,51900,51900,11,51956,51956,11,52012,52012,11,52068,52068,11,52124,52124,11,52180,52180,11,52236,52236,11,52292,52292,11,52348,52348,11,52404,52404,11,52460,52460,11,52516,52516,11,52572,52572,11,52628,52628,11,52684,52684,11,52740,52740,11,52796,52796,11,52852,52852,11,52908,52908,11,52964,52964,11,53020,53020,11,53076,53076,11,53132,53132,11,53188,53188,11,53244,53244,11,53300,53300,11,53356,53356,11,53412,53412,11,53468,53468,11,53524,53524,11,53580,53580,11,53636,53636,11,53692,53692,11,53748,53748,11,53804,53804,11,53860,53860,11,53916,53916,11,53972,53972,11,54028,54028,11,54084,54084,11,54140,54140,11,54196,54196,11,54252,54252,11,54308,54308,11,54364,54364,11,54420,54420,11,54476,54476,11,54532,54532,11,54588,54588,11,54644,54644,11,54700,54700,11,54756,54756,11,54812,54812,11,54868,54868,11,54924,54924,11,54980,54980,11,55036,55036,11,55092,55092,11,55148,55148,11,55216,55238,9,65056,65071,5,65529,65531,4,68097,68099,5,68159,68159,5,69446,69456,5,69688,69702,5,69808,69810,7,69815,69816,7,69821,69821,1,69888,69890,5,69932,69932,7,69957,69958,7,70016,70017,5,70067,70069,7,70079,70080,7,70089,70092,5,70095,70095,5,70191,70193,5,70196,70196,5,70198,70199,5,70367,70367,5,70371,70378,5,70402,70403,7,70462,70462,5,70464,70464,5,70471,70472,7,70487,70487,5,70502,70508,5,70709,70711,7,70720,70721,7,70725,70725,7,70750,70750,5,70833,70834,7,70841,70841,7,70843,70844,7,70846,70846,7,70849,70849,7,71087,71087,5,71090,71093,5,71100,71101,5,71103,71104,5,71216,71218,7,71227,71228,7,71230,71230,7,71339,71339,5,71341,71341,5,71344,71349,5,71351,71351,5,71456,71457,7,71462,71462,7,71724,71726,7,71736,71736,7,71984,71984,5,71991,71992,7,71997,71997,7,71999,71999,1,72001,72001,1,72003,72003,5,72148,72151,5,72156,72159,7,72164,72164,7,72243,72248,5,72250,72250,1,72263,72263,5,72279,72280,7,72324,72329,1,72343,72343,7,72751,72751,7,72760,72765,5,72767,72767,5,72873,72873,7,72881,72881,7,72884,72884,7,73009,73014,5,73020,73021,5,73030,73030,1,73098,73102,7,73107,73108,7,73110,73110,7,73459,73460,5,78896,78904,4,92976,92982,5,94033,94087,7,94180,94180,5,113821,113822,5,119141,119141,5,119143,119145,5,119150,119154,5,119163,119170,5,119210,119213,5,121344,121398,5,121461,121461,5,121499,121503,5,122880,122886,5,122907,122913,5,122918,122922,5,123628,123631,5,125252,125258,5,126980,126980,14,127183,127183,14,127245,127247,14,127340,127343,14,127358,127359,14,127377,127386,14,127462,127487,6,127491,127503,14,127535,127535,14,127548,127551,14,127568,127569,14,127744,127777,14,127780,127891,14,127894,127895,14,127897,127899,14,127902,127984,14,127987,127989,14,127991,127994,14,128000,128253,14,128255,128317,14,128329,128334,14,128336,128359,14,128367,128368,14,128371,128377,14,128379,128390,14,128392,128393,14,128398,128399,14,128401,128404,14,128407,128419,14,128421,128421,14,128424,128424,14,128433,128434,14,128444,128444,14,128450,128452,14,128465,128467,14,128476,128478,14,128481,128481,14,128483,128483,14,128488,128488,14,128495,128495,14,128499,128499,14,128506,128591,14,128710,128714,14,128721,128722,14,128725,128725,14,128728,128735,14,128742,128744,14,128746,128746,14,128749,128751,14,128753,128754,14,128756,128758,14,128761,128761,14,128763,128764,14,128884,128895,14,128992,129003,14,129036,129039,14,129114,129119,14,129198,129279,14,129293,129295,14,129305,129310,14,129312,129319,14,129328,129328,14,129331,129338,14,129343,129343,14,129351,129355,14,129357,129359,14,129375,129387,14,129393,129393,14,129395,129398,14,129401,129401,14,129403,129403,14,129408,129412,14,129426,129431,14,129443,129444,14,129451,129453,14,129456,129465,14,129472,129472,14,129475,129482,14,129484,129484,14,129488,129510,14,129536,129647,14,129652,129652,14,129656,129658,14,129664,129666,14,129671,129679,14,129686,129704,14,129712,129718,14,129728,129730,14,129744,129750,14,917504,917504,4,917506,917535,4,917632,917759,4,918000,921599,4,0,9,4,11,12,4,14,31,4,169,169,14,174,174,14,1155,1159,5,1425,1469,5,1473,1474,5,1479,1479,5,1552,1562,5,1611,1631,5,1750,1756,5,1759,1764,5,1770,1773,5,1809,1809,5,1958,1968,5,2045,2045,5,2075,2083,5,2089,2093,5,2259,2273,5,2275,2306,5,2362,2362,5,2364,2364,5,2369,2376,5,2381,2381,5,2385,2391,5,2433,2433,5,2492,2492,5,2495,2496,7,2503,2504,7,2509,2509,5,2530,2531,5,2561,2562,5,2620,2620,5,2625,2626,5,2635,2637,5,2672,2673,5,2689,2690,5,2748,2748,5,2753,2757,5,2761,2761,7,2765,2765,5,2810,2815,5,2818,2819,7,2878,2878,5,2880,2880,7,2887,2888,7,2893,2893,5,2903,2903,5,2946,2946,5,3007,3007,7,3009,3010,7,3018,3020,7,3031,3031,5,3073,3075,7,3134,3136,5,3142,3144,5,3157,3158,5,3201,3201,5,3260,3260,5,3263,3263,5,3266,3266,5,3270,3270,5,3274,3275,7,3285,3286,5,3328,3329,5,3387,3388,5,3391,3392,7,3398,3400,7,3405,3405,5,3415,3415,5,3457,3457,5,3530,3530,5,3536,3537,7,3542,3542,5,3551,3551,5,3633,3633,5,3636,3642,5,3761,3761,5,3764,3772,5,3864,3865,5,3895,3895,5,3902,3903,7,3967,3967,7,3974,3975,5,3993,4028,5,4141,4144,5,4146,4151,5,4155,4156,7,4182,4183,7,4190,4192,5,4226,4226,5,4229,4230,5,4253,4253,5,4448,4519,9,4957,4959,5,5938,5940,5,6002,6003,5,6070,6070,7,6078,6085,7,6087,6088,7,6109,6109,5,6158,6158,4,6313,6313,5,6435,6438,7,6441,6443,7,6450,6450,5,6457,6459,5,6681,6682,7,6741,6741,7,6743,6743,7,6752,6752,5,6757,6764,5,6771,6780,5,6832,6845,5,6847,6848,5,6916,6916,7,6965,6965,5,6971,6971,7,6973,6977,7,6979,6980,7,7040,7041,5,7073,7073,7,7078,7079,7,7082,7082,7,7142,7142,5,7144,7145,5,7149,7149,5,7151,7153,5,7204,7211,7,7220,7221,7,7376,7378,5,7393,7393,7,7405,7405,5,7415,7415,7,7616,7673,5,8203,8203,4,8205,8205,13,8232,8232,4,8234,8238,4,8265,8265,14,8293,8293,4,8400,8412,5,8417,8417,5,8421,8432,5,8505,8505,14,8617,8618,14,9000,9000,14,9167,9167,14,9208,9210,14,9642,9643,14,9664,9664,14,9728,9732,14,9735,9741,14,9743,9744,14,9746,9746,14,9750,9751,14,9753,9756,14,9758,9759,14,9761,9761,14,9764,9765,14,9767,9769,14,9771,9773,14,9776,9783,14,9787,9791,14,9793,9793,14,9795,9799,14,9812,9822,14,9824,9824,14,9827,9827,14,9829,9830,14,9832,9832,14,9851,9851,14,9854,9854,14,9856,9861,14,9874,9876,14,9878,9879,14,9881,9881,14,9883,9884,14,9888,9889,14,9895,9895,14,9898,9899,14,9904,9905,14,9917,9918,14,9924,9925,14,9928,9928,14,9934,9935,14,9937,9937,14,9939,9940,14,9961,9962,14,9968,9973,14,9975,9978,14,9981,9981,14,9986,9986,14,9989,9989,14,9998,9998,14,10000,10001,14,10004,10004,14,10013,10013,14,10024,10024,14,10052,10052,14,10060,10060,14,10067,10069,14,10083,10084,14,10133,10135,14,10160,10160,14,10548,10549,14,11035,11036,14,11093,11093,14,11647,11647,5,12330,12333,5,12336,12336,14,12441,12442,5,12953,12953,14,42608,42610,5,42654,42655,5,43010,43010,5,43019,43019,5,43045,43046,5,43052,43052,5,43188,43203,7,43232,43249,5,43302,43309,5,43346,43347,7,43392,43394,5,43443,43443,5,43446,43449,5,43452,43453,5,43493,43493,5,43567,43568,7,43571,43572,7,43587,43587,5,43597,43597,7,43696,43696,5,43703,43704,5,43713,43713,5,43756,43757,5,43765,43765,7,44003,44004,7,44006,44007,7,44009,44010,7,44013,44013,5,44033,44059,12,44061,44087,12,44089,44115,12,44117,44143,12,44145,44171,12,44173,44199,12,44201,44227,12,44229,44255,12,44257,44283,12,44285,44311,12,44313,44339,12,44341,44367,12,44369,44395,12,44397,44423,12,44425,44451,12,44453,44479,12,44481,44507,12,44509,44535,12,44537,44563,12,44565,44591,12,44593,44619,12,44621,44647,12,44649,44675,12,44677,44703,12,44705,44731,12,44733,44759,12,44761,44787,12,44789,44815,12,44817,44843,12,44845,44871,12,44873,44899,12,44901,44927,12,44929,44955,12,44957,44983,12,44985,45011,12,45013,45039,12,45041,45067,12,45069,45095,12,45097,45123,12,45125,45151,12,45153,45179,12,45181,45207,12,45209,45235,12,45237,45263,12,45265,45291,12,45293,45319,12,45321,45347,12,45349,45375,12,45377,45403,12,45405,45431,12,45433,45459,12,45461,45487,12,45489,45515,12,45517,45543,12,45545,45571,12,45573,45599,12,45601,45627,12,45629,45655,12,45657,45683,12,45685,45711,12,45713,45739,12,45741,45767,12,45769,45795,12,45797,45823,12,45825,45851,12,45853,45879,12,45881,45907,12,45909,45935,12,45937,45963,12,45965,45991,12,45993,46019,12,46021,46047,12,46049,46075,12,46077,46103,12,46105,46131,12,46133,46159,12,46161,46187,12,46189,46215,12,46217,46243,12,46245,46271,12,46273,46299,12,46301,46327,12,46329,46355,12,46357,46383,12,46385,46411,12,46413,46439,12,46441,46467,12,46469,46495,12,46497,46523,12,46525,46551,12,46553,46579,12,46581,46607,12,46609,46635,12,46637,46663,12,46665,46691,12,46693,46719,12,46721,46747,12,46749,46775,12,46777,46803,12,46805,46831,12,46833,46859,12,46861,46887,12,46889,46915,12,46917,46943,12,46945,46971,12,46973,46999,12,47001,47027,12,47029,47055,12,47057,47083,12,47085,47111,12,47113,47139,12,47141,47167,12,47169,47195,12,47197,47223,12,47225,47251,12,47253,47279,12,47281,47307,12,47309,47335,12,47337,47363,12,47365,47391,12,47393,47419,12,47421,47447,12,47449,47475,12,47477,47503,12,47505,47531,12,47533,47559,12,47561,47587,12,47589,47615,12,47617,47643,12,47645,47671,12,47673,47699,12,47701,47727,12,47729,47755,12,47757,47783,12,47785,47811,12,47813,47839,12,47841,47867,12,47869,47895,12,47897,47923,12,47925,47951,12,47953,47979,12,47981,48007,12,48009,48035,12,48037,48063,12,48065,48091,12,48093,48119,12,48121,48147,12,48149,48175,12,48177,48203,12,48205,48231,12,48233,48259,12,48261,48287,12,48289,48315,12,48317,48343,12,48345,48371,12,48373,48399,12,48401,48427,12,48429,48455,12,48457,48483,12,48485,48511,12,48513,48539,12,48541,48567,12,48569,48595,12,48597,48623,12,48625,48651,12,48653,48679,12,48681,48707,12,48709,48735,12,48737,48763,12,48765,48791,12,48793,48819,12,48821,48847,12,48849,48875,12,48877,48903,12,48905,48931,12,48933,48959,12,48961,48987,12,48989,49015,12,49017,49043,12,49045,49071,12,49073,49099,12,49101,49127,12,49129,49155,12,49157,49183,12,49185,49211,12,49213,49239,12,49241,49267,12,49269,49295,12,49297,49323,12,49325,49351,12,49353,49379,12,49381,49407,12,49409,49435,12,49437,49463,12,49465,49491,12,49493,49519,12,49521,49547,12,49549,49575,12,49577,49603,12,49605,49631,12,49633,49659,12,49661,49687,12,49689,49715,12,49717,49743,12,49745,49771,12,49773,49799,12,49801,49827,12,49829,49855,12,49857,49883,12,49885,49911,12,49913,49939,12,49941,49967,12,49969,49995,12,49997,50023,12,50025,50051,12,50053,50079,12,50081,50107,12,50109,50135,12,50137,50163,12,50165,50191,12,50193,50219,12,50221,50247,12,50249,50275,12,50277,50303,12,50305,50331,12,50333,50359,12,50361,50387,12,50389,50415,12,50417,50443,12,50445,50471,12,50473,50499,12,50501,50527,12,50529,50555,12,50557,50583,12,50585,50611,12,50613,50639,12,50641,50667,12,50669,50695,12,50697,50723,12,50725,50751,12,50753,50779,12,50781,50807,12,50809,50835,12,50837,50863,12,50865,50891,12,50893,50919,12,50921,50947,12,50949,50975,12,50977,51003,12,51005,51031,12,51033,51059,12,51061,51087,12,51089,51115,12,51117,51143,12,51145,51171,12,51173,51199,12,51201,51227,12,51229,51255,12,51257,51283,12,51285,51311,12,51313,51339,12,51341,51367,12,51369,51395,12,51397,51423,12,51425,51451,12,51453,51479,12,51481,51507,12,51509,51535,12,51537,51563,12,51565,51591,12,51593,51619,12,51621,51647,12,51649,51675,12,51677,51703,12,51705,51731,12,51733,51759,12,51761,51787,12,51789,51815,12,51817,51843,12,51845,51871,12,51873,51899,12,51901,51927,12,51929,51955,12,51957,51983,12,51985,52011,12,52013,52039,12,52041,52067,12,52069,52095,12,52097,52123,12,52125,52151,12,52153,52179,12,52181,52207,12,52209,52235,12,52237,52263,12,52265,52291,12,52293,52319,12,52321,52347,12,52349,52375,12,52377,52403,12,52405,52431,12,52433,52459,12,52461,52487,12,52489,52515,12,52517,52543,12,52545,52571,12,52573,52599,12,52601,52627,12,52629,52655,12,52657,52683,12,52685,52711,12,52713,52739,12,52741,52767,12,52769,52795,12,52797,52823,12,52825,52851,12,52853,52879,12,52881,52907,12,52909,52935,12,52937,52963,12,52965,52991,12,52993,53019,12,53021,53047,12,53049,53075,12,53077,53103,12,53105,53131,12,53133,53159,12,53161,53187,12,53189,53215,12,53217,53243,12,53245,53271,12,53273,53299,12,53301,53327,12,53329,53355,12,53357,53383,12,53385,53411,12,53413,53439,12,53441,53467,12,53469,53495,12,53497,53523,12,53525,53551,12,53553,53579,12,53581,53607,12,53609,53635,12,53637,53663,12,53665,53691,12,53693,53719,12,53721,53747,12,53749,53775,12,53777,53803,12,53805,53831,12,53833,53859,12,53861,53887,12,53889,53915,12,53917,53943,12,53945,53971,12,53973,53999,12,54001,54027,12,54029,54055,12,54057,54083,12,54085,54111,12,54113,54139,12,54141,54167,12,54169,54195,12,54197,54223,12,54225,54251,12,54253,54279,12,54281,54307,12,54309,54335,12,54337,54363,12,54365,54391,12,54393,54419,12,54421,54447,12,54449,54475,12,54477,54503,12,54505,54531,12,54533,54559,12,54561,54587,12,54589,54615,12,54617,54643,12,54645,54671,12,54673,54699,12,54701,54727,12,54729,54755,12,54757,54783,12,54785,54811,12,54813,54839,12,54841,54867,12,54869,54895,12,54897,54923,12,54925,54951,12,54953,54979,12,54981,55007,12,55009,55035,12,55037,55063,12,55065,55091,12,55093,55119,12,55121,55147,12,55149,55175,12,55177,55203,12,55243,55291,10,65024,65039,5,65279,65279,4,65520,65528,4,66045,66045,5,66422,66426,5,68101,68102,5,68152,68154,5,68325,68326,5,69291,69292,5,69632,69632,7,69634,69634,7,69759,69761,5]")}static getInstance(){return B._INSTANCE||(B._INSTANCE=new B),B._INSTANCE}getGraphemeBreakType(e){if(e<32)return 10===e?3:13===e?2:4;if(e<127)return 0;const t=this._data,n=t.length/3;let i=1;for(;i<=n;)if(e<t[3*i])i*=2;else{if(!(e>t[3*i+1]))return t[3*i+2];i=2*i+1}return 0}}function W(e,t){return(t<<5)-t+e|0}function q(e,t){t=W(149417,t);for(let n=0,i=e.length;n<i;n++)t=W(e.charCodeAt(n),t);return t}function H(e,t,n=32){const i=n-t;return(e<<t|(~((1<<i)-1)&e)>>>i)>>>0}function V(e,t=0,n=e.byteLength,i=0){for(let r=0;r<n;r++)e[t+r]=i}function Y(e,t=32){return e instanceof ArrayBuffer?Array.from(new Uint8Array(e)).map((e=>e.toString(16).padStart(2,"0"))).join(""):function(e,t,n="0"){for(;e.length<t;)e=n+e;return e}((e>>>0).toString(16),t/4)}B._INSTANCE=null;class ${constructor(){this._h0=1732584193,this._h1=4023233417,this._h2=2562383102,this._h3=271733878,this._h4=3285377520,this._buff=new Uint8Array(67),this._buffDV=new DataView(this._buff.buffer),this._buffLen=0,this._totalLen=0,this._leftoverHighSurrogate=0,this._finished=!1}update(e){const t=e.length;if(0===t)return;const n=this._buff;let i,r,s=this._buffLen,o=this._leftoverHighSurrogate;for(0!==o?(i=o,r=-1,o=0):(i=e.charCodeAt(0),r=0);;){let a=i;if(F(i)){if(!(r+1<t)){o=i;break}{const t=e.charCodeAt(r+1);K(t)?(r++,a=t-56320+(i-55296<<10)+65536):a=65533}}else K(i)&&(a=65533);if(s=this._push(n,s,a),r++,!(r<t))break;i=e.charCodeAt(r)}this._buffLen=s,this._leftoverHighSurrogate=o}_push(e,t,n){return n<128?e[t++]=n:n<2048?(e[t++]=192|(1984&n)>>>6,e[t++]=128|(63&n)>>>0):n<65536?(e[t++]=224|(61440&n)>>>12,e[t++]=128|(4032&n)>>>6,e[t++]=128|(63&n)>>>0):(e[t++]=240|(1835008&n)>>>18,e[t++]=128|(258048&n)>>>12,e[t++]=128|(4032&n)>>>6,e[t++]=128|(63&n)>>>0),t>=64&&(this._step(),t-=64,this._totalLen+=64,e[0]=e[64],e[1]=e[65],e[2]=e[66]),t}digest(){return this._finished||(this._finished=!0,this._leftoverHighSurrogate&&(this._leftoverHighSurrogate=0,this._buffLen=this._push(this._buff,this._buffLen,65533)),this._totalLen+=this._buffLen,this._wrapUp()),Y(this._h0)+Y(this._h1)+Y(this._h2)+Y(this._h3)+Y(this._h4)}_wrapUp(){this._buff[this._buffLen++]=128,V(this._buff,this._buffLen),this._buffLen>56&&(this._step(),V(this._buff));const e=8*this._totalLen;this._buffDV.setUint32(56,Math.floor(e/4294967296),!1),this._buffDV.setUint32(60,e%4294967296,!1),this._step()}_step(){const e=$._bigBlock32,t=this._buffDV;for(let n=0;n<64;n+=4)e.setUint32(n,t.getUint32(n,!1),!1);for(let t=64;t<320;t+=4)e.setUint32(t,H(e.getUint32(t-12,!1)^e.getUint32(t-32,!1)^e.getUint32(t-56,!1)^e.getUint32(t-64,!1),1),!1);let n,i,r,s=this._h0,o=this._h1,a=this._h2,l=this._h3,u=this._h4;for(let t=0;t<80;t++)t<20?(n=o&a|~o&l,i=1518500249):t<40?(n=o^a^l,i=1859775393):t<60?(n=o&a|o&l|a&l,i=2400959708):(n=o^a^l,i=3395469782),r=H(s,5)+n+u+i+e.getUint32(4*t,!1)&4294967295,u=l,l=a,a=H(o,30),o=s,s=r;this._h0=this._h0+s&4294967295,this._h1=this._h1+o&4294967295,this._h2=this._h2+a&4294967295,this._h3=this._h3+l&4294967295,this._h4=this._h4+u&4294967295}}$._bigBlock32=new DataView(new ArrayBuffer(320));class j{constructor(e){this.source=e}getElements(){const e=this.source,t=new Int32Array(e.length);for(let n=0,i=e.length;n<i;n++)t[n]=e.charCodeAt(n);return t}}function G(e,t,n){return new Z(new j(e),new j(t)).ComputeDiff(n).changes}class z{static Assert(e,t){if(!e)throw new Error(t)}}class Q{static Copy(e,t,n,i,r){for(let s=0;s<r;s++)n[i+s]=e[t+s]}static Copy2(e,t,n,i,r){for(let s=0;s<r;s++)n[i+s]=e[t+s]}}class X{constructor(){this.m_changes=[],this.m_originalStart=1073741824,this.m_modifiedStart=1073741824,this.m_originalCount=0,this.m_modifiedCount=0}MarkNextChange(){(this.m_originalCount>0||this.m_modifiedCount>0)&&this.m_changes.push(new D(this.m_originalStart,this.m_originalCount,this.m_modifiedStart,this.m_modifiedCount)),this.m_originalCount=0,this.m_modifiedCount=0,this.m_originalStart=1073741824,this.m_modifiedStart=1073741824}AddOriginalElement(e,t){this.m_originalStart=Math.min(this.m_originalStart,e),this.m_modifiedStart=Math.min(this.m_modifiedStart,t),this.m_originalCount++}AddModifiedElement(e,t){this.m_originalStart=Math.min(this.m_originalStart,e),this.m_modifiedStart=Math.min(this.m_modifiedStart,t),this.m_modifiedCount++}getChanges(){return(this.m_originalCount>0||this.m_modifiedCount>0)&&this.MarkNextChange(),this.m_changes}getReverseChanges(){return(this.m_originalCount>0||this.m_modifiedCount>0)&&this.MarkNextChange(),this.m_changes.reverse(),this.m_changes}}class Z{constructor(e,t,n=null){this.ContinueProcessingPredicate=n;const[i,r,s]=Z._getElements(e),[o,a,l]=Z._getElements(t);this._hasStrings=s&&l,this._originalStringElements=i,this._originalElementsOrHash=r,this._modifiedStringElements=o,this._modifiedElementsOrHash=a,this.m_forwardHistory=[],this.m_reverseHistory=[]}static _isStringArray(e){return e.length>0&&"string"==typeof e[0]}static _getElements(e){const t=e.getElements();if(Z._isStringArray(t)){const e=new Int32Array(t.length);for(let n=0,i=t.length;n<i;n++)e[n]=q(t[n],0);return[t,e,!0]}return t instanceof Int32Array?[[],t,!1]:[[],new Int32Array(t),!1]}ElementsAreEqual(e,t){return this._originalElementsOrHash[e]===this._modifiedElementsOrHash[t]&&(!this._hasStrings||this._originalStringElements[e]===this._modifiedStringElements[t])}OriginalElementsAreEqual(e,t){return this._originalElementsOrHash[e]===this._originalElementsOrHash[t]&&(!this._hasStrings||this._originalStringElements[e]===this._originalStringElements[t])}ModifiedElementsAreEqual(e,t){return this._modifiedElementsOrHash[e]===this._modifiedElementsOrHash[t]&&(!this._hasStrings||this._modifiedStringElements[e]===this._modifiedStringElements[t])}ComputeDiff(e){return this._ComputeDiff(0,this._originalElementsOrHash.length-1,0,this._modifiedElementsOrHash.length-1,e)}_ComputeDiff(e,t,n,i,r){const s=[!1];let o=this.ComputeDiffRecursive(e,t,n,i,s);return r&&(o=this.PrettifyChanges(o)),{quitEarly:s[0],changes:o}}ComputeDiffRecursive(e,t,n,i,r){for(r[0]=!1;e<=t&&n<=i&&this.ElementsAreEqual(e,n);)e++,n++;for(;t>=e&&i>=n&&this.ElementsAreEqual(t,i);)t--,i--;if(e>t||n>i){let r;return n<=i?(z.Assert(e===t+1,"originalStart should only be one more than originalEnd"),r=[new D(e,0,n,i-n+1)]):e<=t?(z.Assert(n===i+1,"modifiedStart should only be one more than modifiedEnd"),r=[new D(e,t-e+1,n,0)]):(z.Assert(e===t+1,"originalStart should only be one more than originalEnd"),z.Assert(n===i+1,"modifiedStart should only be one more than modifiedEnd"),r=[]),r}const s=[0],o=[0],a=this.ComputeRecursionPoint(e,t,n,i,s,o,r),l=s[0],u=o[0];if(null!==a)return a;if(!r[0]){const s=this.ComputeDiffRecursive(e,l,n,u,r);let o=[];return o=r[0]?[new D(l+1,t-(l+1)+1,u+1,i-(u+1)+1)]:this.ComputeDiffRecursive(l+1,t,u+1,i,r),this.ConcatenateChanges(s,o)}return[new D(e,t-e+1,n,i-n+1)]}WALKTRACE(e,t,n,i,r,s,o,a,l,u,h,d,c,f,m,g,_,p){let C=null,b=null,L=new X,S=t,N=n,E=c[0]-g[0]-i,A=-1073741824,y=this.m_forwardHistory.length-1;do{const t=E+e;t===S||t<N&&l[t-1]<l[t+1]?(f=(h=l[t+1])-E-i,h<A&&L.MarkNextChange(),A=h,L.AddModifiedElement(h+1,f),E=t+1-e):(f=(h=l[t-1]+1)-E-i,h<A&&L.MarkNextChange(),A=h-1,L.AddOriginalElement(h,f+1),E=t-1-e),y>=0&&(e=(l=this.m_forwardHistory[y])[0],S=1,N=l.length-1)}while(--y>=-1);if(C=L.getReverseChanges(),p[0]){let e=c[0]+1,t=g[0]+1;if(null!==C&&C.length>0){const n=C[C.length-1];e=Math.max(e,n.getOriginalEnd()),t=Math.max(t,n.getModifiedEnd())}b=[new D(e,d-e+1,t,m-t+1)]}else{L=new X,S=s,N=o,E=c[0]-g[0]-a,A=1073741824,y=_?this.m_reverseHistory.length-1:this.m_reverseHistory.length-2;do{const e=E+r;e===S||e<N&&u[e-1]>=u[e+1]?(f=(h=u[e+1]-1)-E-a,h>A&&L.MarkNextChange(),A=h+1,L.AddOriginalElement(h+1,f+1),E=e+1-r):(f=(h=u[e-1])-E-a,h>A&&L.MarkNextChange(),A=h,L.AddModifiedElement(h+1,f+1),E=e-1-r),y>=0&&(r=(u=this.m_reverseHistory[y])[0],S=1,N=u.length-1)}while(--y>=-1);b=L.getChanges()}return this.ConcatenateChanges(C,b)}ComputeRecursionPoint(e,t,n,i,r,s,o){let a=0,l=0,u=0,h=0,d=0,c=0;e--,n--,r[0]=0,s[0]=0,this.m_forwardHistory=[],this.m_reverseHistory=[];const f=t-e+(i-n),m=f+1,g=new Int32Array(m),_=new Int32Array(m),p=i-n,C=t-e,b=e-n,L=t-i,S=(C-p)%2==0;g[p]=e,_[C]=t,o[0]=!1;for(let N=1;N<=f/2+1;N++){let f=0,E=0;u=this.ClipDiagonalBound(p-N,N,p,m),h=this.ClipDiagonalBound(p+N,N,p,m);for(let e=u;e<=h;e+=2){a=e===u||e<h&&g[e-1]<g[e+1]?g[e+1]:g[e-1]+1,l=a-(e-p)-b;const n=a;for(;a<t&&l<i&&this.ElementsAreEqual(a+1,l+1);)a++,l++;if(g[e]=a,a+l>f+E&&(f=a,E=l),!S&&Math.abs(e-C)<=N-1&&a>=_[e])return r[0]=a,s[0]=l,n<=_[e]&&N<=1448?this.WALKTRACE(p,u,h,b,C,d,c,L,g,_,a,t,r,l,i,s,S,o):null}const A=(f-e+(E-n)-N)/2;if(null!==this.ContinueProcessingPredicate&&!this.ContinueProcessingPredicate(f,A))return o[0]=!0,r[0]=f,s[0]=E,A>0&&N<=1448?this.WALKTRACE(p,u,h,b,C,d,c,L,g,_,a,t,r,l,i,s,S,o):(e++,n++,[new D(e,t-e+1,n,i-n+1)]);d=this.ClipDiagonalBound(C-N,N,C,m),c=this.ClipDiagonalBound(C+N,N,C,m);for(let f=d;f<=c;f+=2){a=f===d||f<c&&_[f-1]>=_[f+1]?_[f+1]-1:_[f-1],l=a-(f-C)-L;const m=a;for(;a>e&&l>n&&this.ElementsAreEqual(a,l);)a--,l--;if(_[f]=a,S&&Math.abs(f-p)<=N&&a<=g[f])return r[0]=a,s[0]=l,m>=g[f]&&N<=1448?this.WALKTRACE(p,u,h,b,C,d,c,L,g,_,a,t,r,l,i,s,S,o):null}if(N<=1447){let e=new Int32Array(h-u+2);e[0]=p-u+1,Q.Copy2(g,u,e,1,h-u+1),this.m_forwardHistory.push(e),e=new Int32Array(c-d+2),e[0]=C-d+1,Q.Copy2(_,d,e,1,c-d+1),this.m_reverseHistory.push(e)}}return this.WALKTRACE(p,u,h,b,C,d,c,L,g,_,a,t,r,l,i,s,S,o)}PrettifyChanges(e){for(let t=0;t<e.length;t++){const n=e[t],i=t<e.length-1?e[t+1].originalStart:this._originalElementsOrHash.length,r=t<e.length-1?e[t+1].modifiedStart:this._modifiedElementsOrHash.length,s=n.originalLength>0,o=n.modifiedLength>0;for(;n.originalStart+n.originalLength<i&&n.modifiedStart+n.modifiedLength<r&&(!s||this.OriginalElementsAreEqual(n.originalStart,n.originalStart+n.originalLength))&&(!o||this.ModifiedElementsAreEqual(n.modifiedStart,n.modifiedStart+n.modifiedLength));)n.originalStart++,n.modifiedStart++;let a=[null];t<e.length-1&&this.ChangesOverlap(e[t],e[t+1],a)&&(e[t]=a[0],e.splice(t+1,1),t--)}for(let t=e.length-1;t>=0;t--){const n=e[t];let i=0,r=0;if(t>0){const n=e[t-1];i=n.originalStart+n.originalLength,r=n.modifiedStart+n.modifiedLength}const s=n.originalLength>0,o=n.modifiedLength>0;let a=0,l=this._boundaryScore(n.originalStart,n.originalLength,n.modifiedStart,n.modifiedLength);for(let e=1;;e++){const t=n.originalStart-e,u=n.modifiedStart-e;if(t<i||u<r)break;if(s&&!this.OriginalElementsAreEqual(t,t+n.originalLength))break;if(o&&!this.ModifiedElementsAreEqual(u,u+n.modifiedLength))break;const h=(t===i&&u===r?5:0)+this._boundaryScore(t,n.originalLength,u,n.modifiedLength);h>l&&(l=h,a=e)}n.originalStart-=a,n.modifiedStart-=a;const u=[null];t>0&&this.ChangesOverlap(e[t-1],e[t],u)&&(e[t-1]=u[0],e.splice(t,1),t++)}if(this._hasStrings)for(let t=1,n=e.length;t<n;t++){const n=e[t-1],i=e[t],r=i.originalStart-n.originalStart-n.originalLength,s=n.originalStart,o=i.originalStart+i.originalLength,a=o-s,l=n.modifiedStart,u=i.modifiedStart+i.modifiedLength,h=u-l;if(r<5&&a<20&&h<20){const e=this._findBetterContiguousSequence(s,a,l,h,r);if(e){const[t,s]=e;t===n.originalStart+n.originalLength&&s===n.modifiedStart+n.modifiedLength||(n.originalLength=t-n.originalStart,n.modifiedLength=s-n.modifiedStart,i.originalStart=t+r,i.modifiedStart=s+r,i.originalLength=o-i.originalStart,i.modifiedLength=u-i.modifiedStart)}}}return e}_findBetterContiguousSequence(e,t,n,i,r){if(t<r||i<r)return null;const s=e+t-r+1,o=n+i-r+1;let a=0,l=0,u=0;for(let t=e;t<s;t++)for(let e=n;e<o;e++){const n=this._contiguousSequenceScore(t,e,r);n>0&&n>a&&(a=n,l=t,u=e)}return a>0?[l,u]:null}_contiguousSequenceScore(e,t,n){let i=0;for(let r=0;r<n;r++){if(!this.ElementsAreEqual(e+r,t+r))return 0;i+=this._originalStringElements[e+r].length}return i}_OriginalIsBoundary(e){return e<=0||e>=this._originalElementsOrHash.length-1||this._hasStrings&&/^\s*$/.test(this._originalStringElements[e])}_OriginalRegionIsBoundary(e,t){if(this._OriginalIsBoundary(e)||this._OriginalIsBoundary(e-1))return!0;if(t>0){const n=e+t;if(this._OriginalIsBoundary(n-1)||this._OriginalIsBoundary(n))return!0}return!1}_ModifiedIsBoundary(e){return e<=0||e>=this._modifiedElementsOrHash.length-1||this._hasStrings&&/^\s*$/.test(this._modifiedStringElements[e])}_ModifiedRegionIsBoundary(e,t){if(this._ModifiedIsBoundary(e)||this._ModifiedIsBoundary(e-1))return!0;if(t>0){const n=e+t;if(this._ModifiedIsBoundary(n-1)||this._ModifiedIsBoundary(n))return!0}return!1}_boundaryScore(e,t,n,i){return(this._OriginalRegionIsBoundary(e,t)?1:0)+(this._ModifiedRegionIsBoundary(n,i)?1:0)}ConcatenateChanges(e,t){let n=[];if(0===e.length||0===t.length)return t.length>0?t:e;if(this.ChangesOverlap(e[e.length-1],t[0],n)){const i=new Array(e.length+t.length-1);return Q.Copy(e,0,i,0,e.length-1),i[e.length-1]=n[0],Q.Copy(t,1,i,e.length,t.length-1),i}{const n=new Array(e.length+t.length);return Q.Copy(e,0,n,0,e.length),Q.Copy(t,0,n,e.length,t.length),n}}ChangesOverlap(e,t,n){if(z.Assert(e.originalStart<=t.originalStart,"Left change is not less than or equal to right change"),z.Assert(e.modifiedStart<=t.modifiedStart,"Left change is not less than or equal to right change"),e.originalStart+e.originalLength>=t.originalStart||e.modifiedStart+e.modifiedLength>=t.modifiedStart){const i=e.originalStart;let r=e.originalLength;const s=e.modifiedStart;let o=e.modifiedLength;return e.originalStart+e.originalLength>=t.originalStart&&(r=t.originalStart+t.originalLength-e.originalStart),e.modifiedStart+e.modifiedLength>=t.modifiedStart&&(o=t.modifiedStart+t.modifiedLength-e.modifiedStart),n[0]=new D(i,r,s,o),!0}return n[0]=null,!1}ClipDiagonalBound(e,t,n,i){if(e>=0&&e<i)return e;const r=t%2==0;return e<0?r===(n%2==0)?0:1:r===((i-n-1)%2==0)?i-1:i-2}}let J;if(void 0!==y.vscode&&void 0!==y.vscode.process){const e=y.vscode.process;J={get platform(){return e.platform},get env(){return e.env},cwd:()=>e.cwd(),nextTick:e=>M(e)}}else J="undefined"!=typeof process?{get platform(){return process.platform},get env(){return process.env},cwd:()=>process.env.VSCODE_CWD||process.cwd(),nextTick:e=>process.nextTick(e)}:{get platform(){return x?"win32":I?"darwin":"linux"},nextTick:e=>M(e),get env(){return{}},cwd:()=>"/"};const ee=J.cwd,te=J.env,ne=J.platform,ie=46,re=47,se=92,oe=58;class ae extends Error{constructor(e,t,n){let i;"string"==typeof t&&0===t.indexOf("not ")?(i="must not be",t=t.replace(/^not /,"")):i="must be";const r=-1!==e.indexOf(".")?"property":"argument";let s=`The "${e}" ${r} ${i} of type ${t}`;s+=". Received type "+typeof n,super(s),this.code="ERR_INVALID_ARG_TYPE"}}function le(e,t){if("string"!=typeof e)throw new ae(t,"string",e)}function ue(e){return e===re||e===se}function he(e){return e===re}function de(e){return e>=65&&e<=90||e>=97&&e<=122}function ce(e,t,n,i){let r="",s=0,o=-1,a=0,l=0;for(let u=0;u<=e.length;++u){if(u<e.length)l=e.charCodeAt(u);else{if(i(l))break;l=re}if(i(l)){if(o===u-1||1===a);else if(2===a){if(r.length<2||2!==s||r.charCodeAt(r.length-1)!==ie||r.charCodeAt(r.length-2)!==ie){if(r.length>2){const e=r.lastIndexOf(n);-1===e?(r="",s=0):(r=r.slice(0,e),s=r.length-1-r.lastIndexOf(n)),o=u,a=0;continue}if(0!==r.length){r="",s=0,o=u,a=0;continue}}t&&(r+=r.length>0?`${n}..`:"..",s=2)}else r.length>0?r+=`${n}${e.slice(o+1,u)}`:r=e.slice(o+1,u),s=u-o-1;o=u,a=0}else l===ie&&-1!==a?++a:a=-1}return r}function fe(e,t){if(null===t||"object"!=typeof t)throw new ae("pathObject","Object",t);const n=t.dir||t.root,i=t.base||`${t.name||""}${t.ext||""}`;return n?n===t.root?`${n}${i}`:`${n}${e}${i}`:i}const me={resolve(...e){let t="",n="",i=!1;for(let r=e.length-1;r>=-1;r--){let s;if(r>=0){if(s=e[r],le(s,"path"),0===s.length)continue}else 0===t.length?s=ee():(s=te[`=${t}`]||ee(),(void 0===s||s.slice(0,2).toLowerCase()!==t.toLowerCase()&&s.charCodeAt(2)===se)&&(s=`${t}\\`));const o=s.length;let a=0,l="",u=!1;const h=s.charCodeAt(0);if(1===o)ue(h)&&(a=1,u=!0);else if(ue(h))if(u=!0,ue(s.charCodeAt(1))){let e=2,t=e;for(;e<o&&!ue(s.charCodeAt(e));)e++;if(e<o&&e!==t){const n=s.slice(t,e);for(t=e;e<o&&ue(s.charCodeAt(e));)e++;if(e<o&&e!==t){for(t=e;e<o&&!ue(s.charCodeAt(e));)e++;e!==o&&e===t||(l=`\\\\${n}\\${s.slice(t,e)}`,a=e)}}}else a=1;else de(h)&&s.charCodeAt(1)===oe&&(l=s.slice(0,2),a=2,o>2&&ue(s.charCodeAt(2))&&(u=!0,a=3));if(l.length>0)if(t.length>0){if(l.toLowerCase()!==t.toLowerCase())continue}else t=l;if(i){if(t.length>0)break}else if(n=`${s.slice(a)}\\${n}`,i=u,u&&t.length>0)break}return n=ce(n,!i,"\\",ue),i?`${t}\\${n}`:`${t}${n}`||"."},normalize(e){le(e,"path");const t=e.length;if(0===t)return".";let n,i=0,r=!1;const s=e.charCodeAt(0);if(1===t)return he(s)?"\\":e;if(ue(s))if(r=!0,ue(e.charCodeAt(1))){let r=2,s=r;for(;r<t&&!ue(e.charCodeAt(r));)r++;if(r<t&&r!==s){const o=e.slice(s,r);for(s=r;r<t&&ue(e.charCodeAt(r));)r++;if(r<t&&r!==s){for(s=r;r<t&&!ue(e.charCodeAt(r));)r++;if(r===t)return`\\\\${o}\\${e.slice(s)}\\`;r!==s&&(n=`\\\\${o}\\${e.slice(s,r)}`,i=r)}}}else i=1;else de(s)&&e.charCodeAt(1)===oe&&(n=e.slice(0,2),i=2,t>2&&ue(e.charCodeAt(2))&&(r=!0,i=3));let o=i<t?ce(e.slice(i),!r,"\\",ue):"";return 0!==o.length||r||(o="."),o.length>0&&ue(e.charCodeAt(t-1))&&(o+="\\"),void 0===n?r?`\\${o}`:o:r?`${n}\\${o}`:`${n}${o}`},isAbsolute(e){le(e,"path");const t=e.length;if(0===t)return!1;const n=e.charCodeAt(0);return ue(n)||t>2&&de(n)&&e.charCodeAt(1)===oe&&ue(e.charCodeAt(2))},join(...e){if(0===e.length)return".";let t,n;for(let i=0;i<e.length;++i){const r=e[i];le(r,"path"),r.length>0&&(void 0===t?t=n=r:t+=`\\${r}`)}if(void 0===t)return".";let i=!0,r=0;if("string"==typeof n&&ue(n.charCodeAt(0))){++r;const e=n.length;e>1&&ue(n.charCodeAt(1))&&(++r,e>2&&(ue(n.charCodeAt(2))?++r:i=!1))}if(i){for(;r<t.length&&ue(t.charCodeAt(r));)r++;r>=2&&(t=`\\${t.slice(r)}`)}return me.normalize(t)},relative(e,t){if(le(e,"from"),le(t,"to"),e===t)return"";const n=me.resolve(e),i=me.resolve(t);if(n===i)return"";if((e=n.toLowerCase())===(t=i.toLowerCase()))return"";let r=0;for(;r<e.length&&e.charCodeAt(r)===se;)r++;let s=e.length;for(;s-1>r&&e.charCodeAt(s-1)===se;)s--;const o=s-r;let a=0;for(;a<t.length&&t.charCodeAt(a)===se;)a++;let l=t.length;for(;l-1>a&&t.charCodeAt(l-1)===se;)l--;const u=l-a,h=o<u?o:u;let d=-1,c=0;for(;c<h;c++){const n=e.charCodeAt(r+c);if(n!==t.charCodeAt(a+c))break;n===se&&(d=c)}if(c!==h){if(-1===d)return i}else{if(u>h){if(t.charCodeAt(a+c)===se)return i.slice(a+c+1);if(2===c)return i.slice(a+c)}o>h&&(e.charCodeAt(r+c)===se?d=c:2===c&&(d=3)),-1===d&&(d=0)}let f="";for(c=r+d+1;c<=s;++c)c!==s&&e.charCodeAt(c)!==se||(f+=0===f.length?"..":"\\..");return a+=d,f.length>0?`${f}${i.slice(a,l)}`:(i.charCodeAt(a)===se&&++a,i.slice(a,l))},toNamespacedPath(e){if("string"!=typeof e)return e;if(0===e.length)return"";const t=me.resolve(e);if(t.length<=2)return e;if(t.charCodeAt(0)===se){if(t.charCodeAt(1)===se){const e=t.charCodeAt(2);if(63!==e&&e!==ie)return`\\\\?\\UNC\\${t.slice(2)}`}}else if(de(t.charCodeAt(0))&&t.charCodeAt(1)===oe&&t.charCodeAt(2)===se)return`\\\\?\\${t}`;return e},dirname(e){le(e,"path");const t=e.length;if(0===t)return".";let n=-1,i=0;const r=e.charCodeAt(0);if(1===t)return ue(r)?e:".";if(ue(r)){if(n=i=1,ue(e.charCodeAt(1))){let r=2,s=r;for(;r<t&&!ue(e.charCodeAt(r));)r++;if(r<t&&r!==s){for(s=r;r<t&&ue(e.charCodeAt(r));)r++;if(r<t&&r!==s){for(s=r;r<t&&!ue(e.charCodeAt(r));)r++;if(r===t)return e;r!==s&&(n=i=r+1)}}}}else de(r)&&e.charCodeAt(1)===oe&&(n=t>2&&ue(e.charCodeAt(2))?3:2,i=n);let s=-1,o=!0;for(let n=t-1;n>=i;--n)if(ue(e.charCodeAt(n))){if(!o){s=n;break}}else o=!1;if(-1===s){if(-1===n)return".";s=n}return e.slice(0,s)},basename(e,t){void 0!==t&&le(t,"ext"),le(e,"path");let n,i=0,r=-1,s=!0;if(e.length>=2&&de(e.charCodeAt(0))&&e.charCodeAt(1)===oe&&(i=2),void 0!==t&&t.length>0&&t.length<=e.length){if(t===e)return"";let o=t.length-1,a=-1;for(n=e.length-1;n>=i;--n){const l=e.charCodeAt(n);if(ue(l)){if(!s){i=n+1;break}}else-1===a&&(s=!1,a=n+1),o>=0&&(l===t.charCodeAt(o)?-1==--o&&(r=n):(o=-1,r=a))}return i===r?r=a:-1===r&&(r=e.length),e.slice(i,r)}for(n=e.length-1;n>=i;--n)if(ue(e.charCodeAt(n))){if(!s){i=n+1;break}}else-1===r&&(s=!1,r=n+1);return-1===r?"":e.slice(i,r)},extname(e){le(e,"path");let t=0,n=-1,i=0,r=-1,s=!0,o=0;e.length>=2&&e.charCodeAt(1)===oe&&de(e.charCodeAt(0))&&(t=i=2);for(let a=e.length-1;a>=t;--a){const t=e.charCodeAt(a);if(ue(t)){if(!s){i=a+1;break}}else-1===r&&(s=!1,r=a+1),t===ie?-1===n?n=a:1!==o&&(o=1):-1!==n&&(o=-1)}return-1===n||-1===r||0===o||1===o&&n===r-1&&n===i+1?"":e.slice(n,r)},format:fe.bind(null,"\\"),parse(e){le(e,"path");const t={root:"",dir:"",base:"",ext:"",name:""};if(0===e.length)return t;const n=e.length;let i=0,r=e.charCodeAt(0);if(1===n)return ue(r)?(t.root=t.dir=e,t):(t.base=t.name=e,t);if(ue(r)){if(i=1,ue(e.charCodeAt(1))){let t=2,r=t;for(;t<n&&!ue(e.charCodeAt(t));)t++;if(t<n&&t!==r){for(r=t;t<n&&ue(e.charCodeAt(t));)t++;if(t<n&&t!==r){for(r=t;t<n&&!ue(e.charCodeAt(t));)t++;t===n?i=t:t!==r&&(i=t+1)}}}}else if(de(r)&&e.charCodeAt(1)===oe){if(n<=2)return t.root=t.dir=e,t;if(i=2,ue(e.charCodeAt(2))){if(3===n)return t.root=t.dir=e,t;i=3}}i>0&&(t.root=e.slice(0,i));let s=-1,o=i,a=-1,l=!0,u=e.length-1,h=0;for(;u>=i;--u)if(r=e.charCodeAt(u),ue(r)){if(!l){o=u+1;break}}else-1===a&&(l=!1,a=u+1),r===ie?-1===s?s=u:1!==h&&(h=1):-1!==s&&(h=-1);return-1!==a&&(-1===s||0===h||1===h&&s===a-1&&s===o+1?t.base=t.name=e.slice(o,a):(t.name=e.slice(o,s),t.base=e.slice(o,a),t.ext=e.slice(s,a))),t.dir=o>0&&o!==i?e.slice(0,o-1):t.root,t},sep:"\\",delimiter:";",win32:null,posix:null},ge={resolve(...e){let t="",n=!1;for(let i=e.length-1;i>=-1&&!n;i--){const r=i>=0?e[i]:ee();le(r,"path"),0!==r.length&&(t=`${r}/${t}`,n=r.charCodeAt(0)===re)}return t=ce(t,!n,"/",he),n?`/${t}`:t.length>0?t:"."},normalize(e){if(le(e,"path"),0===e.length)return".";const t=e.charCodeAt(0)===re,n=e.charCodeAt(e.length-1)===re;return 0===(e=ce(e,!t,"/",he)).length?t?"/":n?"./":".":(n&&(e+="/"),t?`/${e}`:e)},isAbsolute:e=>(le(e,"path"),e.length>0&&e.charCodeAt(0)===re),join(...e){if(0===e.length)return".";let t;for(let n=0;n<e.length;++n){const i=e[n];le(i,"path"),i.length>0&&(void 0===t?t=i:t+=`/${i}`)}return void 0===t?".":ge.normalize(t)},relative(e,t){if(le(e,"from"),le(t,"to"),e===t)return"";if((e=ge.resolve(e))===(t=ge.resolve(t)))return"";const n=e.length,i=n-1,r=t.length-1,s=i<r?i:r;let o=-1,a=0;for(;a<s;a++){const n=e.charCodeAt(1+a);if(n!==t.charCodeAt(1+a))break;n===re&&(o=a)}if(a===s)if(r>s){if(t.charCodeAt(1+a)===re)return t.slice(1+a+1);if(0===a)return t.slice(1+a)}else i>s&&(e.charCodeAt(1+a)===re?o=a:0===a&&(o=0));let l="";for(a=1+o+1;a<=n;++a)a!==n&&e.charCodeAt(a)!==re||(l+=0===l.length?"..":"/..");return`${l}${t.slice(1+o)}`},toNamespacedPath:e=>e,dirname(e){if(le(e,"path"),0===e.length)return".";const t=e.charCodeAt(0)===re;let n=-1,i=!0;for(let t=e.length-1;t>=1;--t)if(e.charCodeAt(t)===re){if(!i){n=t;break}}else i=!1;return-1===n?t?"/":".":t&&1===n?"//":e.slice(0,n)},basename(e,t){void 0!==t&&le(t,"ext"),le(e,"path");let n,i=0,r=-1,s=!0;if(void 0!==t&&t.length>0&&t.length<=e.length){if(t===e)return"";let o=t.length-1,a=-1;for(n=e.length-1;n>=0;--n){const l=e.charCodeAt(n);if(l===re){if(!s){i=n+1;break}}else-1===a&&(s=!1,a=n+1),o>=0&&(l===t.charCodeAt(o)?-1==--o&&(r=n):(o=-1,r=a))}return i===r?r=a:-1===r&&(r=e.length),e.slice(i,r)}for(n=e.length-1;n>=0;--n)if(e.charCodeAt(n)===re){if(!s){i=n+1;break}}else-1===r&&(s=!1,r=n+1);return-1===r?"":e.slice(i,r)},extname(e){le(e,"path");let t=-1,n=0,i=-1,r=!0,s=0;for(let o=e.length-1;o>=0;--o){const a=e.charCodeAt(o);if(a!==re)-1===i&&(r=!1,i=o+1),a===ie?-1===t?t=o:1!==s&&(s=1):-1!==t&&(s=-1);else if(!r){n=o+1;break}}return-1===t||-1===i||0===s||1===s&&t===i-1&&t===n+1?"":e.slice(t,i)},format:fe.bind(null,"/"),parse(e){le(e,"path");const t={root:"",dir:"",base:"",ext:"",name:""};if(0===e.length)return t;const n=e.charCodeAt(0)===re;let i;n?(t.root="/",i=1):i=0;let r=-1,s=0,o=-1,a=!0,l=e.length-1,u=0;for(;l>=i;--l){const t=e.charCodeAt(l);if(t!==re)-1===o&&(a=!1,o=l+1),t===ie?-1===r?r=l:1!==u&&(u=1):-1!==r&&(u=-1);else if(!a){s=l+1;break}}if(-1!==o){const i=0===s&&n?1:s;-1===r||0===u||1===u&&r===o-1&&r===s+1?t.base=t.name=e.slice(i,o):(t.name=e.slice(i,r),t.base=e.slice(i,o),t.ext=e.slice(r,o))}return s>0?t.dir=e.slice(0,s-1):n&&(t.dir="/"),t},sep:"/",delimiter:":",win32:null,posix:null};ge.win32=me.win32=me,ge.posix=me.posix=ge,"win32"===ne?me.normalize:ge.normalize,"win32"===ne?me.resolve:ge.resolve,"win32"===ne?me.relative:ge.relative,"win32"===ne?me.dirname:ge.dirname,"win32"===ne?me.basename:ge.basename,"win32"===ne?me.extname:ge.extname,"win32"===ne?me.sep:ge.sep;const _e=/^\w[\w\d+.-]*$/,pe=/^\//,Ce=/^\/\//;function be(e,t){if(!e.scheme&&t)throw new Error(`[UriError]: Scheme is missing: {scheme: "", authority: "${e.authority}", path: "${e.path}", query: "${e.query}", fragment: "${e.fragment}"}`);if(e.scheme&&!_e.test(e.scheme))throw new Error("[UriError]: Scheme contains illegal characters.");if(e.path)if(e.authority){if(!pe.test(e.path))throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character')}else if(Ce.test(e.path))throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")')}const Le="",Se="/",Ne=/^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;class Ee{constructor(e,t,n,i,r,s=!1){"object"==typeof e?(this.scheme=e.scheme||Le,this.authority=e.authority||Le,this.path=e.path||Le,this.query=e.query||Le,this.fragment=e.fragment||Le):(this.scheme=function(e,t){return e||t?e:"file"}(e,s),this.authority=t||Le,this.path=function(e,t){switch(e){case"https":case"http":case"file":t?t[0]!==Se&&(t=Se+t):t=Se}return t}(this.scheme,n||Le),this.query=i||Le,this.fragment=r||Le,be(this,s))}static isUri(e){return e instanceof Ee||!!e&&"string"==typeof e.authority&&"string"==typeof e.fragment&&"string"==typeof e.path&&"string"==typeof e.query&&"string"==typeof e.scheme&&"string"==typeof e.fsPath&&"function"==typeof e.with&&"function"==typeof e.toString}get fsPath(){return Te(this,!1)}with(e){if(!e)return this;let{scheme:t,authority:n,path:i,query:r,fragment:s}=e;return void 0===t?t=this.scheme:null===t&&(t=Le),void 0===n?n=this.authority:null===n&&(n=Le),void 0===i?i=this.path:null===i&&(i=Le),void 0===r?r=this.query:null===r&&(r=Le),void 0===s?s=this.fragment:null===s&&(s=Le),t===this.scheme&&n===this.authority&&i===this.path&&r===this.query&&s===this.fragment?this:new ye(t,n,i,r,s)}static parse(e,t=!1){const n=Ne.exec(e);return n?new ye(n[2]||Le,Re(n[4]||Le),Re(n[5]||Le),Re(n[7]||Le),Re(n[9]||Le),t):new ye(Le,Le,Le,Le,Le)}static file(e){let t=Le;if(x&&(e=e.replace(/\\/g,Se)),e[0]===Se&&e[1]===Se){const n=e.indexOf(Se,2);-1===n?(t=e.substring(2),e=Se):(t=e.substring(2,n),e=e.substring(n)||Se)}return new ye("file",t,e,Le,Le)}static from(e){const t=new ye(e.scheme,e.authority,e.path,e.query,e.fragment);return be(t,!0),t}static joinPath(e,...t){if(!e.path)throw new Error("[UriError]: cannot call joinPath on URI without path");let n;return n=x&&"file"===e.scheme?Ee.file(me.join(Te(e,!0),...t)).path:ge.join(e.path,...t),e.with({path:n})}toString(e=!1){return xe(this,e)}toJSON(){return this}static revive(e){if(e){if(e instanceof Ee)return e;{const t=new ye(e);return t._formatted=e.external,t._fsPath=e._sep===Ae?e.fsPath:null,t}}return e}}const Ae=x?1:void 0;class ye extends Ee{constructor(){super(...arguments),this._formatted=null,this._fsPath=null}get fsPath(){return this._fsPath||(this._fsPath=Te(this,!1)),this._fsPath}toString(e=!1){return e?xe(this,!0):(this._formatted||(this._formatted=xe(this,!1)),this._formatted)}toJSON(){const e={$mid:1};return this._fsPath&&(e.fsPath=this._fsPath,e._sep=Ae),this._formatted&&(e.external=this._formatted),this.path&&(e.path=this.path),this.scheme&&(e.scheme=this.scheme),this.authority&&(e.authority=this.authority),this.query&&(e.query=this.query),this.fragment&&(e.fragment=this.fragment),e}}const ve={58:"%3A",47:"%2F",63:"%3F",35:"%23",91:"%5B",93:"%5D",64:"%40",33:"%21",36:"%24",38:"%26",39:"%27",40:"%28",41:"%29",42:"%2A",43:"%2B",44:"%2C",59:"%3B",61:"%3D",32:"%20"};function we(e,t){let n,i=-1;for(let r=0;r<e.length;r++){const s=e.charCodeAt(r);if(s>=97&&s<=122||s>=65&&s<=90||s>=48&&s<=57||45===s||46===s||95===s||126===s||t&&47===s)-1!==i&&(n+=encodeURIComponent(e.substring(i,r)),i=-1),void 0!==n&&(n+=e.charAt(r));else{void 0===n&&(n=e.substr(0,r));const t=ve[s];void 0!==t?(-1!==i&&(n+=encodeURIComponent(e.substring(i,r)),i=-1),n+=t):-1===i&&(i=r)}}return-1!==i&&(n+=encodeURIComponent(e.substring(i))),void 0!==n?n:e}function Oe(e){let t;for(let n=0;n<e.length;n++){const i=e.charCodeAt(n);35===i||63===i?(void 0===t&&(t=e.substr(0,n)),t+=ve[i]):void 0!==t&&(t+=e[n])}return void 0!==t?t:e}function Te(e,t){let n;return n=e.authority&&e.path.length>1&&"file"===e.scheme?`//${e.authority}${e.path}`:47===e.path.charCodeAt(0)&&(e.path.charCodeAt(1)>=65&&e.path.charCodeAt(1)<=90||e.path.charCodeAt(1)>=97&&e.path.charCodeAt(1)<=122)&&58===e.path.charCodeAt(2)?t?e.path.substr(1):e.path[1].toLowerCase()+e.path.substr(2):e.path,x&&(n=n.replace(/\//g,"\\")),n}function xe(e,t){const n=t?Oe:we;let i="",{scheme:r,authority:s,path:o,query:a,fragment:l}=e;if(r&&(i+=r,i+=":"),(s||"file"===r)&&(i+=Se,i+=Se),s){let e=s.indexOf("@");if(-1!==e){const t=s.substr(0,e);s=s.substr(e+1),e=t.indexOf(":"),-1===e?i+=n(t,!1):(i+=n(t.substr(0,e),!1),i+=":",i+=n(t.substr(e+1),!1)),i+="@"}s=s.toLowerCase(),e=s.indexOf(":"),-1===e?i+=n(s,!1):(i+=n(s.substr(0,e),!1),i+=s.substr(e))}if(o){if(o.length>=3&&47===o.charCodeAt(0)&&58===o.charCodeAt(2)){const e=o.charCodeAt(1);e>=65&&e<=90&&(o=`/${String.fromCharCode(e+32)}:${o.substr(3)}`)}else if(o.length>=2&&58===o.charCodeAt(1)){const e=o.charCodeAt(0);e>=65&&e<=90&&(o=`${String.fromCharCode(e+32)}:${o.substr(2)}`)}i+=n(o,!0)}return a&&(i+="?",i+=n(a,!1)),l&&(i+="#",i+=t?l:we(l,!1)),i}function Ie(e){try{return decodeURIComponent(e)}catch(t){return e.length>3?e.substr(0,3)+Ie(e.substr(3)):e}}const Me=/(%[0-9A-Za-z][0-9A-Za-z])+/g;function Re(e){return e.match(Me)?e.replace(Me,(e=>Ie(e))):e}class Pe{constructor(e,t){this.lineNumber=e,this.column=t}with(e=this.lineNumber,t=this.column){return e===this.lineNumber&&t===this.column?this:new Pe(e,t)}delta(e=0,t=0){return this.with(this.lineNumber+e,this.column+t)}equals(e){return Pe.equals(this,e)}static equals(e,t){return!e&&!t||!!e&&!!t&&e.lineNumber===t.lineNumber&&e.column===t.column}isBefore(e){return Pe.isBefore(this,e)}static isBefore(e,t){return e.lineNumber<t.lineNumber||!(t.lineNumber<e.lineNumber)&&e.column<t.column}isBeforeOrEqual(e){return Pe.isBeforeOrEqual(this,e)}static isBeforeOrEqual(e,t){return e.lineNumber<t.lineNumber||!(t.lineNumber<e.lineNumber)&&e.column<=t.column}static compare(e,t){let n=0|e.lineNumber,i=0|t.lineNumber;return n===i?(0|e.column)-(0|t.column):n-i}clone(){return new Pe(this.lineNumber,this.column)}toString(){return"("+this.lineNumber+","+this.column+")"}static lift(e){return new Pe(e.lineNumber,e.column)}static isIPosition(e){return e&&"number"==typeof e.lineNumber&&"number"==typeof e.column}}class Ue{constructor(e,t,n,i){e>n||e===n&&t>i?(this.startLineNumber=n,this.startColumn=i,this.endLineNumber=e,this.endColumn=t):(this.startLineNumber=e,this.startColumn=t,this.endLineNumber=n,this.endColumn=i)}isEmpty(){return Ue.isEmpty(this)}static isEmpty(e){return e.startLineNumber===e.endLineNumber&&e.startColumn===e.endColumn}containsPosition(e){return Ue.containsPosition(this,e)}static containsPosition(e,t){return!(t.lineNumber<e.startLineNumber||t.lineNumber>e.endLineNumber||t.lineNumber===e.startLineNumber&&t.column<e.startColumn||t.lineNumber===e.endLineNumber&&t.column>e.endColumn)}containsRange(e){return Ue.containsRange(this,e)}static containsRange(e,t){return!(t.startLineNumber<e.startLineNumber||t.endLineNumber<e.startLineNumber||t.startLineNumber>e.endLineNumber||t.endLineNumber>e.endLineNumber||t.startLineNumber===e.startLineNumber&&t.startColumn<e.startColumn||t.endLineNumber===e.endLineNumber&&t.endColumn>e.endColumn)}strictContainsRange(e){return Ue.strictContainsRange(this,e)}static strictContainsRange(e,t){return!(t.startLineNumber<e.startLineNumber||t.endLineNumber<e.startLineNumber||t.startLineNumber>e.endLineNumber||t.endLineNumber>e.endLineNumber||t.startLineNumber===e.startLineNumber&&t.startColumn<=e.startColumn||t.endLineNumber===e.endLineNumber&&t.endColumn>=e.endColumn)}plusRange(e){return Ue.plusRange(this,e)}static plusRange(e,t){let n,i,r,s;return t.startLineNumber<e.startLineNumber?(n=t.startLineNumber,i=t.startColumn):t.startLineNumber===e.startLineNumber?(n=t.startLineNumber,i=Math.min(t.startColumn,e.startColumn)):(n=e.startLineNumber,i=e.startColumn),t.endLineNumber>e.endLineNumber?(r=t.endLineNumber,s=t.endColumn):t.endLineNumber===e.endLineNumber?(r=t.endLineNumber,s=Math.max(t.endColumn,e.endColumn)):(r=e.endLineNumber,s=e.endColumn),new Ue(n,i,r,s)}intersectRanges(e){return Ue.intersectRanges(this,e)}static intersectRanges(e,t){let n=e.startLineNumber,i=e.startColumn,r=e.endLineNumber,s=e.endColumn,o=t.startLineNumber,a=t.startColumn,l=t.endLineNumber,u=t.endColumn;return n<o?(n=o,i=a):n===o&&(i=Math.max(i,a)),r>l?(r=l,s=u):r===l&&(s=Math.min(s,u)),n>r||n===r&&i>s?null:new Ue(n,i,r,s)}equalsRange(e){return Ue.equalsRange(this,e)}static equalsRange(e,t){return!!e&&!!t&&e.startLineNumber===t.startLineNumber&&e.startColumn===t.startColumn&&e.endLineNumber===t.endLineNumber&&e.endColumn===t.endColumn}getEndPosition(){return Ue.getEndPosition(this)}static getEndPosition(e){return new Pe(e.endLineNumber,e.endColumn)}getStartPosition(){return Ue.getStartPosition(this)}static getStartPosition(e){return new Pe(e.startLineNumber,e.startColumn)}toString(){return"["+this.startLineNumber+","+this.startColumn+" -> "+this.endLineNumber+","+this.endColumn+"]"}setEndPosition(e,t){return new Ue(this.startLineNumber,this.startColumn,e,t)}setStartPosition(e,t){return new Ue(e,t,this.endLineNumber,this.endColumn)}collapseToStart(){return Ue.collapseToStart(this)}static collapseToStart(e){return new Ue(e.startLineNumber,e.startColumn,e.startLineNumber,e.startColumn)}static fromPositions(e,t=e){return new Ue(e.lineNumber,e.column,t.lineNumber,t.column)}static lift(e){return e?new Ue(e.startLineNumber,e.startColumn,e.endLineNumber,e.endColumn):null}static isIRange(e){return e&&"number"==typeof e.startLineNumber&&"number"==typeof e.startColumn&&"number"==typeof e.endLineNumber&&"number"==typeof e.endColumn}static areIntersectingOrTouching(e,t){return!(e.endLineNumber<t.startLineNumber||e.endLineNumber===t.startLineNumber&&e.endColumn<t.startColumn||t.endLineNumber<e.startLineNumber||t.endLineNumber===e.startLineNumber&&t.endColumn<e.startColumn)}static areIntersecting(e,t){return!(e.endLineNumber<t.startLineNumber||e.endLineNumber===t.startLineNumber&&e.endColumn<=t.startColumn||t.endLineNumber<e.startLineNumber||t.endLineNumber===e.startLineNumber&&t.endColumn<=e.startColumn)}static compareRangesUsingStarts(e,t){if(e&&t){const n=0|e.startLineNumber,i=0|t.startLineNumber;if(n===i){const n=0|e.startColumn,i=0|t.startColumn;if(n===i){const n=0|e.endLineNumber,i=0|t.endLineNumber;return n===i?(0|e.endColumn)-(0|t.endColumn):n-i}return n-i}return n-i}return(e?1:0)-(t?1:0)}static compareRangesUsingEnds(e,t){return e.endLineNumber===t.endLineNumber?e.endColumn===t.endColumn?e.startLineNumber===t.startLineNumber?e.startColumn-t.startColumn:e.startLineNumber-t.startLineNumber:e.endColumn-t.endColumn:e.endLineNumber-t.endLineNumber}static spansMultipleLines(e){return e.endLineNumber>e.startLineNumber}}function ke(e,t,n,i){return new Z(e,t,n).ComputeDiff(i)}class De{constructor(e){const t=[],n=[];for(let i=0,r=e.length;i<r;i++)t[i]=qe(e[i],1),n[i]=He(e[i],1);this.lines=e,this._startColumns=t,this._endColumns=n}getElements(){const e=[];for(let t=0,n=this.lines.length;t<n;t++)e[t]=this.lines[t].substring(this._startColumns[t]-1,this._endColumns[t]-1);return e}getStartLineNumber(e){return e+1}getEndLineNumber(e){return e+1}createCharSequence(e,t,n){const i=[],r=[],s=[];let o=0;for(let a=t;a<=n;a++){const t=this.lines[a],n=e?this._startColumns[a]:1,l=e?this._endColumns[a]:t.length+1;for(let e=n;e<l;e++)i[o]=t.charCodeAt(e-1),r[o]=a+1,s[o]=e,o++}return new Fe(i,r,s)}}class Fe{constructor(e,t,n){this._charCodes=e,this._lineNumbers=t,this._columns=n}getElements(){return this._charCodes}getStartLineNumber(e){return this._lineNumbers[e]}getStartColumn(e){return this._columns[e]}getEndLineNumber(e){return this._lineNumbers[e]}getEndColumn(e){return this._columns[e]+1}}class Ke{constructor(e,t,n,i,r,s,o,a){this.originalStartLineNumber=e,this.originalStartColumn=t,this.originalEndLineNumber=n,this.originalEndColumn=i,this.modifiedStartLineNumber=r,this.modifiedStartColumn=s,this.modifiedEndLineNumber=o,this.modifiedEndColumn=a}static createFromDiffChange(e,t,n){let i,r,s,o,a,l,u,h;return 0===e.originalLength?(i=0,r=0,s=0,o=0):(i=t.getStartLineNumber(e.originalStart),r=t.getStartColumn(e.originalStart),s=t.getEndLineNumber(e.originalStart+e.originalLength-1),o=t.getEndColumn(e.originalStart+e.originalLength-1)),0===e.modifiedLength?(a=0,l=0,u=0,h=0):(a=n.getStartLineNumber(e.modifiedStart),l=n.getStartColumn(e.modifiedStart),u=n.getEndLineNumber(e.modifiedStart+e.modifiedLength-1),h=n.getEndColumn(e.modifiedStart+e.modifiedLength-1)),new Ke(i,r,s,o,a,l,u,h)}}class Be{constructor(e,t,n,i,r){this.originalStartLineNumber=e,this.originalEndLineNumber=t,this.modifiedStartLineNumber=n,this.modifiedEndLineNumber=i,this.charChanges=r}static createFromDiffResult(e,t,n,i,r,s,o){let a,l,u,h,d;if(0===t.originalLength?(a=n.getStartLineNumber(t.originalStart)-1,l=0):(a=n.getStartLineNumber(t.originalStart),l=n.getEndLineNumber(t.originalStart+t.originalLength-1)),0===t.modifiedLength?(u=i.getStartLineNumber(t.modifiedStart)-1,h=0):(u=i.getStartLineNumber(t.modifiedStart),h=i.getEndLineNumber(t.modifiedStart+t.modifiedLength-1)),s&&t.originalLength>0&&t.originalLength<20&&t.modifiedLength>0&&t.modifiedLength<20&&r()){const s=n.createCharSequence(e,t.originalStart,t.originalStart+t.originalLength-1),a=i.createCharSequence(e,t.modifiedStart,t.modifiedStart+t.modifiedLength-1);let l=ke(s,a,r,!0).changes;o&&(l=function(e){if(e.length<=1)return e;const t=[e[0]];let n=t[0];for(let i=1,r=e.length;i<r;i++){const r=e[i],s=r.originalStart-(n.originalStart+n.originalLength),o=r.modifiedStart-(n.modifiedStart+n.modifiedLength);Math.min(s,o)<3?(n.originalLength=r.originalStart+r.originalLength-n.originalStart,n.modifiedLength=r.modifiedStart+r.modifiedLength-n.modifiedStart):(t.push(r),n=r)}return t}(l)),d=[];for(let e=0,t=l.length;e<t;e++)d.push(Ke.createFromDiffChange(l[e],s,a))}return new Be(a,l,u,h,d)}}class We{constructor(e,t,n){this.shouldComputeCharChanges=n.shouldComputeCharChanges,this.shouldPostProcessCharChanges=n.shouldPostProcessCharChanges,this.shouldIgnoreTrimWhitespace=n.shouldIgnoreTrimWhitespace,this.shouldMakePrettyDiff=n.shouldMakePrettyDiff,this.originalLines=e,this.modifiedLines=t,this.original=new De(e),this.modified=new De(t),this.continueLineDiff=Ve(n.maxComputationTime),this.continueCharDiff=Ve(0===n.maxComputationTime?0:Math.min(n.maxComputationTime,5e3))}computeDiff(){if(1===this.original.lines.length&&0===this.original.lines[0].length)return 1===this.modified.lines.length&&0===this.modified.lines[0].length?{quitEarly:!1,changes:[]}:{quitEarly:!1,changes:[{originalStartLineNumber:1,originalEndLineNumber:1,modifiedStartLineNumber:1,modifiedEndLineNumber:this.modified.lines.length,charChanges:[{modifiedEndColumn:0,modifiedEndLineNumber:0,modifiedStartColumn:0,modifiedStartLineNumber:0,originalEndColumn:0,originalEndLineNumber:0,originalStartColumn:0,originalStartLineNumber:0}]}]};if(1===this.modified.lines.length&&0===this.modified.lines[0].length)return{quitEarly:!1,changes:[{originalStartLineNumber:1,originalEndLineNumber:this.original.lines.length,modifiedStartLineNumber:1,modifiedEndLineNumber:1,charChanges:[{modifiedEndColumn:0,modifiedEndLineNumber:0,modifiedStartColumn:0,modifiedStartLineNumber:0,originalEndColumn:0,originalEndLineNumber:0,originalStartColumn:0,originalStartLineNumber:0}]}]};const e=ke(this.original,this.modified,this.continueLineDiff,this.shouldMakePrettyDiff),t=e.changes,n=e.quitEarly;if(this.shouldIgnoreTrimWhitespace){const e=[];for(let n=0,i=t.length;n<i;n++)e.push(Be.createFromDiffResult(this.shouldIgnoreTrimWhitespace,t[n],this.original,this.modified,this.continueCharDiff,this.shouldComputeCharChanges,this.shouldPostProcessCharChanges));return{quitEarly:n,changes:e}}const i=[];let r=0,s=0;for(let e=-1,n=t.length;e<n;e++){const o=e+1<n?t[e+1]:null,a=o?o.originalStart:this.originalLines.length,l=o?o.modifiedStart:this.modifiedLines.length;for(;r<a&&s<l;){const e=this.originalLines[r],t=this.modifiedLines[s];if(e!==t){{let n=qe(e,1),o=qe(t,1);for(;n>1&&o>1&&e.charCodeAt(n-2)===t.charCodeAt(o-2);)n--,o--;(n>1||o>1)&&this._pushTrimWhitespaceCharChange(i,r+1,1,n,s+1,1,o)}{let n=He(e,1),o=He(t,1);const a=e.length+1,l=t.length+1;for(;n<a&&o<l&&e.charCodeAt(n-1)===e.charCodeAt(o-1);)n++,o++;(n<a||o<l)&&this._pushTrimWhitespaceCharChange(i,r+1,n,a,s+1,o,l)}}r++,s++}o&&(i.push(Be.createFromDiffResult(this.shouldIgnoreTrimWhitespace,o,this.original,this.modified,this.continueCharDiff,this.shouldComputeCharChanges,this.shouldPostProcessCharChanges)),r+=o.originalLength,s+=o.modifiedLength)}return{quitEarly:n,changes:i}}_pushTrimWhitespaceCharChange(e,t,n,i,r,s,o){if(this._mergeTrimWhitespaceCharChange(e,t,n,i,r,s,o))return;let a;this.shouldComputeCharChanges&&(a=[new Ke(t,n,t,i,r,s,r,o)]),e.push(new Be(t,t,r,r,a))}_mergeTrimWhitespaceCharChange(e,t,n,i,r,s,o){const a=e.length;if(0===a)return!1;const l=e[a-1];return 0!==l.originalEndLineNumber&&0!==l.modifiedEndLineNumber&&l.originalEndLineNumber+1===t&&l.modifiedEndLineNumber+1===r&&(l.originalEndLineNumber=t,l.modifiedEndLineNumber=r,this.shouldComputeCharChanges&&l.charChanges&&l.charChanges.push(new Ke(t,n,t,i,r,s,r,o)),!0)}}function qe(e,t){const n=function(e){for(let t=0,n=e.length;t<n;t++){const n=e.charCodeAt(t);if(32!==n&&9!==n)return t}return-1}(e);return-1===n?t:n+1}function He(e,t){const n=function(e,t=e.length-1){for(let n=t;n>=0;n--){const t=e.charCodeAt(n);if(32!==t&&9!==t)return n}return-1}(e);return-1===n?t:n+2}function Ve(e){if(0===e)return()=>!0;const t=Date.now();return()=>Date.now()-t<e}function Ye(e){return e<0?0:e>255?255:0|e}function $e(e){return e<0?0:e>4294967295?4294967295:0|e}class je{constructor(e,t){this.index=e,this.remainder=t}}class Ge{constructor(e){this.values=e,this.prefixSum=new Uint32Array(e.length),this.prefixSumValidIndex=new Int32Array(1),this.prefixSumValidIndex[0]=-1}insertValues(e,t){e=$e(e);const n=this.values,i=this.prefixSum,r=t.length;return 0!==r&&(this.values=new Uint32Array(n.length+r),this.values.set(n.subarray(0,e),0),this.values.set(n.subarray(e),e+r),this.values.set(t,e),e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),this.prefixSum=new Uint32Array(this.values.length),this.prefixSumValidIndex[0]>=0&&this.prefixSum.set(i.subarray(0,this.prefixSumValidIndex[0]+1)),!0)}changeValue(e,t){return e=$e(e),t=$e(t),this.values[e]!==t&&(this.values[e]=t,e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),!0)}removeValues(e,t){e=$e(e),t=$e(t);const n=this.values,i=this.prefixSum;if(e>=n.length)return!1;let r=n.length-e;return t>=r&&(t=r),0!==t&&(this.values=new Uint32Array(n.length-t),this.values.set(n.subarray(0,e),0),this.values.set(n.subarray(e+t),e),this.prefixSum=new Uint32Array(this.values.length),e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),this.prefixSumValidIndex[0]>=0&&this.prefixSum.set(i.subarray(0,this.prefixSumValidIndex[0]+1)),!0)}getTotalValue(){return 0===this.values.length?0:this._getAccumulatedValue(this.values.length-1)}getAccumulatedValue(e){return e<0?0:(e=$e(e),this._getAccumulatedValue(e))}_getAccumulatedValue(e){if(e<=this.prefixSumValidIndex[0])return this.prefixSum[e];let t=this.prefixSumValidIndex[0]+1;0===t&&(this.prefixSum[0]=this.values[0],t++),e>=this.values.length&&(e=this.values.length-1);for(let n=t;n<=e;n++)this.prefixSum[n]=this.prefixSum[n-1]+this.values[n];return this.prefixSumValidIndex[0]=Math.max(this.prefixSumValidIndex[0],e),this.prefixSum[e]}getIndexOf(e){e=Math.floor(e),this.getTotalValue();let t=0,n=this.values.length-1,i=0,r=0,s=0;for(;t<=n;)if(i=t+(n-t)/2|0,r=this.prefixSum[i],s=r-this.values[i],e<s)n=i-1;else{if(!(e>=r))break;t=i+1}return new je(i,e-s)}}const ze=function(e=""){let t="(-?\\d*\\.\\d\\w*)|([^";for(const n of"`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?")e.indexOf(n)>=0||(t+="\\"+n);return t+="\\s]+)",new RegExp(t,"g")}(),Qe={maxLen:1e3,windowSize:15,timeBudget:150};function Xe(e,t,n,i,r=Qe){if(n.length>r.maxLen){let s=e-r.maxLen/2;return s<0?s=0:i+=s,Xe(e,t,n=n.substring(s,e+r.maxLen/2),i,r)}const s=Date.now(),o=e-1-i;let a=-1,l=null;for(let e=1;!(Date.now()-s>=r.timeBudget);e++){const i=o-r.windowSize*e;t.lastIndex=Math.max(0,i);const s=Ze(t,n,o,a);if(!s&&l)break;if(l=s,i<=0)break;a=i}if(l){let e={word:l[0],startColumn:i+1+l.index,endColumn:i+1+l.index+l[0].length};return t.lastIndex=0,e}return null}function Ze(e,t,n,i){let r;for(;r=e.exec(t);){const t=r.index||0;if(t<=n&&e.lastIndex>=n)return r;if(i>0&&t>i)return null}return null}class Je{constructor(e){let t=Ye(e);this._defaultValue=t,this._asciiMap=Je._createAsciiMap(t),this._map=new Map}static _createAsciiMap(e){let t=new Uint8Array(256);for(let n=0;n<256;n++)t[n]=e;return t}set(e,t){let n=Ye(t);e>=0&&e<256?this._asciiMap[e]=n:this._map.set(e,n)}get(e){return e>=0&&e<256?this._asciiMap[e]:this._map.get(e)||this._defaultValue}}class et{constructor(e,t,n){const i=new Uint8Array(e*t);for(let r=0,s=e*t;r<s;r++)i[r]=n;this._data=i,this.rows=e,this.cols=t}get(e,t){return this._data[e*this.cols+t]}set(e,t,n){this._data[e*this.cols+t]=n}}class tt{constructor(e){let t=0,n=0;for(let i=0,r=e.length;i<r;i++){let[r,s,o]=e[i];s>t&&(t=s),r>n&&(n=r),o>n&&(n=o)}t++,n++;let i=new et(n,t,0);for(let t=0,n=e.length;t<n;t++){let[n,r,s]=e[t];i.set(n,r,s)}this._states=i,this._maxCharCode=t}nextState(e,t){return t<0||t>=this._maxCharCode?0:this._states.get(e,t)}}let nt=null,it=null;class rt{static _createLink(e,t,n,i,r){let s=r-1;do{const n=t.charCodeAt(s);if(2!==e.get(n))break;s--}while(s>i);if(i>0){const e=t.charCodeAt(i-1),n=t.charCodeAt(s);(40===e&&41===n||91===e&&93===n||123===e&&125===n)&&s--}return{range:{startLineNumber:n,startColumn:i+1,endLineNumber:n,endColumn:s+2},url:t.substring(i,s+1)}}static computeLinks(e,t=function(){return null===nt&&(nt=new tt([[1,104,2],[1,72,2],[1,102,6],[1,70,6],[2,116,3],[2,84,3],[3,116,4],[3,84,4],[4,112,5],[4,80,5],[5,115,9],[5,83,9],[5,58,10],[6,105,7],[6,73,7],[7,108,8],[7,76,8],[8,101,9],[8,69,9],[9,58,10],[10,47,11],[11,47,12]])),nt}()){const n=function(){if(null===it){it=new Je(0);const e=" \t<>'\"、。｡､，．：；‘〈「『〔（［｛｢｣｝］）〕』」〉’｀～…";for(let t=0;t<e.length;t++)it.set(e.charCodeAt(t),1);const t=".,;";for(let e=0;e<t.length;e++)it.set(t.charCodeAt(e),2)}return it}();let i=[];for(let r=1,s=e.getLineCount();r<=s;r++){const s=e.getLineContent(r),o=s.length;let a=0,l=0,u=0,h=1,d=!1,c=!1,f=!1,m=!1;for(;a<o;){let e=!1;const o=s.charCodeAt(a);if(13===h){let t;switch(o){case 40:d=!0,t=0;break;case 41:t=d?0:1;break;case 91:f=!0,c=!0,t=0;break;case 93:f=!1,t=c?0:1;break;case 123:m=!0,t=0;break;case 125:t=m?0:1;break;case 39:t=34===u||96===u?0:1;break;case 34:t=39===u||96===u?0:1;break;case 96:t=39===u||34===u?0:1;break;case 42:t=42===u?1:0;break;case 124:t=124===u?1:0;break;case 32:t=f?0:1;break;default:t=n.get(o)}1===t&&(i.push(rt._createLink(n,s,r,l,a)),e=!0)}else if(12===h){let t;91===o?(c=!0,t=0):t=n.get(o),1===t?e=!0:h=13}else h=t.nextState(h,o),0===h&&(e=!0);e&&(h=1,d=!1,c=!1,m=!1,l=a+1,u=o),a++}13===h&&i.push(rt._createLink(n,s,r,l,o))}return i}}class st{constructor(){this._defaultValueSet=[["true","false"],["True","False"],["Private","Public","Friend","ReadOnly","Partial","Protected","WriteOnly"],["public","protected","private"]]}navigateValueSet(e,t,n,i,r){if(e&&t){let n=this.doNavigateValueSet(t,r);if(n)return{range:e,value:n}}if(n&&i){let e=this.doNavigateValueSet(i,r);if(e)return{range:n,value:e}}return null}doNavigateValueSet(e,t){let n=this.numberReplace(e,t);return null!==n?n:this.textReplace(e,t)}numberReplace(e,t){let n=Math.pow(10,e.length-(e.lastIndexOf(".")+1)),i=Number(e),r=parseFloat(e);return isNaN(i)||isNaN(r)||i!==r?null:0!==i||t?(i=Math.floor(i*n),i+=t?n:-n,String(i/n)):null}textReplace(e,t){return this.valueSetsReplace(this._defaultValueSet,e,t)}valueSetsReplace(e,t,n){let i=null;for(let r=0,s=e.length;null===i&&r<s;r++)i=this.valueSetReplace(e[r],t,n);return i}valueSetReplace(e,t,n){let i=e.indexOf(t);return i>=0?(i+=n?1:-1,i<0?i=e.length-1:i%=e.length,e[i]):null}}st.INSTANCE=new st;class ot{constructor(e){this.element=e,this.next=ot.Undefined,this.prev=ot.Undefined}}ot.Undefined=new ot(void 0);class at{constructor(){this._first=ot.Undefined,this._last=ot.Undefined,this._size=0}get size(){return this._size}isEmpty(){return this._first===ot.Undefined}clear(){let e=this._first;for(;e!==ot.Undefined;){const t=e.next;e.prev=ot.Undefined,e.next=ot.Undefined,e=t}this._first=ot.Undefined,this._last=ot.Undefined,this._size=0}unshift(e){return this._insert(e,!1)}push(e){return this._insert(e,!0)}_insert(e,t){const n=new ot(e);if(this._first===ot.Undefined)this._first=n,this._last=n;else if(t){const e=this._last;this._last=n,n.prev=e,e.next=n}else{const e=this._first;this._first=n,n.next=e,e.prev=n}this._size+=1;let i=!1;return()=>{i||(i=!0,this._remove(n))}}shift(){if(this._first!==ot.Undefined){const e=this._first.element;return this._remove(this._first),e}}pop(){if(this._last!==ot.Undefined){const e=this._last.element;return this._remove(this._last),e}}_remove(e){if(e.prev!==ot.Undefined&&e.next!==ot.Undefined){const t=e.prev;t.next=e.next,e.next.prev=t}else e.prev===ot.Undefined&&e.next===ot.Undefined?(this._first=ot.Undefined,this._last=ot.Undefined):e.next===ot.Undefined?(this._last=this._last.prev,this._last.next=ot.Undefined):e.prev===ot.Undefined&&(this._first=this._first.next,this._first.prev=ot.Undefined);this._size-=1}*[Symbol.iterator](){let e=this._first;for(;e!==ot.Undefined;)yield e.element,e=e.next}}const lt=y.performance&&"function"==typeof y.performance.now;class ut{constructor(e){this._highResolution=lt&&e,this._startTime=this._now(),this._stopTime=-1}static create(e=!0){return new ut(e)}stop(){this._stopTime=this._now()}elapsed(){return-1!==this._stopTime?this._stopTime-this._startTime:this._now()-this._startTime}_now(){return this._highResolution?y.performance.now():Date.now()}}var ht;!function(e){function t(e){return(t,n=null,i)=>{let r,s=!1;return r=e((e=>{if(!s)return r?r.dispose():s=!0,t.call(n,e)}),null,i),s&&r.dispose(),r}}function n(e,t){return o(((n,i=null,r)=>e((e=>n.call(i,t(e))),null,r)))}function i(e,t){return o(((n,i=null,r)=>e((e=>{t(e),n.call(i,e)}),null,r)))}function r(e,t){return o(((n,i=null,r)=>e((e=>t(e)&&n.call(i,e)),null,r)))}function s(e,t,i){let r=i;return n(e,(e=>(r=t(r,e),r)))}function o(e){let t;const n=new ct({onFirstListenerAdd(){t=e(n.fire,n)},onLastListenerRemove(){t.dispose()}});return n.event}function a(e,t,n=100,i=!1,r){let s,o,a,l=0;const u=new ct({leakWarningThreshold:r,onFirstListenerAdd(){s=e((e=>{l++,o=t(o,e),i&&!a&&(u.fire(o),o=void 0),clearTimeout(a),a=setTimeout((()=>{const e=o;o=void 0,a=void 0,(!i||l>1)&&u.fire(e),l=0}),n)}))},onLastListenerRemove(){s.dispose()}});return u.event}function l(e,t=((e,t)=>e===t)){let n,i=!0;return r(e,(e=>{const r=i||!t(e,n);return i=!1,n=e,r}))}e.None=()=>d.None,e.once=t,e.map=n,e.forEach=i,e.filter=r,e.signal=function(e){return e},e.any=function(...e){return(t,n=null,i)=>u(...e.map((e=>e((e=>t.call(n,e)),null,i))))},e.reduce=s,e.snapshot=o,e.debounce=a,e.stopwatch=function(e){const i=(new Date).getTime();return n(t(e),(e=>(new Date).getTime()-i))},e.latch=l,e.split=function(t,n){return[e.filter(t,n),e.filter(t,(e=>!n(e)))]},e.buffer=function(e,t=!1,n=[]){let i=n.slice(),r=e((e=>{i?i.push(e):o.fire(e)}));const s=()=>{i&&i.forEach((e=>o.fire(e))),i=null},o=new ct({onFirstListenerAdd(){r||(r=e((e=>o.fire(e))))},onFirstListenerDidAdd(){i&&(t?setTimeout(s):s())},onLastListenerRemove(){r&&r.dispose(),r=null}});return o.event};class h{constructor(e){this.event=e}map(e){return new h(n(this.event,e))}forEach(e){return new h(i(this.event,e))}filter(e){return new h(r(this.event,e))}reduce(e,t){return new h(s(this.event,e,t))}latch(){return new h(l(this.event))}debounce(e,t=100,n=!1,i){return new h(a(this.event,e,t,n,i))}on(e,t,n){return this.event(e,t,n)}once(e,n,i){return t(this.event)(e,n,i)}}e.chain=function(e){return new h(e)},e.fromNodeEventEmitter=function(e,t,n=(e=>e)){const i=(...e)=>r.fire(n(...e)),r=new ct({onFirstListenerAdd:()=>e.on(t,i),onLastListenerRemove:()=>e.removeListener(t,i)});return r.event},e.fromDOMEventEmitter=function(e,t,n=(e=>e)){const i=(...e)=>r.fire(n(...e)),r=new ct({onFirstListenerAdd:()=>e.addEventListener(t,i),onLastListenerRemove:()=>e.removeEventListener(t,i)});return r.event},e.fromPromise=function(e){const t=new ct;let n=!1;return e.then(void 0,(()=>null)).then((()=>{n?t.fire(void 0):setTimeout((()=>t.fire(void 0)),0)})),n=!0,t.event},e.toPromise=function(e){return new Promise((n=>t(e)(n)))}}(ht||(ht={}));class dt{constructor(e){this._listenerCount=0,this._invocationCount=0,this._elapsedOverall=0,this._name=`${e}_${dt._idPool++}`}start(e){this._stopWatch=new ut(!0),this._listenerCount=e}stop(){if(this._stopWatch){const e=this._stopWatch.elapsed();this._elapsedOverall+=e,this._invocationCount+=1,console.info(`did FIRE ${this._name}: elapsed_ms: ${e.toFixed(5)}, listener: ${this._listenerCount} (elapsed_overall: ${this._elapsedOverall.toFixed(2)}, invocations: ${this._invocationCount})`),this._stopWatch=void 0}}}dt._idPool=0;class ct{constructor(e){var t;this._disposed=!1,this._options=e,this._leakageMon=void 0,this._perfMon=(null===(t=this._options)||void 0===t?void 0:t._profName)?new dt(this._options._profName):void 0}get event(){return this._event||(this._event=(e,t,n)=>{var i;this._listeners||(this._listeners=new at);const r=this._listeners.isEmpty();r&&this._options&&this._options.onFirstListenerAdd&&this._options.onFirstListenerAdd(this);const s=this._listeners.push(t?[e,t]:e);r&&this._options&&this._options.onFirstListenerDidAdd&&this._options.onFirstListenerDidAdd(this),this._options&&this._options.onListenerDidAdd&&this._options.onListenerDidAdd(this,e,t);const o=null===(i=this._leakageMon)||void 0===i?void 0:i.check(this._listeners.size);let a;return a={dispose:()=>{o&&o(),a.dispose=ct._noop,!this._disposed&&(s(),this._options&&this._options.onLastListenerRemove)&&(this._listeners&&!this._listeners.isEmpty()||this._options.onLastListenerRemove(this))}},n instanceof h?n.add(a):Array.isArray(n)&&n.push(a),a}),this._event}fire(e){var t,i;if(this._listeners){this._deliveryQueue||(this._deliveryQueue=new at);for(let t of this._listeners)this._deliveryQueue.push([t,e]);for(null===(t=this._perfMon)||void 0===t||t.start(this._deliveryQueue.size);this._deliveryQueue.size>0;){const[e,t]=this._deliveryQueue.shift();try{"function"==typeof e?e.call(void 0,t):e[0].call(e[1],t)}catch(e){n(e)}}null===(i=this._perfMon)||void 0===i||i.stop()}}dispose(){var e,t,n,i,r;this._disposed||(this._disposed=!0,null===(e=this._listeners)||void 0===e||e.clear(),null===(t=this._deliveryQueue)||void 0===t||t.clear(),null===(i=null===(n=this._options)||void 0===n?void 0:n.onLastListenerRemove)||void 0===i||i.call(n),null===(r=this._leakageMon)||void 0===r||r.dispose())}}ct._noop=function(){};const ft=Object.freeze((function(e,t){const n=setTimeout(e.bind(t),0);return{dispose(){clearTimeout(n)}}}));var mt;!function(e){e.isCancellationToken=function(t){return t===e.None||t===e.Cancelled||t instanceof gt||!(!t||"object"!=typeof t)&&"boolean"==typeof t.isCancellationRequested&&"function"==typeof t.onCancellationRequested},e.None=Object.freeze({isCancellationRequested:!1,onCancellationRequested:ht.None}),e.Cancelled=Object.freeze({isCancellationRequested:!0,onCancellationRequested:ft})}(mt||(mt={}));class gt{constructor(){this._isCancelled=!1,this._emitter=null}cancel(){this._isCancelled||(this._isCancelled=!0,this._emitter&&(this._emitter.fire(void 0),this.dispose()))}get isCancellationRequested(){return this._isCancelled}get onCancellationRequested(){return this._isCancelled?ft:(this._emitter||(this._emitter=new ct),this._emitter.event)}dispose(){this._emitter&&(this._emitter.dispose(),this._emitter=null)}}class _t{constructor(){this._keyCodeToStr=[],this._strToKeyCode=Object.create(null)}define(e,t){this._keyCodeToStr[e]=t,this._strToKeyCode[t.toLowerCase()]=e}keyCodeToStr(e){return this._keyCodeToStr[e]}strToKeyCode(e){return this._strToKeyCode[e.toLowerCase()]||0}}const pt=new _t,Ct=new _t,bt=new _t;var Lt,St,Nt,Et,At,yt,vt,wt,Ot,Tt,xt,It,Mt,Rt,Pt,Ut,kt,Dt,Ft,Kt,Bt,Wt,qt,Ht,Vt,Yt,$t,jt,Gt,zt,Qt,Xt,Zt,Jt,en,tn;!function(){function e(e,t,n=t,i=n){pt.define(e,t),Ct.define(e,n),bt.define(e,i)}e(0,"unknown"),e(1,"Backspace"),e(2,"Tab"),e(3,"Enter"),e(4,"Shift"),e(5,"Ctrl"),e(6,"Alt"),e(7,"PauseBreak"),e(8,"CapsLock"),e(9,"Escape"),e(10,"Space"),e(11,"PageUp"),e(12,"PageDown"),e(13,"End"),e(14,"Home"),e(15,"LeftArrow","Left"),e(16,"UpArrow","Up"),e(17,"RightArrow","Right"),e(18,"DownArrow","Down"),e(19,"Insert"),e(20,"Delete"),e(21,"0"),e(22,"1"),e(23,"2"),e(24,"3"),e(25,"4"),e(26,"5"),e(27,"6"),e(28,"7"),e(29,"8"),e(30,"9"),e(31,"A"),e(32,"B"),e(33,"C"),e(34,"D"),e(35,"E"),e(36,"F"),e(37,"G"),e(38,"H"),e(39,"I"),e(40,"J"),e(41,"K"),e(42,"L"),e(43,"M"),e(44,"N"),e(45,"O"),e(46,"P"),e(47,"Q"),e(48,"R"),e(49,"S"),e(50,"T"),e(51,"U"),e(52,"V"),e(53,"W"),e(54,"X"),e(55,"Y"),e(56,"Z"),e(57,"Meta"),e(58,"ContextMenu"),e(59,"F1"),e(60,"F2"),e(61,"F3"),e(62,"F4"),e(63,"F5"),e(64,"F6"),e(65,"F7"),e(66,"F8"),e(67,"F9"),e(68,"F10"),e(69,"F11"),e(70,"F12"),e(71,"F13"),e(72,"F14"),e(73,"F15"),e(74,"F16"),e(75,"F17"),e(76,"F18"),e(77,"F19"),e(78,"NumLock"),e(79,"ScrollLock"),e(80,";",";","OEM_1"),e(81,"=","=","OEM_PLUS"),e(82,",",",","OEM_COMMA"),e(83,"-","-","OEM_MINUS"),e(84,".",".","OEM_PERIOD"),e(85,"/","/","OEM_2"),e(86,"`","`","OEM_3"),e(110,"ABNT_C1"),e(111,"ABNT_C2"),e(87,"[","[","OEM_4"),e(88,"\\","\\","OEM_5"),e(89,"]","]","OEM_6"),e(90,"'","'","OEM_7"),e(91,"OEM_8"),e(92,"OEM_102"),e(93,"NumPad0"),e(94,"NumPad1"),e(95,"NumPad2"),e(96,"NumPad3"),e(97,"NumPad4"),e(98,"NumPad5"),e(99,"NumPad6"),e(100,"NumPad7"),e(101,"NumPad8"),e(102,"NumPad9"),e(103,"NumPad_Multiply"),e(104,"NumPad_Add"),e(105,"NumPad_Separator"),e(106,"NumPad_Subtract"),e(107,"NumPad_Decimal"),e(108,"NumPad_Divide")}(),function(e){e.toString=function(e){return pt.keyCodeToStr(e)},e.fromString=function(e){return pt.strToKeyCode(e)},e.toUserSettingsUS=function(e){return Ct.keyCodeToStr(e)},e.toUserSettingsGeneral=function(e){return bt.keyCodeToStr(e)},e.fromUserSettings=function(e){return Ct.strToKeyCode(e)||bt.strToKeyCode(e)}}(Lt||(Lt={}));class nn extends Ue{constructor(e,t,n,i){super(e,t,n,i),this.selectionStartLineNumber=e,this.selectionStartColumn=t,this.positionLineNumber=n,this.positionColumn=i}toString(){return"["+this.selectionStartLineNumber+","+this.selectionStartColumn+" -> "+this.positionLineNumber+","+this.positionColumn+"]"}equalsSelection(e){return nn.selectionsEqual(this,e)}static selectionsEqual(e,t){return e.selectionStartLineNumber===t.selectionStartLineNumber&&e.selectionStartColumn===t.selectionStartColumn&&e.positionLineNumber===t.positionLineNumber&&e.positionColumn===t.positionColumn}getDirection(){return this.selectionStartLineNumber===this.startLineNumber&&this.selectionStartColumn===this.startColumn?0:1}setEndPosition(e,t){return 0===this.getDirection()?new nn(this.startLineNumber,this.startColumn,e,t):new nn(e,t,this.startLineNumber,this.startColumn)}getPosition(){return new Pe(this.positionLineNumber,this.positionColumn)}setStartPosition(e,t){return 0===this.getDirection()?new nn(e,t,this.endLineNumber,this.endColumn):new nn(this.endLineNumber,this.endColumn,e,t)}static fromPositions(e,t=e){return new nn(e.lineNumber,e.column,t.lineNumber,t.column)}static liftSelection(e){return new nn(e.selectionStartLineNumber,e.selectionStartColumn,e.positionLineNumber,e.positionColumn)}static selectionsArrEqual(e,t){if(e&&!t||!e&&t)return!1;if(!e&&!t)return!0;if(e.length!==t.length)return!1;for(let n=0,i=e.length;n<i;n++)if(!this.selectionsEqual(e[n],t[n]))return!1;return!0}static isISelection(e){return e&&"number"==typeof e.selectionStartLineNumber&&"number"==typeof e.selectionStartColumn&&"number"==typeof e.positionLineNumber&&"number"==typeof e.positionColumn}static createWithDirection(e,t,n,i,r){return 0===r?new nn(e,t,n,i):new nn(n,i,e,t)}}!function(e){e[e.Unknown=0]="Unknown",e[e.Disabled=1]="Disabled",e[e.Enabled=2]="Enabled"}(St||(St={})),function(e){e[e.KeepWhitespace=1]="KeepWhitespace",e[e.InsertAsSnippet=4]="InsertAsSnippet"}(Nt||(Nt={})),function(e){e[e.Method=0]="Method",e[e.Function=1]="Function",e[e.Constructor=2]="Constructor",e[e.Field=3]="Field",e[e.Variable=4]="Variable",e[e.Class=5]="Class",e[e.Struct=6]="Struct",e[e.Interface=7]="Interface",e[e.Module=8]="Module",e[e.Property=9]="Property",e[e.Event=10]="Event",e[e.Operator=11]="Operator",e[e.Unit=12]="Unit",e[e.Value=13]="Value",e[e.Constant=14]="Constant",e[e.Enum=15]="Enum",e[e.EnumMember=16]="EnumMember",e[e.Keyword=17]="Keyword",e[e.Text=18]="Text",e[e.Color=19]="Color",e[e.File=20]="File",e[e.Reference=21]="Reference",e[e.Customcolor=22]="Customcolor",e[e.Folder=23]="Folder",e[e.TypeParameter=24]="TypeParameter",e[e.User=25]="User",e[e.Issue=26]="Issue",e[e.Snippet=27]="Snippet"}(Et||(Et={})),function(e){e[e.Deprecated=1]="Deprecated"}(At||(At={})),function(e){e[e.Invoke=0]="Invoke",e[e.TriggerCharacter=1]="TriggerCharacter",e[e.TriggerForIncompleteCompletions=2]="TriggerForIncompleteCompletions"}(yt||(yt={})),function(e){e[e.EXACT=0]="EXACT",e[e.ABOVE=1]="ABOVE",e[e.BELOW=2]="BELOW"}(vt||(vt={})),function(e){e[e.NotSet=0]="NotSet",e[e.ContentFlush=1]="ContentFlush",e[e.RecoverFromMarkers=2]="RecoverFromMarkers",e[e.Explicit=3]="Explicit",e[e.Paste=4]="Paste",e[e.Undo=5]="Undo",e[e.Redo=6]="Redo"}(wt||(wt={})),function(e){e[e.LF=1]="LF",e[e.CRLF=2]="CRLF"}(Ot||(Ot={})),function(e){e[e.Text=0]="Text",e[e.Read=1]="Read",e[e.Write=2]="Write"}(Tt||(Tt={})),function(e){e[e.None=0]="None",e[e.Keep=1]="Keep",e[e.Brackets=2]="Brackets",e[e.Advanced=3]="Advanced",e[e.Full=4]="Full"}(xt||(xt={})),function(e){e[e.acceptSuggestionOnCommitCharacter=0]="acceptSuggestionOnCommitCharacter",e[e.acceptSuggestionOnEnter=1]="acceptSuggestionOnEnter",e[e.accessibilitySupport=2]="accessibilitySupport",e[e.accessibilityPageSize=3]="accessibilityPageSize",e[e.ariaLabel=4]="ariaLabel",e[e.autoClosingBrackets=5]="autoClosingBrackets",e[e.autoClosingDelete=6]="autoClosingDelete",e[e.autoClosingOvertype=7]="autoClosingOvertype",e[e.autoClosingQuotes=8]="autoClosingQuotes",e[e.autoIndent=9]="autoIndent",e[e.automaticLayout=10]="automaticLayout",e[e.autoSurround=11]="autoSurround",e[e.codeLens=12]="codeLens",e[e.codeLensFontFamily=13]="codeLensFontFamily",e[e.codeLensFontSize=14]="codeLensFontSize",e[e.colorDecorators=15]="colorDecorators",e[e.columnSelection=16]="columnSelection",e[e.comments=17]="comments",e[e.contextmenu=18]="contextmenu",e[e.copyWithSyntaxHighlighting=19]="copyWithSyntaxHighlighting",e[e.cursorBlinking=20]="cursorBlinking",e[e.cursorSmoothCaretAnimation=21]="cursorSmoothCaretAnimation",e[e.cursorStyle=22]="cursorStyle",e[e.cursorSurroundingLines=23]="cursorSurroundingLines",e[e.cursorSurroundingLinesStyle=24]="cursorSurroundingLinesStyle",e[e.cursorWidth=25]="cursorWidth",e[e.disableLayerHinting=26]="disableLayerHinting",e[e.disableMonospaceOptimizations=27]="disableMonospaceOptimizations",e[e.domReadOnly=28]="domReadOnly",e[e.dragAndDrop=29]="dragAndDrop",e[e.emptySelectionClipboard=30]="emptySelectionClipboard",e[e.extraEditorClassName=31]="extraEditorClassName",e[e.fastScrollSensitivity=32]="fastScrollSensitivity",e[e.find=33]="find",e[e.fixedOverflowWidgets=34]="fixedOverflowWidgets",e[e.folding=35]="folding",e[e.foldingStrategy=36]="foldingStrategy",e[e.foldingHighlight=37]="foldingHighlight",e[e.unfoldOnClickAfterEndOfLine=38]="unfoldOnClickAfterEndOfLine",e[e.fontFamily=39]="fontFamily",e[e.fontInfo=40]="fontInfo",e[e.fontLigatures=41]="fontLigatures",e[e.fontSize=42]="fontSize",e[e.fontWeight=43]="fontWeight",e[e.formatOnPaste=44]="formatOnPaste",e[e.formatOnType=45]="formatOnType",e[e.glyphMargin=46]="glyphMargin",e[e.gotoLocation=47]="gotoLocation",e[e.hideCursorInOverviewRuler=48]="hideCursorInOverviewRuler",e[e.highlightActiveIndentGuide=49]="highlightActiveIndentGuide",e[e.hover=50]="hover",e[e.inDiffEditor=51]="inDiffEditor",e[e.inlineSuggest=52]="inlineSuggest",e[e.letterSpacing=53]="letterSpacing",e[e.lightbulb=54]="lightbulb",e[e.lineDecorationsWidth=55]="lineDecorationsWidth",e[e.lineHeight=56]="lineHeight",e[e.lineNumbers=57]="lineNumbers",e[e.lineNumbersMinChars=58]="lineNumbersMinChars",e[e.linkedEditing=59]="linkedEditing",e[e.links=60]="links",e[e.matchBrackets=61]="matchBrackets",e[e.minimap=62]="minimap",e[e.mouseStyle=63]="mouseStyle",e[e.mouseWheelScrollSensitivity=64]="mouseWheelScrollSensitivity",e[e.mouseWheelZoom=65]="mouseWheelZoom",e[e.multiCursorMergeOverlapping=66]="multiCursorMergeOverlapping",e[e.multiCursorModifier=67]="multiCursorModifier",e[e.multiCursorPaste=68]="multiCursorPaste",e[e.occurrencesHighlight=69]="occurrencesHighlight",e[e.overviewRulerBorder=70]="overviewRulerBorder",e[e.overviewRulerLanes=71]="overviewRulerLanes",e[e.padding=72]="padding",e[e.parameterHints=73]="parameterHints",e[e.peekWidgetDefaultFocus=74]="peekWidgetDefaultFocus",e[e.definitionLinkOpensInPeek=75]="definitionLinkOpensInPeek",e[e.quickSuggestions=76]="quickSuggestions",e[e.quickSuggestionsDelay=77]="quickSuggestionsDelay",e[e.readOnly=78]="readOnly",e[e.renameOnType=79]="renameOnType",e[e.renderControlCharacters=80]="renderControlCharacters",e[e.renderIndentGuides=81]="renderIndentGuides",e[e.renderFinalNewline=82]="renderFinalNewline",e[e.renderLineHighlight=83]="renderLineHighlight",e[e.renderLineHighlightOnlyWhenFocus=84]="renderLineHighlightOnlyWhenFocus",e[e.renderValidationDecorations=85]="renderValidationDecorations",e[e.renderWhitespace=86]="renderWhitespace",e[e.revealHorizontalRightPadding=87]="revealHorizontalRightPadding",e[e.roundedSelection=88]="roundedSelection",e[e.rulers=89]="rulers",e[e.scrollbar=90]="scrollbar",e[e.scrollBeyondLastColumn=91]="scrollBeyondLastColumn",e[e.scrollBeyondLastLine=92]="scrollBeyondLastLine",e[e.scrollPredominantAxis=93]="scrollPredominantAxis",e[e.selectionClipboard=94]="selectionClipboard",e[e.selectionHighlight=95]="selectionHighlight",e[e.selectOnLineNumbers=96]="selectOnLineNumbers",e[e.showFoldingControls=97]="showFoldingControls",e[e.showUnused=98]="showUnused",e[e.snippetSuggestions=99]="snippetSuggestions",e[e.smartSelect=100]="smartSelect",e[e.smoothScrolling=101]="smoothScrolling",e[e.stickyTabStops=102]="stickyTabStops",e[e.stopRenderingLineAfter=103]="stopRenderingLineAfter",e[e.suggest=104]="suggest",e[e.suggestFontSize=105]="suggestFontSize",e[e.suggestLineHeight=106]="suggestLineHeight",e[e.suggestOnTriggerCharacters=107]="suggestOnTriggerCharacters",e[e.suggestSelection=108]="suggestSelection",e[e.tabCompletion=109]="tabCompletion",e[e.tabIndex=110]="tabIndex",e[e.unusualLineTerminators=111]="unusualLineTerminators",e[e.useShadowDOM=112]="useShadowDOM",e[e.useTabStops=113]="useTabStops",e[e.wordSeparators=114]="wordSeparators",e[e.wordWrap=115]="wordWrap",e[e.wordWrapBreakAfterCharacters=116]="wordWrapBreakAfterCharacters",e[e.wordWrapBreakBeforeCharacters=117]="wordWrapBreakBeforeCharacters",e[e.wordWrapColumn=118]="wordWrapColumn",e[e.wordWrapOverride1=119]="wordWrapOverride1",e[e.wordWrapOverride2=120]="wordWrapOverride2",e[e.wrappingIndent=121]="wrappingIndent",e[e.wrappingStrategy=122]="wrappingStrategy",e[e.showDeprecated=123]="showDeprecated",e[e.inlayHints=124]="inlayHints",e[e.editorClassName=125]="editorClassName",e[e.pixelRatio=126]="pixelRatio",e[e.tabFocusMode=127]="tabFocusMode",e[e.layoutInfo=128]="layoutInfo",e[e.wrappingInfo=129]="wrappingInfo"}(It||(It={})),function(e){e[e.TextDefined=0]="TextDefined",e[e.LF=1]="LF",e[e.CRLF=2]="CRLF"}(Mt||(Mt={})),function(e){e[e.LF=0]="LF",e[e.CRLF=1]="CRLF"}(Rt||(Rt={})),function(e){e[e.None=0]="None",e[e.Indent=1]="Indent",e[e.IndentOutdent=2]="IndentOutdent",e[e.Outdent=3]="Outdent"}(Pt||(Pt={})),function(e){e[e.Other=0]="Other",e[e.Type=1]="Type",e[e.Parameter=2]="Parameter"}(Ut||(Ut={})),function(e){e[e.Automatic=0]="Automatic",e[e.Explicit=1]="Explicit"}(kt||(kt={})),function(e){e[e.DependsOnKbLayout=-1]="DependsOnKbLayout",e[e.Unknown=0]="Unknown",e[e.Backspace=1]="Backspace",e[e.Tab=2]="Tab",e[e.Enter=3]="Enter",e[e.Shift=4]="Shift",e[e.Ctrl=5]="Ctrl",e[e.Alt=6]="Alt",e[e.PauseBreak=7]="PauseBreak",e[e.CapsLock=8]="CapsLock",e[e.Escape=9]="Escape",e[e.Space=10]="Space",e[e.PageUp=11]="PageUp",e[e.PageDown=12]="PageDown",e[e.End=13]="End",e[e.Home=14]="Home",e[e.LeftArrow=15]="LeftArrow",e[e.UpArrow=16]="UpArrow",e[e.RightArrow=17]="RightArrow",e[e.DownArrow=18]="DownArrow",e[e.Insert=19]="Insert",e[e.Delete=20]="Delete",e[e.KEY_0=21]="KEY_0",e[e.KEY_1=22]="KEY_1",e[e.KEY_2=23]="KEY_2",e[e.KEY_3=24]="KEY_3",e[e.KEY_4=25]="KEY_4",e[e.KEY_5=26]="KEY_5",e[e.KEY_6=27]="KEY_6",e[e.KEY_7=28]="KEY_7",e[e.KEY_8=29]="KEY_8",e[e.KEY_9=30]="KEY_9",e[e.KEY_A=31]="KEY_A",e[e.KEY_B=32]="KEY_B",e[e.KEY_C=33]="KEY_C",e[e.KEY_D=34]="KEY_D",e[e.KEY_E=35]="KEY_E",e[e.KEY_F=36]="KEY_F",e[e.KEY_G=37]="KEY_G",e[e.KEY_H=38]="KEY_H",e[e.KEY_I=39]="KEY_I",e[e.KEY_J=40]="KEY_J",e[e.KEY_K=41]="KEY_K",e[e.KEY_L=42]="KEY_L",e[e.KEY_M=43]="KEY_M",e[e.KEY_N=44]="KEY_N",e[e.KEY_O=45]="KEY_O",e[e.KEY_P=46]="KEY_P",e[e.KEY_Q=47]="KEY_Q",e[e.KEY_R=48]="KEY_R",e[e.KEY_S=49]="KEY_S",e[e.KEY_T=50]="KEY_T",e[e.KEY_U=51]="KEY_U",e[e.KEY_V=52]="KEY_V",e[e.KEY_W=53]="KEY_W",e[e.KEY_X=54]="KEY_X",e[e.KEY_Y=55]="KEY_Y",e[e.KEY_Z=56]="KEY_Z",e[e.Meta=57]="Meta",e[e.ContextMenu=58]="ContextMenu",e[e.F1=59]="F1",e[e.F2=60]="F2",e[e.F3=61]="F3",e[e.F4=62]="F4",e[e.F5=63]="F5",e[e.F6=64]="F6",e[e.F7=65]="F7",e[e.F8=66]="F8",e[e.F9=67]="F9",e[e.F10=68]="F10",e[e.F11=69]="F11",e[e.F12=70]="F12",e[e.F13=71]="F13",e[e.F14=72]="F14",e[e.F15=73]="F15",e[e.F16=74]="F16",e[e.F17=75]="F17",e[e.F18=76]="F18",e[e.F19=77]="F19",e[e.NumLock=78]="NumLock",e[e.ScrollLock=79]="ScrollLock",e[e.US_SEMICOLON=80]="US_SEMICOLON",e[e.US_EQUAL=81]="US_EQUAL",e[e.US_COMMA=82]="US_COMMA",e[e.US_MINUS=83]="US_MINUS",e[e.US_DOT=84]="US_DOT",e[e.US_SLASH=85]="US_SLASH",e[e.US_BACKTICK=86]="US_BACKTICK",e[e.US_OPEN_SQUARE_BRACKET=87]="US_OPEN_SQUARE_BRACKET",e[e.US_BACKSLASH=88]="US_BACKSLASH",e[e.US_CLOSE_SQUARE_BRACKET=89]="US_CLOSE_SQUARE_BRACKET",e[e.US_QUOTE=90]="US_QUOTE",e[e.OEM_8=91]="OEM_8",e[e.OEM_102=92]="OEM_102",e[e.NUMPAD_0=93]="NUMPAD_0",e[e.NUMPAD_1=94]="NUMPAD_1",e[e.NUMPAD_2=95]="NUMPAD_2",e[e.NUMPAD_3=96]="NUMPAD_3",e[e.NUMPAD_4=97]="NUMPAD_4",e[e.NUMPAD_5=98]="NUMPAD_5",e[e.NUMPAD_6=99]="NUMPAD_6",e[e.NUMPAD_7=100]="NUMPAD_7",e[e.NUMPAD_8=101]="NUMPAD_8",e[e.NUMPAD_9=102]="NUMPAD_9",e[e.NUMPAD_MULTIPLY=103]="NUMPAD_MULTIPLY",e[e.NUMPAD_ADD=104]="NUMPAD_ADD",e[e.NUMPAD_SEPARATOR=105]="NUMPAD_SEPARATOR",e[e.NUMPAD_SUBTRACT=106]="NUMPAD_SUBTRACT",e[e.NUMPAD_DECIMAL=107]="NUMPAD_DECIMAL",e[e.NUMPAD_DIVIDE=108]="NUMPAD_DIVIDE",e[e.KEY_IN_COMPOSITION=109]="KEY_IN_COMPOSITION",e[e.ABNT_C1=110]="ABNT_C1",e[e.ABNT_C2=111]="ABNT_C2",e[e.MAX_VALUE=112]="MAX_VALUE"}(Dt||(Dt={})),function(e){e[e.Hint=1]="Hint",e[e.Info=2]="Info",e[e.Warning=4]="Warning",e[e.Error=8]="Error"}(Ft||(Ft={})),function(e){e[e.Unnecessary=1]="Unnecessary",e[e.Deprecated=2]="Deprecated"}(Kt||(Kt={})),function(e){e[e.Inline=1]="Inline",e[e.Gutter=2]="Gutter"}(Bt||(Bt={})),function(e){e[e.UNKNOWN=0]="UNKNOWN",e[e.TEXTAREA=1]="TEXTAREA",e[e.GUTTER_GLYPH_MARGIN=2]="GUTTER_GLYPH_MARGIN",e[e.GUTTER_LINE_NUMBERS=3]="GUTTER_LINE_NUMBERS",e[e.GUTTER_LINE_DECORATIONS=4]="GUTTER_LINE_DECORATIONS",e[e.GUTTER_VIEW_ZONE=5]="GUTTER_VIEW_ZONE",e[e.CONTENT_TEXT=6]="CONTENT_TEXT",e[e.CONTENT_EMPTY=7]="CONTENT_EMPTY",e[e.CONTENT_VIEW_ZONE=8]="CONTENT_VIEW_ZONE",e[e.CONTENT_WIDGET=9]="CONTENT_WIDGET",e[e.OVERVIEW_RULER=10]="OVERVIEW_RULER",e[e.SCROLLBAR=11]="SCROLLBAR",e[e.OVERLAY_WIDGET=12]="OVERLAY_WIDGET",e[e.OUTSIDE_EDITOR=13]="OUTSIDE_EDITOR"}(Wt||(Wt={})),function(e){e[e.TOP_RIGHT_CORNER=0]="TOP_RIGHT_CORNER",e[e.BOTTOM_RIGHT_CORNER=1]="BOTTOM_RIGHT_CORNER",e[e.TOP_CENTER=2]="TOP_CENTER"}(qt||(qt={})),function(e){e[e.Left=1]="Left",e[e.Center=2]="Center",e[e.Right=4]="Right",e[e.Full=7]="Full"}(Ht||(Ht={})),function(e){e[e.Off=0]="Off",e[e.On=1]="On",e[e.Relative=2]="Relative",e[e.Interval=3]="Interval",e[e.Custom=4]="Custom"}(Vt||(Vt={})),function(e){e[e.None=0]="None",e[e.Text=1]="Text",e[e.Blocks=2]="Blocks"}(Yt||(Yt={})),function(e){e[e.Smooth=0]="Smooth",e[e.Immediate=1]="Immediate"}($t||($t={})),function(e){e[e.Auto=1]="Auto",e[e.Hidden=2]="Hidden",e[e.Visible=3]="Visible"}(jt||(jt={})),function(e){e[e.LTR=0]="LTR",e[e.RTL=1]="RTL"}(Gt||(Gt={})),function(e){e[e.Invoke=1]="Invoke",e[e.TriggerCharacter=2]="TriggerCharacter",e[e.ContentChange=3]="ContentChange"}(zt||(zt={})),function(e){e[e.File=0]="File",e[e.Module=1]="Module",e[e.Namespace=2]="Namespace",e[e.Package=3]="Package",e[e.Class=4]="Class",e[e.Method=5]="Method",e[e.Property=6]="Property",e[e.Field=7]="Field",e[e.Constructor=8]="Constructor",e[e.Enum=9]="Enum",e[e.Interface=10]="Interface",e[e.Function=11]="Function",e[e.Variable=12]="Variable",e[e.Constant=13]="Constant",e[e.String=14]="String",e[e.Number=15]="Number",e[e.Boolean=16]="Boolean",e[e.Array=17]="Array",e[e.Object=18]="Object",e[e.Key=19]="Key",e[e.Null=20]="Null",e[e.EnumMember=21]="EnumMember",e[e.Struct=22]="Struct",e[e.Event=23]="Event",e[e.Operator=24]="Operator",e[e.TypeParameter=25]="TypeParameter"}(Qt||(Qt={})),function(e){e[e.Deprecated=1]="Deprecated"}(Xt||(Xt={})),function(e){e[e.Hidden=0]="Hidden",e[e.Blink=1]="Blink",e[e.Smooth=2]="Smooth",e[e.Phase=3]="Phase",e[e.Expand=4]="Expand",e[e.Solid=5]="Solid"}(Zt||(Zt={})),function(e){e[e.Line=1]="Line",e[e.Block=2]="Block",e[e.Underline=3]="Underline",e[e.LineThin=4]="LineThin",e[e.BlockOutline=5]="BlockOutline",e[e.UnderlineThin=6]="UnderlineThin"}(Jt||(Jt={})),function(e){e[e.AlwaysGrowsWhenTypingAtEdges=0]="AlwaysGrowsWhenTypingAtEdges",e[e.NeverGrowsWhenTypingAtEdges=1]="NeverGrowsWhenTypingAtEdges",e[e.GrowsOnlyWhenTypingBefore=2]="GrowsOnlyWhenTypingBefore",e[e.GrowsOnlyWhenTypingAfter=3]="GrowsOnlyWhenTypingAfter"}(en||(en={})),function(e){e[e.None=0]="None",e[e.Same=1]="Same",e[e.Indent=2]="Indent",e[e.DeepIndent=3]="DeepIndent"}(tn||(tn={}));class rn{static chord(e,t){return function(e,t){return(e|(65535&t)<<16>>>0)>>>0}(e,t)}}rn.CtrlCmd=2048,rn.Shift=1024,rn.Alt=512,rn.WinCtrl=256;var sn=function(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{l(i.next(e))}catch(e){s(e)}}function a(e){try{l(i.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}l((i=i.apply(e,t||[])).next())}))};class on extends class{constructor(e,t,n,i){this._uri=e,this._lines=t,this._eol=n,this._versionId=i,this._lineStarts=null,this._cachedTextValue=null}dispose(){this._lines.length=0}get version(){return this._versionId}getText(){return null===this._cachedTextValue&&(this._cachedTextValue=this._lines.join(this._eol)),this._cachedTextValue}onEvents(e){e.eol&&e.eol!==this._eol&&(this._eol=e.eol,this._lineStarts=null);const t=e.changes;for(const e of t)this._acceptDeleteRange(e.range),this._acceptInsertText(new Pe(e.range.startLineNumber,e.range.startColumn),e.text);this._versionId=e.versionId,this._cachedTextValue=null}_ensureLineStarts(){if(!this._lineStarts){const e=this._eol.length,t=this._lines.length,n=new Uint32Array(t);for(let i=0;i<t;i++)n[i]=this._lines[i].length+e;this._lineStarts=new Ge(n)}}_setLineText(e,t){this._lines[e]=t,this._lineStarts&&this._lineStarts.changeValue(e,this._lines[e].length+this._eol.length)}_acceptDeleteRange(e){if(e.startLineNumber!==e.endLineNumber)this._setLineText(e.startLineNumber-1,this._lines[e.startLineNumber-1].substring(0,e.startColumn-1)+this._lines[e.endLineNumber-1].substring(e.endColumn-1)),this._lines.splice(e.startLineNumber,e.endLineNumber-e.startLineNumber),this._lineStarts&&this._lineStarts.removeValues(e.startLineNumber,e.endLineNumber-e.startLineNumber);else{if(e.startColumn===e.endColumn)return;this._setLineText(e.startLineNumber-1,this._lines[e.startLineNumber-1].substring(0,e.startColumn-1)+this._lines[e.startLineNumber-1].substring(e.endColumn-1))}}_acceptInsertText(e,t){if(0===t.length)return;let n=t.split(/\r\n|\r|\n/);if(1===n.length)return void this._setLineText(e.lineNumber-1,this._lines[e.lineNumber-1].substring(0,e.column-1)+n[0]+this._lines[e.lineNumber-1].substring(e.column-1));n[n.length-1]+=this._lines[e.lineNumber-1].substring(e.column-1),this._setLineText(e.lineNumber-1,this._lines[e.lineNumber-1].substring(0,e.column-1)+n[0]);let i=new Uint32Array(n.length-1);for(let t=1;t<n.length;t++)this._lines.splice(e.lineNumber+t-1,0,n[t]),i[t-1]=n[t].length+this._eol.length;this._lineStarts&&this._lineStarts.insertValues(e.lineNumber,i)}}{get uri(){return this._uri}get eol(){return this._eol}getValue(){return this.getText()}getLinesContent(){return this._lines.slice(0)}getLineCount(){return this._lines.length}getLineContent(e){return this._lines[e-1]}getWordAtPosition(e,t){let n=Xe(e.column,function(e){let t=ze;if(e&&e instanceof RegExp)if(e.global)t=e;else{let n="g";e.ignoreCase&&(n+="i"),e.multiline&&(n+="m"),e.unicode&&(n+="u"),t=new RegExp(e.source,n)}return t.lastIndex=0,t}(t),this._lines[e.lineNumber-1],0);return n?new Ue(e.lineNumber,n.startColumn,e.lineNumber,n.endColumn):null}words(e){const t=this._lines,n=this._wordenize.bind(this);let i=0,r="",s=0,o=[];return{*[Symbol.iterator](){for(;;)if(s<o.length){const e=r.substring(o[s].start,o[s].end);s+=1,yield e}else{if(!(i<t.length))break;r=t[i],o=n(r,e),s=0,i+=1}}}}getLineWords(e,t){let n=this._lines[e-1],i=this._wordenize(n,t),r=[];for(const e of i)r.push({word:n.substring(e.start,e.end),startColumn:e.start+1,endColumn:e.end+1});return r}_wordenize(e,t){const n=[];let i;for(t.lastIndex=0;(i=t.exec(e))&&0!==i[0].length;)n.push({start:i.index,end:i.index+i[0].length});return n}getValueInRange(e){if((e=this._validateRange(e)).startLineNumber===e.endLineNumber)return this._lines[e.startLineNumber-1].substring(e.startColumn-1,e.endColumn-1);let t=this._eol,n=e.startLineNumber-1,i=e.endLineNumber-1,r=[];r.push(this._lines[n].substring(e.startColumn-1));for(let e=n+1;e<i;e++)r.push(this._lines[e]);return r.push(this._lines[i].substring(0,e.endColumn-1)),r.join(t)}offsetAt(e){return e=this._validatePosition(e),this._ensureLineStarts(),this._lineStarts.getAccumulatedValue(e.lineNumber-2)+(e.column-1)}positionAt(e){e=Math.floor(e),e=Math.max(0,e),this._ensureLineStarts();let t=this._lineStarts.getIndexOf(e),n=this._lines[t.index].length;return{lineNumber:1+t.index,column:1+Math.min(t.remainder,n)}}_validateRange(e){const t=this._validatePosition({lineNumber:e.startLineNumber,column:e.startColumn}),n=this._validatePosition({lineNumber:e.endLineNumber,column:e.endColumn});return t.lineNumber!==e.startLineNumber||t.column!==e.startColumn||n.lineNumber!==e.endLineNumber||n.column!==e.endColumn?{startLineNumber:t.lineNumber,startColumn:t.column,endLineNumber:n.lineNumber,endColumn:n.column}:e}_validatePosition(e){if(!Pe.isIPosition(e))throw new Error("bad position");let{lineNumber:t,column:n}=e,i=!1;if(t<1)t=1,n=1,i=!0;else if(t>this._lines.length)t=this._lines.length,n=this._lines[t-1].length+1,i=!0;else{let e=this._lines[t-1].length+1;n<1?(n=1,i=!0):n>e&&(n=e,i=!0)}return i?{lineNumber:t,column:n}:e}}class an{constructor(e,t){this._host=e,this._models=Object.create(null),this._foreignModuleFactory=t,this._foreignModule=null}dispose(){this._models=Object.create(null)}_getModel(e){return this._models[e]}_getModels(){let e=[];return Object.keys(this._models).forEach((t=>e.push(this._models[t]))),e}acceptNewModel(e){this._models[e.url]=new on(Ee.parse(e.url),e.lines,e.EOL,e.versionId)}acceptModelChanged(e,t){this._models[e]&&this._models[e].onEvents(t)}acceptRemovedModel(e){this._models[e]&&delete this._models[e]}computeDiff(e,t,n,i){return sn(this,void 0,void 0,(function*(){const r=this._getModel(e),s=this._getModel(t);if(!r||!s)return null;const o=r.getLinesContent(),a=s.getLinesContent(),l=new We(o,a,{shouldComputeCharChanges:!0,shouldPostProcessCharChanges:!0,shouldIgnoreTrimWhitespace:n,shouldMakePrettyDiff:!0,maxComputationTime:i}).computeDiff(),u=!(l.changes.length>0)&&this._modelsAreIdentical(r,s);return{quitEarly:l.quitEarly,identical:u,changes:l.changes}}))}_modelsAreIdentical(e,t){const n=e.getLineCount();if(n!==t.getLineCount())return!1;for(let i=1;i<=n;i++)if(e.getLineContent(i)!==t.getLineContent(i))return!1;return!0}computeMoreMinimalEdits(e,t){return sn(this,void 0,void 0,(function*(){const n=this._getModel(e);if(!n)return t;const i=[];let r;t=t.slice(0).sort(((e,t)=>e.range&&t.range?Ue.compareRangesUsingStarts(e.range,t.range):(e.range?0:1)-(t.range?0:1)));for(let{range:e,text:s,eol:o}of t){if("number"==typeof o&&(r=o),Ue.isEmpty(e)&&!s)continue;const t=n.getValueInRange(e);if(s=s.replace(/\r\n|\n|\r/g,n.eol),t===s)continue;if(Math.max(s.length,t.length)>an._diffLimit){i.push({range:e,text:s});continue}const a=G(t,s,!1),l=n.offsetAt(Ue.lift(e).getStartPosition());for(const e of a){const t=n.positionAt(l+e.originalStart),r=n.positionAt(l+e.originalStart+e.originalLength),o={text:s.substr(e.modifiedStart,e.modifiedLength),range:{startLineNumber:t.lineNumber,startColumn:t.column,endLineNumber:r.lineNumber,endColumn:r.column}};n.getValueInRange(o.range)!==o.text&&i.push(o)}}return"number"==typeof r&&i.push({eol:r,text:"",range:{startLineNumber:0,startColumn:0,endLineNumber:0,endColumn:0}}),i}))}computeLinks(e){return sn(this,void 0,void 0,(function*(){let t=this._getModel(e);return t?function(e){return e&&"function"==typeof e.getLineCount&&"function"==typeof e.getLineContent?rt.computeLinks(e):[]}(t):null}))}textualSuggest(e,t,n,i){return sn(this,void 0,void 0,(function*(){const r=new ut(!0),s=new RegExp(n,i),o=new Set;e:for(let n of e){const e=this._getModel(n);if(e)for(let n of e.words(s))if(n!==t&&isNaN(Number(n))&&(o.add(n),o.size>an._suggestionsLimit))break e}return{words:Array.from(o),duration:r.elapsed()}}))}computeWordRanges(e,t,n,i){return sn(this,void 0,void 0,(function*(){let r=this._getModel(e);if(!r)return Object.create(null);const s=new RegExp(n,i),o=Object.create(null);for(let e=t.startLineNumber;e<t.endLineNumber;e++){let t=r.getLineWords(e,s);for(const n of t){if(!isNaN(Number(n.word)))continue;let t=o[n.word];t||(t=[],o[n.word]=t),t.push({startLineNumber:e,startColumn:n.startColumn,endLineNumber:e,endColumn:n.endColumn})}}return o}))}navigateValueSet(e,t,n,i,r){return sn(this,void 0,void 0,(function*(){let s=this._getModel(e);if(!s)return null;let o=new RegExp(i,r);t.startColumn===t.endColumn&&(t={startLineNumber:t.startLineNumber,startColumn:t.startColumn,endLineNumber:t.endLineNumber,endColumn:t.endColumn+1});let a=s.getValueInRange(t),l=s.getWordAtPosition({lineNumber:t.startLineNumber,column:t.startColumn},o);if(!l)return null;let u=s.getValueInRange(l);return st.INSTANCE.navigateValueSet(t,a,l,u,n)}))}loadForeignModule(e,t,n){let i={host:P(n,((e,t)=>this._host.fhr(e,t))),getMirrorModels:()=>this._getModels()};return this._foreignModuleFactory?(this._foreignModule=this._foreignModuleFactory(i,t),Promise.resolve(R(this._foreignModule))):Promise.reject(new Error("Unexpected usage"))}fmr(e,t){if(!this._foreignModule||"function"!=typeof this._foreignModule[e])return Promise.reject(new Error("Missing requestHandler or method: "+e));try{return Promise.resolve(this._foreignModule[e].apply(this._foreignModule,t))}catch(e){return Promise.reject(e)}}}an._diffLimit=1e5,an._suggestionsLimit=1e4,"function"==typeof importScripts&&(y.monaco={editor:void 0,languages:void 0,CancellationTokenSource:class{constructor(e){this._token=void 0,this._parentListener=void 0,this._parentListener=e&&e.onCancellationRequested(this.cancel,this)}get token(){return this._token||(this._token=new gt),this._token}cancel(){this._token?this._token instanceof gt&&this._token.cancel():this._token=mt.Cancelled}dispose(e=!1){e&&this.cancel(),this._parentListener&&this._parentListener.dispose(),this._token?this._token instanceof gt&&this._token.dispose():this._token=mt.None}},Emitter:ct,KeyCode:Dt,KeyMod:rn,Position:Pe,Range:Ue,Selection:nn,SelectionDirection:Gt,MarkerSeverity:Ft,MarkerTag:Kt,Uri:Ee,Token:class{constructor(e,t,n){this.offset=0|e,this.type=t,this.language=n}toString(){return"("+this.offset+", "+this.type+")"}}});let ln=!1;self.onmessage=e=>{ln||function(e){if(ln)return;ln=!0;const t=new k((e=>{self.postMessage(e)}),(e=>new an(e,null)));self.onmessage=e=>{t.onmessage(e.data)}}()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xeXJjL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3F5cmMvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9xeXJjLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL2Vycm9ycy5qcyIsIndlYnBhY2s6Ly9xeXJjLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL2l0ZXJhdG9yLmpzIiwid2VicGFjazovL3F5cmMvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vbGlmZWN5Y2xlLmpzIiwid2VicGFjazovL3F5cmMvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vcGxhdGZvcm0uanMiLCJ3ZWJwYWNrOi8vcXlyYy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi90eXBlcy5qcyIsIndlYnBhY2s6Ly9xeXJjLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL3dvcmtlci9zaW1wbGVXb3JrZXIuanMiLCJ3ZWJwYWNrOi8vcXlyYy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9kaWZmL2RpZmZDaGFuZ2UuanMiLCJ3ZWJwYWNrOi8vcXlyYy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9zdHJpbmdzLmpzIiwid2VicGFjazovL3F5cmMvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vaGFzaC5qcyIsIndlYnBhY2s6Ly9xeXJjLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL2RpZmYvZGlmZi5qcyIsIndlYnBhY2s6Ly9xeXJjLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL3Byb2Nlc3MuanMiLCJ3ZWJwYWNrOi8vcXlyYy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9wYXRoLmpzIiwid2VicGFjazovL3F5cmMvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vdXJpLmpzIiwid2VicGFjazovL3F5cmMvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL3Bvc2l0aW9uLmpzIiwid2VicGFjazovL3F5cmMvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL3JhbmdlLmpzIiwid2VicGFjazovL3F5cmMvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2RpZmZDb21wdXRlci5qcyIsIndlYnBhY2s6Ly9xeXJjLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL3VpbnQuanMiLCJ3ZWJwYWNrOi8vcXlyYy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL3ZpZXdNb2RlbC9wcmVmaXhTdW1Db21wdXRlci5qcyIsIndlYnBhY2s6Ly9xeXJjLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vbW9kZWwvd29yZEhlbHBlci5qcyIsIndlYnBhY2s6Ly9xeXJjLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vY29yZS9jaGFyYWN0ZXJDbGFzc2lmaWVyLmpzIiwid2VicGFjazovL3F5cmMvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9tb2Rlcy9saW5rQ29tcHV0ZXIuanMiLCJ3ZWJwYWNrOi8vcXlyYy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL21vZGVzL3N1cHBvcnRzL2lucGxhY2VSZXBsYWNlU3VwcG9ydC5qcyIsIndlYnBhY2s6Ly9xeXJjLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL2xpbmtlZExpc3QuanMiLCJ3ZWJwYWNrOi8vcXlyYy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9zdG9wd2F0Y2guanMiLCJ3ZWJwYWNrOi8vcXlyYy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9ldmVudC5qcyIsIndlYnBhY2s6Ly9xeXJjLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL2NhbmNlbGxhdGlvbi5qcyIsIndlYnBhY2s6Ly9xeXJjLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL2tleUNvZGVzLmpzIiwid2VicGFjazovL3F5cmMvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9zdGFuZGFsb25lL3N0YW5kYWxvbmVFbnVtcy5qcyIsIndlYnBhY2s6Ly9xeXJjLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vY29yZS9zZWxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcXlyYy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL3N0YW5kYWxvbmUvc3RhbmRhbG9uZUJhc2UuanMiLCJ3ZWJwYWNrOi8vcXlyYy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL3NlcnZpY2VzL2VkaXRvclNpbXBsZVdvcmtlci5qcyIsIndlYnBhY2s6Ly9xeXJjLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vbW9kZWwvbWlycm9yVGV4dE1vZGVsLmpzIiwid2VicGFjazovL3F5cmMvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL3Rva2VuLmpzIiwid2VicGFjazovL3F5cmMvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2VkaXRvci53b3JrZXIuanMiXSwibmFtZXMiOlsiX193ZWJwYWNrX3JlcXVpcmVfXyIsImciLCJnbG9iYWxUaGlzIiwidGhpcyIsIkZ1bmN0aW9uIiwiZSIsIndpbmRvdyIsImVycm9ySGFuZGxlciIsImNvbnN0cnVjdG9yIiwibGlzdGVuZXJzIiwidW5leHBlY3RlZEVycm9ySGFuZGxlciIsInNldFRpbWVvdXQiLCJzdGFjayIsIkVycm9yIiwibWVzc2FnZSIsImVtaXQiLCJmb3JFYWNoIiwibGlzdGVuZXIiLCJvblVuZXhwZWN0ZWRFcnJvciIsIm9uVW5leHBlY3RlZEV4dGVybmFsRXJyb3IiLCJlcnJvciIsIm5hbWUiLCJjYW5jZWxlZE5hbWUiLCJ0cmFuc2Zvcm1FcnJvckZvclNlcmlhbGl6YXRpb24iLCIkaXNFcnJvciIsInN0YWNrdHJhY2UiLCJJdGVyYWJsZSIsImlzIiwidGhpbmciLCJTeW1ib2wiLCJpdGVyYXRvciIsIl9lbXB0eSIsIk9iamVjdCIsImZyZWV6ZSIsImVtcHR5Iiwic2luZ2xlIiwiZWxlbWVudCIsImZyb20iLCJpdGVyYWJsZSIsImlzRW1wdHkiLCJuZXh0IiwiZG9uZSIsImZpcnN0IiwidmFsdWUiLCJzb21lIiwicHJlZGljYXRlIiwiZmluZCIsImZpbHRlciIsIm1hcCIsImZuIiwiaW5kZXgiLCJjb25jYXQiLCJpdGVyYWJsZXMiLCJjb25jYXROZXN0ZWQiLCJyZWR1Y2UiLCJyZWR1Y2VyIiwiaW5pdGlhbFZhbHVlIiwic2xpY2UiLCJhcnIiLCJ0byIsImxlbmd0aCIsImNvbnN1bWUiLCJhdE1vc3QiLCJOdW1iZXIiLCJQT1NJVElWRV9JTkZJTklUWSIsImNvbnN1bWVkIiwiaSIsInB1c2giLCJlcXVhbHMiLCJhIiwiYiIsImNvbXBhcmF0b3IiLCJhdCIsImJ0IiwiYWkiLCJiaSIsImFuIiwiYm4iLCJtYXJrVHJhY2tlZCIsIngiLCJNdWx0aURpc3Bvc2VFcnJvciIsImVycm9ycyIsInN1cGVyIiwiam9pbiIsImRpc3Bvc2UiLCJhcmciLCJkIiwiQXJyYXkiLCJpc0FycmF5IiwiY29tYmluZWREaXNwb3NhYmxlIiwiZGlzcG9zYWJsZXMiLCJzZWxmIiwidG9EaXNwb3NhYmxlIiwiRGlzcG9zYWJsZVN0b3JlIiwiX3RvRGlzcG9zZSIsIlNldCIsIl9pc0Rpc3Bvc2VkIiwiY2xlYXIiLCJ2YWx1ZXMiLCJhZGQiLCJ0IiwiRElTQUJMRV9ESVNQT1NFRF9XQVJOSU5HIiwiY29uc29sZSIsIndhcm4iLCJfc3RvcmUiLCJfcmVnaXN0ZXIiLCJfYSIsIk5vbmUiLCJMQU5HVUFHRV9ERUZBVUxUIiwiX2xvY2FsZSIsIl90cmFuc2xhdGlvbnNDb25maWdGaWxlIiwiX3VzZXJBZ2VudCIsIl9pc1dpbmRvd3MiLCJfaXNNYWNpbnRvc2giLCJfaXNMaW51eCIsIl9pc0xpbnV4U25hcCIsIl9pc05hdGl2ZSIsIl9pc1dlYiIsIl9pc0lPUyIsIl9sYW5ndWFnZSIsImdsb2JhbHMiLCJub2RlUHJvY2VzcyIsInZzY29kZSIsInByb2Nlc3MiLCJpc0VsZWN0cm9uUmVuZGVyZXIiLCJ2ZXJzaW9ucyIsImVsZWN0cm9uIiwidHlwZSIsImlzRWxlY3Ryb25TYW5kYm94ZWQiLCJzYW5kYm94ZWQiLCJlbnYiLCJuYXZpZ2F0b3IiLCJwbGF0Zm9ybSIsInJhd05sc0NvbmZpZyIsIm5sc0NvbmZpZyIsIkpTT04iLCJwYXJzZSIsInJlc29sdmVkIiwiYXZhaWxhYmxlTGFuZ3VhZ2VzIiwibG9jYWxlIiwidXNlckFnZW50IiwiaW5kZXhPZiIsIm1heFRvdWNoUG9pbnRzIiwibGFuZ3VhZ2UiLCJfcGxhdGZvcm0iLCJpc1dpbmRvd3MiLCJpc01hY2ludG9zaCIsInNldEltbWVkaWF0ZSIsImJpbmQiLCJwb3N0TWVzc2FnZSIsImltcG9ydFNjcmlwdHMiLCJwZW5kaW5nIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRhdGEiLCJ2c2NvZGVTZXRJbW1lZGlhdGVJZCIsImxlbiIsImNhbmRpZGF0ZSIsImlkIiwic3BsaWNlIiwiY2FsbGJhY2siLCJsYXN0SWQiLCJteUlkIiwibmV4dFRpY2siLCJfcHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsImdldEFsbE1ldGhvZE5hbWVzIiwib2JqIiwibWV0aG9kcyIsInByb3AiLCJyZXMiLCJwcm90byIsImdldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldEFsbFByb3BlcnR5TmFtZXMiLCJjcmVhdGVQcm94eU9iamVjdCIsIm1ldGhvZE5hbWVzIiwiaW52b2tlIiwiY3JlYXRlUHJveHlNZXRob2QiLCJtZXRob2QiLCJhcmdzIiwiY2FsbCIsImFyZ3VtZW50cyIsInJlc3VsdCIsIm1ldGhvZE5hbWUiLCJTaW1wbGVXb3JrZXJQcm90b2NvbCIsImhhbmRsZXIiLCJfd29ya2VySWQiLCJfaGFuZGxlciIsIl9sYXN0U2VudFJlcSIsIl9wZW5kaW5nUmVwbGllcyIsImNyZWF0ZSIsInNldFdvcmtlcklkIiwid29ya2VySWQiLCJzZW5kTWVzc2FnZSIsInJlcSIsIlN0cmluZyIsInJlamVjdCIsIl9zZW5kIiwidnNXb3JrZXIiLCJoYW5kbGVNZXNzYWdlIiwiX2hhbmRsZU1lc3NhZ2UiLCJtc2ciLCJzZXEiLCJyZXBseU1lc3NhZ2UiLCJyZXBseSIsImVyciIsInJlcXVlc3RNZXNzYWdlIiwiciIsInVuZGVmaW5lZCIsImRldGFpbCIsInRyYW5zZmVyIiwibSIsIkFycmF5QnVmZmVyIiwiU2ltcGxlV29ya2VyU2VydmVyIiwicmVxdWVzdEhhbmRsZXJGYWN0b3J5IiwiX3JlcXVlc3RIYW5kbGVyRmFjdG9yeSIsIl9yZXF1ZXN0SGFuZGxlciIsIl9wcm90b2NvbCIsIm9ubWVzc2FnZSIsImluaXRpYWxpemUiLCJhcHBseSIsImxvYWRlckNvbmZpZyIsIm1vZHVsZUlkIiwiaG9zdE1ldGhvZHMiLCJob3N0UHJveHkiLCJiYXNlVXJsIiwicGF0aHMiLCJ2cyIsInRydXN0ZWRUeXBlc1BvbGljeSIsImNhdGNoRXJyb3IiLCJyZXF1aXJlIiwiY29uZmlnIiwibW9kdWxlIiwiRGlmZkNoYW5nZSIsIm9yaWdpbmFsU3RhcnQiLCJvcmlnaW5hbExlbmd0aCIsIm1vZGlmaWVkU3RhcnQiLCJtb2RpZmllZExlbmd0aCIsImdldE9yaWdpbmFsRW5kIiwiZ2V0TW9kaWZpZWRFbmQiLCJpc0hpZ2hTdXJyb2dhdGUiLCJjaGFyQ29kZSIsImlzTG93U3Vycm9nYXRlIiwiZnJvbUNoYXJDb2RlIiwiR3JhcGhlbWVCcmVha1RyZWUiLCJfZGF0YSIsIl9JTlNUQU5DRSIsImdldEdyYXBoZW1lQnJlYWtUeXBlIiwiY29kZVBvaW50Iiwibm9kZUNvdW50Iiwibm9kZUluZGV4IiwibnVtYmVySGFzaCIsInZhbCIsImluaXRpYWxIYXNoVmFsIiwic3RyaW5nSGFzaCIsInMiLCJoYXNoVmFsIiwiY2hhckNvZGVBdCIsImxlZnRSb3RhdGUiLCJiaXRzIiwidG90YWxCaXRzIiwiZGVsdGEiLCJmaWxsIiwiZGVzdCIsImNvdW50IiwiYnl0ZUxlbmd0aCIsInRvSGV4U3RyaW5nIiwiYnVmZmVyT3JWYWx1ZSIsImJpdHNpemUiLCJVaW50OEFycmF5IiwidG9TdHJpbmciLCJwYWRTdGFydCIsImNoYXIiLCJsZWZ0UGFkIiwiU3RyaW5nU0hBMSIsIl9oMCIsIl9oMSIsIl9oMiIsIl9oMyIsIl9oNCIsIl9idWZmIiwiX2J1ZmZEViIsIkRhdGFWaWV3IiwiYnVmZmVyIiwiX2J1ZmZMZW4iLCJfdG90YWxMZW4iLCJfbGVmdG92ZXJIaWdoU3Vycm9nYXRlIiwiX2ZpbmlzaGVkIiwidXBkYXRlIiwic3RyIiwic3RyTGVuIiwiYnVmZiIsIm9mZnNldCIsImJ1ZmZMZW4iLCJsZWZ0b3ZlckhpZ2hTdXJyb2dhdGUiLCJuZXh0Q2hhckNvZGUiLCJfcHVzaCIsIl9zdGVwIiwiZGlnZXN0IiwiX3dyYXBVcCIsIm1sIiwic2V0VWludDMyIiwiTWF0aCIsImZsb29yIiwiYmlnQmxvY2szMiIsIl9iaWdCbG9jazMyIiwiaiIsImdldFVpbnQzMiIsImYiLCJrIiwidGVtcCIsImMiLCJTdHJpbmdEaWZmU2VxdWVuY2UiLCJzb3VyY2UiLCJnZXRFbGVtZW50cyIsImNoYXJhY3RlcnMiLCJJbnQzMkFycmF5Iiwic3RyaW5nRGlmZiIsIm9yaWdpbmFsIiwibW9kaWZpZWQiLCJwcmV0dHkiLCJMY3NEaWZmIiwiQ29tcHV0ZURpZmYiLCJjaGFuZ2VzIiwiRGVidWciLCJjb25kaXRpb24iLCJNeUFycmF5Iiwic291cmNlQXJyYXkiLCJzb3VyY2VJbmRleCIsImRlc3RpbmF0aW9uQXJyYXkiLCJkZXN0aW5hdGlvbkluZGV4IiwiRGlmZkNoYW5nZUhlbHBlciIsIm1fY2hhbmdlcyIsIm1fb3JpZ2luYWxTdGFydCIsIm1fbW9kaWZpZWRTdGFydCIsIm1fb3JpZ2luYWxDb3VudCIsIm1fbW9kaWZpZWRDb3VudCIsIk1hcmtOZXh0Q2hhbmdlIiwiQWRkT3JpZ2luYWxFbGVtZW50Iiwib3JpZ2luYWxJbmRleCIsIm1vZGlmaWVkSW5kZXgiLCJtaW4iLCJBZGRNb2RpZmllZEVsZW1lbnQiLCJnZXRDaGFuZ2VzIiwiZ2V0UmV2ZXJzZUNoYW5nZXMiLCJyZXZlcnNlIiwib3JpZ2luYWxTZXF1ZW5jZSIsIm1vZGlmaWVkU2VxdWVuY2UiLCJjb250aW51ZVByb2Nlc3NpbmdQcmVkaWNhdGUiLCJDb250aW51ZVByb2Nlc3NpbmdQcmVkaWNhdGUiLCJvcmlnaW5hbFN0cmluZ0VsZW1lbnRzIiwib3JpZ2luYWxFbGVtZW50c09ySGFzaCIsIm9yaWdpbmFsSGFzU3RyaW5ncyIsIl9nZXRFbGVtZW50cyIsIm1vZGlmaWVkU3RyaW5nRWxlbWVudHMiLCJtb2RpZmllZEVsZW1lbnRzT3JIYXNoIiwibW9kaWZpZWRIYXNTdHJpbmdzIiwiX2hhc1N0cmluZ3MiLCJfb3JpZ2luYWxTdHJpbmdFbGVtZW50cyIsIl9vcmlnaW5hbEVsZW1lbnRzT3JIYXNoIiwiX21vZGlmaWVkU3RyaW5nRWxlbWVudHMiLCJfbW9kaWZpZWRFbGVtZW50c09ySGFzaCIsIm1fZm9yd2FyZEhpc3RvcnkiLCJtX3JldmVyc2VIaXN0b3J5Iiwic2VxdWVuY2UiLCJlbGVtZW50cyIsIl9pc1N0cmluZ0FycmF5IiwiaGFzaGVzIiwiRWxlbWVudHNBcmVFcXVhbCIsIm5ld0luZGV4IiwiT3JpZ2luYWxFbGVtZW50c0FyZUVxdWFsIiwiaW5kZXgxIiwiaW5kZXgyIiwiTW9kaWZpZWRFbGVtZW50c0FyZUVxdWFsIiwiX0NvbXB1dGVEaWZmIiwib3JpZ2luYWxFbmQiLCJtb2RpZmllZEVuZCIsInF1aXRFYXJseUFyciIsIkNvbXB1dGVEaWZmUmVjdXJzaXZlIiwiUHJldHRpZnlDaGFuZ2VzIiwicXVpdEVhcmx5IiwiQXNzZXJ0IiwibWlkT3JpZ2luYWxBcnIiLCJtaWRNb2RpZmllZEFyciIsIkNvbXB1dGVSZWN1cnNpb25Qb2ludCIsIm1pZE9yaWdpbmFsIiwibWlkTW9kaWZpZWQiLCJsZWZ0Q2hhbmdlcyIsInJpZ2h0Q2hhbmdlcyIsIkNvbmNhdGVuYXRlQ2hhbmdlcyIsIldBTEtUUkFDRSIsImRpYWdvbmFsRm9yd2FyZEJhc2UiLCJkaWFnb25hbEZvcndhcmRTdGFydCIsImRpYWdvbmFsRm9yd2FyZEVuZCIsImRpYWdvbmFsRm9yd2FyZE9mZnNldCIsImRpYWdvbmFsUmV2ZXJzZUJhc2UiLCJkaWFnb25hbFJldmVyc2VTdGFydCIsImRpYWdvbmFsUmV2ZXJzZUVuZCIsImRpYWdvbmFsUmV2ZXJzZU9mZnNldCIsImZvcndhcmRQb2ludHMiLCJyZXZlcnNlUG9pbnRzIiwiZGVsdGFJc0V2ZW4iLCJmb3J3YXJkQ2hhbmdlcyIsInJldmVyc2VDaGFuZ2VzIiwiY2hhbmdlSGVscGVyIiwiZGlhZ29uYWxNaW4iLCJkaWFnb25hbE1heCIsImRpYWdvbmFsUmVsYXRpdmUiLCJsYXN0T3JpZ2luYWxJbmRleCIsImhpc3RvcnlJbmRleCIsImRpYWdvbmFsIiwib3JpZ2luYWxTdGFydFBvaW50IiwibW9kaWZpZWRTdGFydFBvaW50IiwibGFzdEZvcndhcmRDaGFuZ2UiLCJtYXgiLCJtYXhEaWZmZXJlbmNlcyIsIm51bURpYWdvbmFscyIsIm51bURpZmZlcmVuY2VzIiwiZnVydGhlc3RPcmlnaW5hbEluZGV4IiwiZnVydGhlc3RNb2RpZmllZEluZGV4IiwiQ2xpcERpYWdvbmFsQm91bmQiLCJ0ZW1wT3JpZ2luYWxJbmRleCIsImFicyIsIm1hdGNoTGVuZ3RoT2ZMb25nZXN0IiwiQ29weTIiLCJjaGFuZ2UiLCJvcmlnaW5hbFN0b3AiLCJtb2RpZmllZFN0b3AiLCJjaGVja09yaWdpbmFsIiwiY2hlY2tNb2RpZmllZCIsIm1lcmdlZENoYW5nZUFyciIsIkNoYW5nZXNPdmVybGFwIiwicHJldkNoYW5nZSIsImJlc3REZWx0YSIsImJlc3RTY29yZSIsIl9ib3VuZGFyeVNjb3JlIiwic2NvcmUiLCJhQ2hhbmdlIiwiYkNoYW5nZSIsIm1hdGNoZWRMZW5ndGgiLCJhT3JpZ2luYWxTdGFydCIsImJPcmlnaW5hbEVuZCIsImFiT3JpZ2luYWxMZW5ndGgiLCJhTW9kaWZpZWRTdGFydCIsImJNb2RpZmllZEVuZCIsImFiTW9kaWZpZWRMZW5ndGgiLCJfZmluZEJldHRlckNvbnRpZ3VvdXNTZXF1ZW5jZSIsIm9yaWdpbmFsTWF0Y2hTdGFydCIsIm1vZGlmaWVkTWF0Y2hTdGFydCIsImRlc2lyZWRMZW5ndGgiLCJvcmlnaW5hbE1heCIsIm1vZGlmaWVkTWF4IiwiYmVzdE9yaWdpbmFsU3RhcnQiLCJiZXN0TW9kaWZpZWRTdGFydCIsIl9jb250aWd1b3VzU2VxdWVuY2VTY29yZSIsImwiLCJfT3JpZ2luYWxJc0JvdW5kYXJ5IiwidGVzdCIsIl9PcmlnaW5hbFJlZ2lvbklzQm91bmRhcnkiLCJfTW9kaWZpZWRJc0JvdW5kYXJ5IiwiX01vZGlmaWVkUmVnaW9uSXNCb3VuZGFyeSIsImxlZnQiLCJyaWdodCIsIkNvcHkiLCJkaWFnb25hbEJhc2VJbmRleCIsImRpZmZFdmVuIiwic2FmZVByb2Nlc3MiLCJzYW5kYm94UHJvY2VzcyIsImN3ZCIsIkNIQVJfRE9UIiwiQ0hBUl9GT1JXQVJEX1NMQVNIIiwiQ0hBUl9CQUNLV0FSRF9TTEFTSCIsIkNIQVJfQ09MT04iLCJFcnJvckludmFsaWRBcmdUeXBlIiwiZXhwZWN0ZWQiLCJhY3R1YWwiLCJkZXRlcm1pbmVyIiwicmVwbGFjZSIsImNvZGUiLCJ2YWxpZGF0ZVN0cmluZyIsImlzUGF0aFNlcGFyYXRvciIsImlzUG9zaXhQYXRoU2VwYXJhdG9yIiwiaXNXaW5kb3dzRGV2aWNlUm9vdCIsIm5vcm1hbGl6ZVN0cmluZyIsInBhdGgiLCJhbGxvd0Fib3ZlUm9vdCIsInNlcGFyYXRvciIsImxhc3RTZWdtZW50TGVuZ3RoIiwibGFzdFNsYXNoIiwiZG90cyIsImxhc3RTbGFzaEluZGV4IiwibGFzdEluZGV4T2YiLCJfZm9ybWF0Iiwic2VwIiwicGF0aE9iamVjdCIsImRpciIsInJvb3QiLCJiYXNlIiwiZXh0Iiwid2luMzIiLCJwYXRoU2VnbWVudHMiLCJyZXNvbHZlZERldmljZSIsInJlc29sdmVkVGFpbCIsInJlc29sdmVkQWJzb2x1dGUiLCJ0b0xvd2VyQ2FzZSIsInJvb3RFbmQiLCJkZXZpY2UiLCJpc0Fic29sdXRlIiwibGFzdCIsImZpcnN0UGFydCIsIm5vcm1hbGl6ZSIsInRhaWwiLCJqb2luZWQiLCJuZWVkc1JlcGxhY2UiLCJzbGFzaENvdW50IiwiZmlyc3RMZW4iLCJyZWxhdGl2ZSIsImZyb21PcmlnIiwidG9PcmlnIiwiZnJvbVN0YXJ0IiwiZnJvbUVuZCIsImZyb21MZW4iLCJ0b1N0YXJ0IiwidG9FbmQiLCJ0b0xlbiIsImxhc3RDb21tb25TZXAiLCJmcm9tQ29kZSIsIm91dCIsInRvTmFtZXNwYWNlZFBhdGgiLCJyZXNvbHZlZFBhdGgiLCJkaXJuYW1lIiwiZW5kIiwibWF0Y2hlZFNsYXNoIiwiYmFzZW5hbWUiLCJzdGFydCIsImV4dElkeCIsImZpcnN0Tm9uU2xhc2hFbmQiLCJleHRuYW1lIiwic3RhcnREb3QiLCJzdGFydFBhcnQiLCJwcmVEb3RTdGF0ZSIsImZvcm1hdCIsInJldCIsImRlbGltaXRlciIsInBvc2l4IiwidHJhaWxpbmdTZXBhcmF0b3IiLCJoYXNSb290IiwiX3NjaGVtZVBhdHRlcm4iLCJfc2luZ2xlU2xhc2hTdGFydCIsIl9kb3VibGVTbGFzaFN0YXJ0IiwiX3ZhbGlkYXRlVXJpIiwiX3N0cmljdCIsInNjaGVtZSIsImF1dGhvcml0eSIsInF1ZXJ5IiwiZnJhZ21lbnQiLCJfc2xhc2giLCJfcmVnZXhwIiwiVVJJIiwic2NoZW1lT3JEYXRhIiwiX3NjaGVtZUZpeCIsIl9yZWZlcmVuY2VSZXNvbHV0aW9uIiwiZnNQYXRoIiwid2l0aCIsInVyaVRvRnNQYXRoIiwiVXJpIiwibWF0Y2giLCJleGVjIiwicGVyY2VudERlY29kZSIsImlkeCIsInN1YnN0cmluZyIsImNvbXBvbmVudHMiLCJ1cmkiLCJwYXRoRnJhZ21lbnQiLCJuZXdQYXRoIiwiZmlsZSIsInNraXBFbmNvZGluZyIsIl9hc0Zvcm1hdHRlZCIsInRvSlNPTiIsIl9mb3JtYXR0ZWQiLCJleHRlcm5hbCIsIl9mc1BhdGgiLCJfc2VwIiwiX3BhdGhTZXBNYXJrZXIiLCIkbWlkIiwiZW5jb2RlVGFibGUiLCJlbmNvZGVVUklDb21wb25lbnRGYXN0IiwidXJpQ29tcG9uZW50IiwiYWxsb3dTbGFzaCIsIm5hdGl2ZUVuY29kZVBvcyIsInBvcyIsImVuY29kZVVSSUNvbXBvbmVudCIsImNoYXJBdCIsInN1YnN0ciIsImVzY2FwZWQiLCJlbmNvZGVVUklDb21wb25lbnRNaW5pbWFsIiwia2VlcERyaXZlTGV0dGVyQ2FzaW5nIiwiZW5jb2RlciIsInVzZXJpbmZvIiwiZGVjb2RlVVJJQ29tcG9uZW50R3JhY2VmdWwiLCJkZWNvZGVVUklDb21wb25lbnQiLCJfckVuY29kZWRBc0hleCIsIlBvc2l0aW9uIiwibGluZU51bWJlciIsImNvbHVtbiIsIm5ld0xpbmVOdW1iZXIiLCJuZXdDb2x1bW4iLCJkZWx0YUxpbmVOdW1iZXIiLCJkZWx0YUNvbHVtbiIsIm90aGVyIiwiaXNCZWZvcmUiLCJpc0JlZm9yZU9yRXF1YWwiLCJhTGluZU51bWJlciIsImJMaW5lTnVtYmVyIiwiY2xvbmUiLCJSYW5nZSIsInN0YXJ0TGluZU51bWJlciIsInN0YXJ0Q29sdW1uIiwiZW5kTGluZU51bWJlciIsImVuZENvbHVtbiIsInJhbmdlIiwiY29udGFpbnNQb3NpdGlvbiIsInBvc2l0aW9uIiwiY29udGFpbnNSYW5nZSIsIm90aGVyUmFuZ2UiLCJzdHJpY3RDb250YWluc1JhbmdlIiwicGx1c1JhbmdlIiwiaW50ZXJzZWN0UmFuZ2VzIiwicmVzdWx0U3RhcnRMaW5lTnVtYmVyIiwicmVzdWx0U3RhcnRDb2x1bW4iLCJyZXN1bHRFbmRMaW5lTnVtYmVyIiwicmVzdWx0RW5kQ29sdW1uIiwib3RoZXJTdGFydExpbmVOdW1iZXIiLCJvdGhlclN0YXJ0Q29sdW1uIiwib3RoZXJFbmRMaW5lTnVtYmVyIiwib3RoZXJFbmRDb2x1bW4iLCJlcXVhbHNSYW5nZSIsImdldEVuZFBvc2l0aW9uIiwiZ2V0U3RhcnRQb3NpdGlvbiIsInNldEVuZFBvc2l0aW9uIiwic2V0U3RhcnRQb3NpdGlvbiIsImNvbGxhcHNlVG9TdGFydCIsImFTdGFydExpbmVOdW1iZXIiLCJiU3RhcnRMaW5lTnVtYmVyIiwiYVN0YXJ0Q29sdW1uIiwiYlN0YXJ0Q29sdW1uIiwiYUVuZExpbmVOdW1iZXIiLCJiRW5kTGluZU51bWJlciIsImNvbXB1dGVEaWZmIiwiTGluZVNlcXVlbmNlIiwibGluZXMiLCJzdGFydENvbHVtbnMiLCJlbmRDb2x1bW5zIiwiZ2V0Rmlyc3ROb25CbGFua0NvbHVtbiIsImdldExhc3ROb25CbGFua0NvbHVtbiIsIl9zdGFydENvbHVtbnMiLCJfZW5kQ29sdW1ucyIsImdldFN0YXJ0TGluZU51bWJlciIsImdldEVuZExpbmVOdW1iZXIiLCJjcmVhdGVDaGFyU2VxdWVuY2UiLCJzaG91bGRJZ25vcmVUcmltV2hpdGVzcGFjZSIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsImNoYXJDb2RlcyIsImxpbmVOdW1iZXJzIiwiY29sdW1ucyIsImxpbmVDb250ZW50IiwiY29sIiwiQ2hhclNlcXVlbmNlIiwiX2NoYXJDb2RlcyIsIl9saW5lTnVtYmVycyIsIl9jb2x1bW5zIiwiZ2V0U3RhcnRDb2x1bW4iLCJnZXRFbmRDb2x1bW4iLCJDaGFyQ2hhbmdlIiwib3JpZ2luYWxTdGFydExpbmVOdW1iZXIiLCJvcmlnaW5hbFN0YXJ0Q29sdW1uIiwib3JpZ2luYWxFbmRMaW5lTnVtYmVyIiwib3JpZ2luYWxFbmRDb2x1bW4iLCJtb2RpZmllZFN0YXJ0TGluZU51bWJlciIsIm1vZGlmaWVkU3RhcnRDb2x1bW4iLCJtb2RpZmllZEVuZExpbmVOdW1iZXIiLCJtb2RpZmllZEVuZENvbHVtbiIsImRpZmZDaGFuZ2UiLCJvcmlnaW5hbENoYXJTZXF1ZW5jZSIsIm1vZGlmaWVkQ2hhclNlcXVlbmNlIiwiTGluZUNoYW5nZSIsImNoYXJDaGFuZ2VzIiwib3JpZ2luYWxMaW5lU2VxdWVuY2UiLCJtb2RpZmllZExpbmVTZXF1ZW5jZSIsImNvbnRpbnVlQ2hhckRpZmYiLCJzaG91bGRDb21wdXRlQ2hhckNoYW5nZXMiLCJzaG91bGRQb3N0UHJvY2Vzc0NoYXJDaGFuZ2VzIiwicmF3Q2hhbmdlcyIsImN1cnJDaGFuZ2UiLCJvcmlnaW5hbE1hdGNoaW5nTGVuZ3RoIiwibW9kaWZpZWRNYXRjaGluZ0xlbmd0aCIsInBvc3RQcm9jZXNzQ2hhckNoYW5nZXMiLCJjcmVhdGVGcm9tRGlmZkNoYW5nZSIsIkRpZmZDb21wdXRlciIsIm9yaWdpbmFsTGluZXMiLCJtb2RpZmllZExpbmVzIiwib3B0cyIsInNob3VsZE1ha2VQcmV0dHlEaWZmIiwiY29udGludWVMaW5lRGlmZiIsImNyZWF0ZUNvbnRpbnVlUHJvY2Vzc2luZ1ByZWRpY2F0ZSIsIm1heENvbXB1dGF0aW9uVGltZSIsImRpZmZSZXN1bHQiLCJsaW5lQ2hhbmdlcyIsImNyZWF0ZUZyb21EaWZmUmVzdWx0Iiwib3JpZ2luYWxMaW5lSW5kZXgiLCJtb2RpZmllZExpbmVJbmRleCIsIm5leHRDaGFuZ2UiLCJvcmlnaW5hbExpbmUiLCJtb2RpZmllZExpbmUiLCJfcHVzaFRyaW1XaGl0ZXNwYWNlQ2hhckNoYW5nZSIsIm9yaWdpbmFsTWF4Q29sdW1uIiwibW9kaWZpZWRNYXhDb2x1bW4iLCJvcmlnaW5hbExpbmVOdW1iZXIiLCJtb2RpZmllZExpbmVOdW1iZXIiLCJfbWVyZ2VUcmltV2hpdGVzcGFjZUNoYXJDaGFuZ2UiLCJ0eHQiLCJkZWZhdWx0VmFsdWUiLCJjaENvZGUiLCJtYXhpbXVtUnVudGltZSIsInN0YXJ0VGltZSIsIkRhdGUiLCJub3ciLCJ0b1VpbnQ4IiwidiIsInRvVWludDMyIiwiUHJlZml4U3VtSW5kZXhPZlJlc3VsdCIsInJlbWFpbmRlciIsIlByZWZpeFN1bUNvbXB1dGVyIiwicHJlZml4U3VtIiwiVWludDMyQXJyYXkiLCJwcmVmaXhTdW1WYWxpZEluZGV4IiwiaW5zZXJ0VmFsdWVzIiwiaW5zZXJ0SW5kZXgiLCJvbGRWYWx1ZXMiLCJvbGRQcmVmaXhTdW0iLCJpbnNlcnRWYWx1ZXNMZW4iLCJzZXQiLCJzdWJhcnJheSIsImNoYW5nZVZhbHVlIiwicmVtb3ZlVmFsdWVzIiwiY250IiwibWF4Q250IiwiZ2V0VG90YWxWYWx1ZSIsIl9nZXRBY2N1bXVsYXRlZFZhbHVlIiwiZ2V0QWNjdW11bGF0ZWRWYWx1ZSIsImdldEluZGV4T2YiLCJhY2N1bXVsYXRlZFZhbHVlIiwibG93IiwiaGlnaCIsIm1pZCIsIm1pZFN0b3AiLCJtaWRTdGFydCIsIkRFRkFVTFRfV09SRF9SRUdFWFAiLCJhbGxvd0luV29yZHMiLCJSZWdFeHAiLCJjcmVhdGVXb3JkUmVnRXhwIiwiX2RlZmF1bHRDb25maWciLCJtYXhMZW4iLCJ3aW5kb3dTaXplIiwidGltZUJ1ZGdldCIsImdldFdvcmRBdFRleHQiLCJ3b3JkRGVmaW5pdGlvbiIsInRleHQiLCJ0ZXh0T2Zmc2V0IiwidDEiLCJwcmV2UmVnZXhJbmRleCIsInJlZ2V4SW5kZXgiLCJsYXN0SW5kZXgiLCJ0aGlzTWF0Y2giLCJfZmluZFJlZ2V4TWF0Y2hFbmNsb3NpbmdQb3NpdGlvbiIsIndvcmQiLCJzdG9wUG9zIiwibWF0Y2hJbmRleCIsIkNoYXJhY3RlckNsYXNzaWZpZXIiLCJfZGVmYXVsdFZhbHVlIiwiX2FzY2lpTWFwIiwiX2NyZWF0ZUFzY2lpTWFwIiwiX21hcCIsIk1hcCIsImFzY2lpTWFwIiwiX3ZhbHVlIiwiZ2V0IiwiVWludDhNYXRyaXgiLCJyb3dzIiwiY29scyIsInJvdyIsIlN0YXRlTWFjaGluZSIsImVkZ2VzIiwibWF4Q2hhckNvZGUiLCJtYXhTdGF0ZSIsInN0YXRlcyIsIl9zdGF0ZXMiLCJfbWF4Q2hhckNvZGUiLCJuZXh0U3RhdGUiLCJjdXJyZW50U3RhdGUiLCJfc3RhdGVNYWNoaW5lIiwiX2NsYXNzaWZpZXIiLCJMaW5rQ29tcHV0ZXIiLCJjbGFzc2lmaWVyIiwibGluZSIsImxpbmtCZWdpbkluZGV4IiwibGlua0VuZEluZGV4IiwibGFzdEluY2x1ZGVkQ2hhckluZGV4IiwiY2hhckNvZGVCZWZvcmVMaW5rIiwibGFzdENoYXJDb2RlSW5MaW5rIiwidXJsIiwibW9kZWwiLCJzdGF0ZU1hY2hpbmUiLCJnZXRTdGF0ZU1hY2hpbmUiLCJGT1JDRV9URVJNSU5BVElPTl9DSEFSQUNURVJTIiwiQ0FOTk9UX0VORF9XSVRIX0NIQVJBQ1RFUlMiLCJnZXRDbGFzc2lmaWVyIiwibGluZUNvdW50IiwiZ2V0TGluZUNvdW50IiwiZ2V0TGluZUNvbnRlbnQiLCJsaW5rQmVnaW5DaENvZGUiLCJzdGF0ZSIsImhhc09wZW5QYXJlbnMiLCJoYXNPcGVuU3F1YXJlQnJhY2tldCIsImluU3F1YXJlQnJhY2tldHMiLCJoYXNPcGVuQ3VybHlCcmFja2V0IiwicmVzZXRTdGF0ZU1hY2hpbmUiLCJjaENsYXNzIiwiX2NyZWF0ZUxpbmsiLCJCYXNpY0lucGxhY2VSZXBsYWNlIiwiX2RlZmF1bHRWYWx1ZVNldCIsIm5hdmlnYXRlVmFsdWVTZXQiLCJyYW5nZTEiLCJ0ZXh0MSIsInJhbmdlMiIsInRleHQyIiwidXAiLCJkb05hdmlnYXRlVmFsdWVTZXQiLCJudW1iZXJSZXN1bHQiLCJudW1iZXJSZXBsYWNlIiwidGV4dFJlcGxhY2UiLCJwcmVjaXNpb24iLCJwb3ciLCJuMSIsIm4yIiwicGFyc2VGbG9hdCIsImlzTmFOIiwidmFsdWVTZXRzUmVwbGFjZSIsInZhbHVlU2V0cyIsInZhbHVlU2V0UmVwbGFjZSIsInZhbHVlU2V0IiwiSU5TVEFOQ0UiLCJOb2RlIiwiVW5kZWZpbmVkIiwicHJldiIsIl9maXJzdCIsIl9sYXN0IiwiX3NpemUiLCJub2RlIiwidW5zaGlmdCIsIl9pbnNlcnQiLCJhdFRoZUVuZCIsIm5ld05vZGUiLCJvbGRMYXN0Iiwib2xkRmlyc3QiLCJkaWRSZW1vdmUiLCJfcmVtb3ZlIiwic2hpZnQiLCJwb3AiLCJhbmNob3IiLCJoYXNQZXJmb3JtYW5jZU5vdyIsInBlcmZvcm1hbmNlIiwiU3RvcFdhdGNoIiwiaGlnaFJlc29sdXRpb24iLCJfaGlnaFJlc29sdXRpb24iLCJfc3RhcnRUaW1lIiwiX25vdyIsIl9zdG9wVGltZSIsInN0b3AiLCJlbGFwc2VkIiwiRXZlbnQiLCJvbmNlIiwiZXZlbnQiLCJ0aGlzQXJncyIsImRpZEZpcmUiLCJzbmFwc2hvdCIsImVhY2giLCJtZXJnZSIsImluaXRpYWwiLCJvdXRwdXQiLCJlbWl0dGVyIiwiRW1pdHRlciIsIm9uRmlyc3RMaXN0ZW5lckFkZCIsImZpcmUiLCJvbkxhc3RMaXN0ZW5lclJlbW92ZSIsImRlYm91bmNlIiwiZGVsYXkiLCJsZWFkaW5nIiwibGVha1dhcm5pbmdUaHJlc2hvbGQiLCJzdWJzY3JpcHRpb24iLCJoYW5kbGUiLCJudW1EZWJvdW5jZWRDYWxscyIsImN1ciIsImNsZWFyVGltZW91dCIsIl9vdXRwdXQiLCJsYXRjaCIsImNhY2hlIiwiZmlyc3RDYWxsIiwic2hvdWxkRW1pdCIsInNpZ25hbCIsImFueSIsImV2ZW50cyIsInN0b3B3YXRjaCIsImdldFRpbWUiLCJfIiwic3BsaXQiLCJpc1QiLCJfYnVmZmVyIiwiZmx1c2giLCJvbkZpcnN0TGlzdGVuZXJEaWRBZGQiLCJDaGFpbmFibGVFdmVudCIsIm9uIiwiY2hhaW4iLCJmcm9tTm9kZUV2ZW50RW1pdHRlciIsImV2ZW50TmFtZSIsInJlbW92ZUxpc3RlbmVyIiwiZnJvbURPTUV2ZW50RW1pdHRlciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJmcm9tUHJvbWlzZSIsInByb21pc2UiLCJ0b1Byb21pc2UiLCJFdmVudFByb2ZpbGluZyIsIl9saXN0ZW5lckNvdW50IiwiX2ludm9jYXRpb25Db3VudCIsIl9lbGFwc2VkT3ZlcmFsbCIsIl9uYW1lIiwiX2lkUG9vbCIsImxpc3RlbmVyQ291bnQiLCJfc3RvcFdhdGNoIiwiaW5mbyIsInRvRml4ZWQiLCJvcHRpb25zIiwiX2Rpc3Bvc2VkIiwiX29wdGlvbnMiLCJfbGVha2FnZU1vbiIsIl9wZXJmTW9uIiwiX3Byb2ZOYW1lIiwiX2V2ZW50IiwiX2xpc3RlbmVycyIsImZpcnN0TGlzdGVuZXIiLCJyZW1vdmUiLCJvbkxpc3RlbmVyRGlkQWRkIiwicmVtb3ZlTW9uaXRvciIsImNoZWNrIiwic2l6ZSIsIl9ub29wIiwiX2IiLCJfZGVsaXZlcnlRdWV1ZSIsIl9jIiwiX2QiLCJfZSIsInNob3J0Y3V0RXZlbnQiLCJjb250ZXh0IiwiQ2FuY2VsbGF0aW9uVG9rZW4iLCJpc0NhbmNlbGxhdGlvblRva2VuIiwiQ2FuY2VsbGVkIiwiTXV0YWJsZVRva2VuIiwiaXNDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJvbkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsIl9pc0NhbmNlbGxlZCIsIl9lbWl0dGVyIiwiY2FuY2VsIiwiS2V5Q29kZVN0ck1hcCIsIl9rZXlDb2RlVG9TdHIiLCJfc3RyVG9LZXlDb2RlIiwiZGVmaW5lIiwia2V5Q29kZSIsImtleUNvZGVUb1N0ciIsInN0clRvS2V5Q29kZSIsInVpTWFwIiwidXNlclNldHRpbmdzVVNNYXAiLCJ1c2VyU2V0dGluZ3NHZW5lcmFsTWFwIiwiS2V5Q29kZVV0aWxzIiwiQWNjZXNzaWJpbGl0eVN1cHBvcnQiLCJDb21wbGV0aW9uSXRlbUluc2VydFRleHRSdWxlIiwiQ29tcGxldGlvbkl0ZW1LaW5kIiwiQ29tcGxldGlvbkl0ZW1UYWciLCJDb21wbGV0aW9uVHJpZ2dlcktpbmQiLCJDb250ZW50V2lkZ2V0UG9zaXRpb25QcmVmZXJlbmNlIiwiQ3Vyc29yQ2hhbmdlUmVhc29uIiwiRGVmYXVsdEVuZE9mTGluZSIsIkRvY3VtZW50SGlnaGxpZ2h0S2luZCIsIkVkaXRvckF1dG9JbmRlbnRTdHJhdGVneSIsIkVkaXRvck9wdGlvbiIsIkVuZE9mTGluZVByZWZlcmVuY2UiLCJFbmRPZkxpbmVTZXF1ZW5jZSIsIkluZGVudEFjdGlvbiIsIklubGF5SGludEtpbmQiLCJJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQiLCJLZXlDb2RlIiwiTWFya2VyU2V2ZXJpdHkiLCJNYXJrZXJUYWciLCJNaW5pbWFwUG9zaXRpb24iLCJNb3VzZVRhcmdldFR5cGUiLCJPdmVybGF5V2lkZ2V0UG9zaXRpb25QcmVmZXJlbmNlIiwiT3ZlcnZpZXdSdWxlckxhbmUiLCJSZW5kZXJMaW5lTnVtYmVyc1R5cGUiLCJSZW5kZXJNaW5pbWFwIiwiU2Nyb2xsVHlwZSIsIlNjcm9sbGJhclZpc2liaWxpdHkiLCJTZWxlY3Rpb25EaXJlY3Rpb24iLCJTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmQiLCJTeW1ib2xLaW5kIiwiU3ltYm9sVGFnIiwiVGV4dEVkaXRvckN1cnNvckJsaW5raW5nU3R5bGUiLCJUZXh0RWRpdG9yQ3Vyc29yU3R5bGUiLCJUcmFja2VkUmFuZ2VTdGlja2luZXNzIiwiV3JhcHBpbmdJbmRlbnQiLCJ1aUxhYmVsIiwidXNVc2VyU2V0dGluZ3NMYWJlbCIsImdlbmVyYWxVc2VyU2V0dGluZ3NMYWJlbCIsImZyb21TdHJpbmciLCJrZXkiLCJ0b1VzZXJTZXR0aW5nc1VTIiwidG9Vc2VyU2V0dGluZ3NHZW5lcmFsIiwiZnJvbVVzZXJTZXR0aW5ncyIsIlNlbGVjdGlvbiIsInNlbGVjdGlvblN0YXJ0TGluZU51bWJlciIsInNlbGVjdGlvblN0YXJ0Q29sdW1uIiwicG9zaXRpb25MaW5lTnVtYmVyIiwicG9zaXRpb25Db2x1bW4iLCJlcXVhbHNTZWxlY3Rpb24iLCJzZWxlY3Rpb25zRXF1YWwiLCJnZXREaXJlY3Rpb24iLCJnZXRQb3NpdGlvbiIsInNlbCIsImRpcmVjdGlvbiIsIktleU1vZCIsInNlY29uZFBhcnQiLCJLZXlDaG9yZCIsIkN0cmxDbWQiLCJTaGlmdCIsIkFsdCIsIldpbkN0cmwiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJmdWxmaWxsZWQiLCJzdGVwIiwicmVqZWN0ZWQiLCJNaXJyb3JNb2RlbCIsImVvbCIsInZlcnNpb25JZCIsIl91cmkiLCJfbGluZXMiLCJfZW9sIiwiX3ZlcnNpb25JZCIsIl9saW5lU3RhcnRzIiwiX2NhY2hlZFRleHRWYWx1ZSIsImdldFRleHQiLCJvbkV2ZW50cyIsIl9hY2NlcHREZWxldGVSYW5nZSIsIl9hY2NlcHRJbnNlcnRUZXh0IiwiX2Vuc3VyZUxpbmVTdGFydHMiLCJlb2xMZW5ndGgiLCJsaW5lc0xlbmd0aCIsImxpbmVTdGFydFZhbHVlcyIsIl9zZXRMaW5lVGV4dCIsImxpbmVJbmRleCIsIm5ld1ZhbHVlIiwiaW5zZXJ0VGV4dCIsImluc2VydExpbmVzIiwibmV3TGVuZ3RocyIsImdldFZhbHVlIiwiZ2V0TGluZXNDb250ZW50IiwiZ2V0V29yZEF0UG9zaXRpb24iLCJ3b3JkQXRUZXh0IiwiZ2xvYmFsIiwiZmxhZ3MiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwidW5pY29kZSIsImVuc3VyZVZhbGlkV29yZERlZmluaXRpb24iLCJ3b3JkcyIsIndvcmRlbml6ZSIsIl93b3JkZW5pemUiLCJsaW5lVGV4dCIsIndvcmRSYW5nZXNJZHgiLCJ3b3JkUmFuZ2VzIiwiZ2V0TGluZVdvcmRzIiwiY29udGVudCIsInJhbmdlcyIsImdldFZhbHVlSW5SYW5nZSIsIl92YWxpZGF0ZVJhbmdlIiwibGluZUVuZGluZyIsInN0YXJ0TGluZUluZGV4IiwiZW5kTGluZUluZGV4IiwicmVzdWx0TGluZXMiLCJvZmZzZXRBdCIsIl92YWxpZGF0ZVBvc2l0aW9uIiwicG9zaXRpb25BdCIsImxpbmVMZW5ndGgiLCJpc0lQb3NpdGlvbiIsImhhc0NoYW5nZWQiLCJtYXhDaGFyYWN0ZXIiLCJFZGl0b3JTaW1wbGVXb3JrZXIiLCJob3N0IiwiZm9yZWlnbk1vZHVsZUZhY3RvcnkiLCJfaG9zdCIsIl9tb2RlbHMiLCJfZm9yZWlnbk1vZHVsZUZhY3RvcnkiLCJfZm9yZWlnbk1vZHVsZSIsIl9nZXRNb2RlbCIsIl9nZXRNb2RlbHMiLCJhbGwiLCJrZXlzIiwiYWNjZXB0TmV3TW9kZWwiLCJFT0wiLCJhY2NlcHRNb2RlbENoYW5nZWQiLCJzdHJVUkwiLCJhY2NlcHRSZW1vdmVkTW9kZWwiLCJvcmlnaW5hbFVybCIsIm1vZGlmaWVkVXJsIiwiaWdub3JlVHJpbVdoaXRlc3BhY2UiLCJpZGVudGljYWwiLCJfbW9kZWxzQXJlSWRlbnRpY2FsIiwib3JpZ2luYWxMaW5lQ291bnQiLCJjb21wdXRlTW9yZU1pbmltYWxFZGl0cyIsIm1vZGVsVXJsIiwiZWRpdHMiLCJsYXN0RW9sIiwic29ydCIsImNvbXBhcmVSYW5nZXNVc2luZ1N0YXJ0cyIsIl9kaWZmTGltaXQiLCJlZGl0T2Zmc2V0IiwibGlmdCIsIm5ld0VkaXQiLCJjb21wdXRlTGlua3MiLCJ0ZXh0dWFsU3VnZ2VzdCIsIm1vZGVsVXJscyIsImxlYWRpbmdXb3JkIiwid29yZERlZiIsIndvcmREZWZGbGFncyIsInN3Iiwid29yZERlZlJlZ0V4cCIsInNlZW4iLCJvdXRlciIsIl9zdWdnZXN0aW9uc0xpbWl0IiwiZHVyYXRpb24iLCJjb21wdXRlV29yZFJhbmdlcyIsImFycmF5Iiwic2VsZWN0aW9uVGV4dCIsIndvcmRSYW5nZSIsImxvYWRGb3JlaWduTW9kdWxlIiwiY3JlYXRlRGF0YSIsImZvcmVpZ25Ib3N0TWV0aG9kcyIsImN0eCIsImZociIsImdldE1pcnJvck1vZGVscyIsImZtciIsIm1vbmFjbyIsImVkaXRvciIsImxhbmd1YWdlcyIsIkNhbmNlbGxhdGlvblRva2VuU291cmNlIiwicGFyZW50IiwiX3Rva2VuIiwiX3BhcmVudExpc3RlbmVyIiwiVG9rZW4iLCJpbml0aWFsaXplZCIsImZvcmVpZ25Nb2R1bGUiLCJzaW1wbGVXb3JrZXIiXSwibWFwcGluZ3MiOiJtQkFDQSxJQUFJQSxFQUFzQixHQ0QxQkEsRUFBb0JDLEVBQUksV0FDdkIsR0FBMEIsaUJBQWZDLFdBQXlCLE9BQU9BLFdBQzNDLElBQ0MsT0FBT0MsTUFBUSxJQUFJQyxTQUFTLGNBQWIsR0FDZCxNQUFPQyxHQUNSLEdBQXNCLGlCQUFYQyxPQUFxQixPQUFPQSxRQUxqQixHQzJCakIsTUFBTUMsRUFBZSxJQTFCckIsTUFDSEMsY0FDSUwsS0FBS00sVUFBWSxHQUNqQk4sS0FBS08sdUJBQXlCLFNBQVVMLEdBQ3BDTSxZQUFXLEtBQ1AsR0FBSU4sRUFBRU8sTUFDRixNQUFNLElBQUlDLE1BQU1SLEVBQUVTLFFBQVUsT0FBU1QsRUFBRU8sT0FFM0MsTUFBTVAsSUFDUCxJQUdYVSxLQUFLVixHQUNERixLQUFLTSxVQUFVTyxTQUFTQyxJQUNwQkEsRUFBU1osTUFHakJhLGtCQUFrQmIsR0FDZEYsS0FBS08sdUJBQXVCTCxHQUM1QkYsS0FBS1ksS0FBS1YsR0FHZGMsMEJBQTBCZCxHQUN0QkYsS0FBS08sdUJBQXVCTCxLQUk3QixTQUFTYSxFQUFrQmIsR0FnQzNCLElBQWdDZSxLQTlCUGYsYUErQkpRLE9BQVNPLEVBQU1DLE9BQVNDLEdBQWdCRixFQUFNTixVQUFZUSxHQTlCOUVmLEVBQWFXLGtCQUFrQmIsR0FXaEMsU0FBU2tCLEVBQStCSCxHQUMzQyxHQUFJQSxhQUFpQlAsTUFBTyxDQUN4QixJQUFJLEtBQUVRLEVBQUksUUFBRVAsR0FBWU0sRUFFeEIsTUFBTyxDQUNISSxVQUFVLEVBQ1ZILE9BQ0FQLFVBQ0FGLE1BTFVRLEVBQU1LLFlBQWNMLEVBQU1SLE9BUzVDLE9BQU9RLEVBRVgsTUFBTUUsRUFBZSxXQ3BEZCxJQUFJSSxHQUNYLFNB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LEVBQVFBLEVBQWUsTUFBSSxJQUFNLFFBQ2pDQSxFQUFRQSxFQUFlLE1BQUksSUFBTSxRQUNqQ0EsRUFBUUEsRUFBZSxNQUFJLElBQU0sUUFDakNBLEVBQVFBLEVBQWUsTUFBSSxJQUFNLFFBQ2pDQSxFQUFRQSxFQUFlLE1BQUksSUFBTSxRQUNqQ0EsRUFBUUEsRUFBZSxNQUFJLElBQU0sUUFDakNBLEVBQVFBLEVBQWUsTUFBSSxJQUFNLFFBQ2pDQSxFQUFRQSxFQUFlLE1BQUksSUFBTSxRQUNqQ0EsRUFBUUEsRUFBZSxNQUFJLElBQU0sUUFDakNBLEVBQVFBLEVBQWUsTUFBSSxJQUFNLFFBQ2pDQSxFQUFRQSxFQUFlLE1BQUksSUFBTSxRQUNqQ0EsRUFBUUEsRUFBZSxNQUFJLElBQU0sUUFDakNBLEVBQVFBLEVBQWUsTUFBSSxJQUFNLFFBQ2pDQSxFQUFRQSxFQUFlLE1BQUksSUFBTSxRQUNqQ0EsRUFBUUEsRUFBZSxNQUFJLElBQU0sUUFDakNBLEVBQVFBLEVBQWUsTUFBSSxJQUFNLFFBQ2pDQSxFQUFRQSxFQUFlLE1BQUksSUFBTSxRQUNqQ0EsRUFBUUEsRUFBZSxNQUFJLElBQU0sUUFDakNBLEVBQVFBLEVBQWUsTUFBSSxJQUFNLFFBQ2pDQSxFQUFRQSxFQUFlLE1BQUksSUFBTSxRQUNqQ0EsRUFBUUEsRUFBZSxNQUFJLElBQU0sUUFDakNBLEVBQVFBLEVBQWUsTUFBSSxJQUFNLFFBQ2pDQSxFQUFRQSxFQUFlLE1BQUksSUFBTSxRQUNqQ0EsRUFBUUEsRUFBYyxLQUFJLElBQU0sT0FDaENBLEVBQVFBLEVBQXFCLFlBQUksSUFBTSxjQUN2Q0EsRUFBUUEsRUFBWSxHQUFJLElBQU0sS0FDOUJBLEVBQVFBLEVBQVksR0FBSSxJQUFNLEtBQzlCQSxFQUFRQSxFQUFZLEdBQUksSUFBTSxLQUM5QkEsRUFBUUEsRUFBWSxHQUFJLElBQU0sS0FDOUJBLEVBQVFBLEVBQVksR0FBSSxJQUFNLEtBQzlCQSxFQUFRQSxFQUFZLEdBQUksSUFBTSxLQUM5QkEsRUFBUUEsRUFBWSxHQUFJLElBQU0sS0FDOUJBLEVB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QU9BLEVBQ1o1SCxLQUFLNEksU0FBV0EsRUFFcEJrSSxXQUNJLE1BQU8sSUFBTTlRLEtBQUtvUyxPQUFTLEtBQU9wUyxLQUFLNEgsS0FBTyxRQ0x0RCxJQUFJdWhDLElBQWMsRUFhbEIzakMsS0FBS2tJLFVBQWF4TixJQUVUaXBDLElBZEYsU0FBb0JDLEdBQ3ZCLEdBQUlELEdBQ0EsT0FFSkEsSUFBYyxFQUNkLE1BQU1FLEVBQWUsSUFBSWg4QixHQUFvQlosSUFDekNqSCxLQUFLMEQsWUFBWXVELE1BQ2pCNDRCLEdBQVMsSUFBSUQsR0FBbUJDLEVBUXJCLFFBUGY3L0IsS0FBS2tJLFVBQWF4TixJQUNkbXBDLEVBQWEzN0IsVUFBVXhOLEVBQUVvSixPQU16QnFFLEsiLCJmaWxlIjoiZWRpdG9yLndvcmtlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIi8vIEF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY3kgb24gRXZlbnRFbWl0dGVyIGJ5IGltcGxlbWVudGluZyBhIHN1YnNldCBvZiB0aGUgaW50ZXJmYWNlLlxyXG5leHBvcnQgY2xhc3MgRXJyb3JIYW5kbGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0gW107XHJcbiAgICAgICAgdGhpcy51bmV4cGVjdGVkRXJyb3JIYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5zdGFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlLm1lc3NhZ2UgKyAnXFxuXFxuJyArIGUuc3RhY2spO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgICAgICAgICAgfSwgMCk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGVtaXQoZSkge1xyXG4gICAgICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PiB7XHJcbiAgICAgICAgICAgIGxpc3RlbmVyKGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgb25VbmV4cGVjdGVkRXJyb3IoZSkge1xyXG4gICAgICAgIHRoaXMudW5leHBlY3RlZEVycm9ySGFuZGxlcihlKTtcclxuICAgICAgICB0aGlzLmVtaXQoZSk7XHJcbiAgICB9XHJcbiAgICAvLyBGb3IgZXh0ZXJuYWwgZXJyb3JzLCB3ZSBkb24ndCB3YW50IHRoZSBsaXN0ZW5lcnMgdG8gYmUgY2FsbGVkXHJcbiAgICBvblVuZXhwZWN0ZWRFeHRlcm5hbEVycm9yKGUpIHtcclxuICAgICAgICB0aGlzLnVuZXhwZWN0ZWRFcnJvckhhbmRsZXIoZSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNvbnN0IGVycm9ySGFuZGxlciA9IG5ldyBFcnJvckhhbmRsZXIoKTtcclxuZXhwb3J0IGZ1bmN0aW9uIG9uVW5leHBlY3RlZEVycm9yKGUpIHtcclxuICAgIC8vIGlnbm9yZSBlcnJvcnMgZnJvbSBjYW5jZWxsZWQgcHJvbWlzZXNcclxuICAgIGlmICghaXNQcm9taXNlQ2FuY2VsZWRFcnJvcihlKSkge1xyXG4gICAgICAgIGVycm9ySGFuZGxlci5vblVuZXhwZWN0ZWRFcnJvcihlKTtcclxuICAgIH1cclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIG9uVW5leHBlY3RlZEV4dGVybmFsRXJyb3IoZSkge1xyXG4gICAgLy8gaWdub3JlIGVycm9ycyBmcm9tIGNhbmNlbGxlZCBwcm9taXNlc1xyXG4gICAgaWYgKCFpc1Byb21pc2VDYW5jZWxlZEVycm9yKGUpKSB7XHJcbiAgICAgICAgZXJyb3JIYW5kbGVyLm9uVW5leHBlY3RlZEV4dGVybmFsRXJyb3IoZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1FcnJvckZvclNlcmlhbGl6YXRpb24oZXJyb3IpIHtcclxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgbGV0IHsgbmFtZSwgbWVzc2FnZSB9ID0gZXJyb3I7XHJcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBlcnJvci5zdGFja3RyYWNlIHx8IGVycm9yLnN0YWNrO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICRpc0Vycm9yOiB0cnVlLFxyXG4gICAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgICBtZXNzYWdlLFxyXG4gICAgICAgICAgICBzdGFja1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvLyByZXR1cm4gYXMgaXNcclxuICAgIHJldHVybiBlcnJvcjtcclxufVxyXG5jb25zdCBjYW5jZWxlZE5hbWUgPSAnQ2FuY2VsZWQnO1xyXG4vKipcclxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBlcnJvciBpcyBhIHByb21pc2UgaW4gY2FuY2VsZWQgc3RhdGVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1Byb21pc2VDYW5jZWxlZEVycm9yKGVycm9yKSB7XHJcbiAgICByZXR1cm4gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiBlcnJvci5uYW1lID09PSBjYW5jZWxlZE5hbWUgJiYgZXJyb3IubWVzc2FnZSA9PT0gY2FuY2VsZWROYW1lO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIGVycm9yIHRoYXQgc2lnbmFscyBjYW5jZWxsYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2FuY2VsZWQoKSB7XHJcbiAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihjYW5jZWxlZE5hbWUpO1xyXG4gICAgZXJyb3IubmFtZSA9IGVycm9yLm1lc3NhZ2U7XHJcbiAgICByZXR1cm4gZXJyb3I7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGlsbGVnYWxBcmd1bWVudChuYW1lKSB7XHJcbiAgICBpZiAobmFtZSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoYElsbGVnYWwgYXJndW1lbnQ6ICR7bmFtZX1gKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0lsbGVnYWwgYXJndW1lbnQnKTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgZnVuY3Rpb24gaWxsZWdhbFN0YXRlKG5hbWUpIHtcclxuICAgIGlmIChuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihgSWxsZWdhbCBzdGF0ZTogJHtuYW1lfWApO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignSWxsZWdhbCBzdGF0ZScpO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5leHBvcnQgdmFyIEl0ZXJhYmxlO1xyXG4oZnVuY3Rpb24gKEl0ZXJhYmxlKSB7XHJcbiAgICBmdW5jdGlvbiBpcyh0aGluZykge1xyXG4gICAgICAgIHJldHVybiB0aGluZyAmJiB0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnICYmIHR5cGVvZiB0aGluZ1tTeW1ib2wuaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nO1xyXG4gICAgfVxyXG4gICAgSXRlcmFibGUuaXMgPSBpcztcclxuICAgIGNvbnN0IF9lbXB0eSA9IE9iamVjdC5mcmVlemUoW10pO1xyXG4gICAgZnVuY3Rpb24gZW1wdHkoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9lbXB0eTtcclxuICAgIH1cclxuICAgIEl0ZXJhYmxlLmVtcHR5ID0gZW1wdHk7XHJcbiAgICBmdW5jdGlvbiogc2luZ2xlKGVsZW1lbnQpIHtcclxuICAgICAgICB5aWVsZCBlbGVtZW50O1xyXG4gICAgfVxyXG4gICAgSXRlcmFibGUuc2luZ2xlID0gc2luZ2xlO1xyXG4gICAgZnVuY3Rpb24gZnJvbShpdGVyYWJsZSkge1xyXG4gICAgICAgIHJldHVybiBpdGVyYWJsZSB8fCBfZW1wdHk7XHJcbiAgICB9XHJcbiAgICBJdGVyYWJsZS5mcm9tID0gZnJvbTtcclxuICAgIGZ1bmN0aW9uIGlzRW1wdHkoaXRlcmFibGUpIHtcclxuICAgICAgICByZXR1cm4gIWl0ZXJhYmxlIHx8IGl0ZXJhYmxlW1N5bWJvbC5pdGVyYXRvcl0oKS5uZXh0KCkuZG9uZSA9PT0gdHJ1ZTtcclxuICAgIH1cclxuICAgIEl0ZXJhYmxlLmlzRW1wdHkgPSBpc0VtcHR5O1xyXG4gICAgZnVuY3Rpb24gZmlyc3QoaXRlcmFibGUpIHtcclxuICAgICAgICByZXR1cm4gaXRlcmFibGVbU3ltYm9sLml0ZXJhdG9yXSgpLm5leHQoKS52YWx1ZTtcclxuICAgIH1cclxuICAgIEl0ZXJhYmxlLmZpcnN0ID0gZmlyc3Q7XHJcbiAgICBmdW5jdGlvbiBzb21lKGl0ZXJhYmxlLCBwcmVkaWNhdGUpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgaXRlcmFibGUpIHtcclxuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZShlbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgSXRlcmFibGUuc29tZSA9IHNvbWU7XHJcbiAgICBmdW5jdGlvbiBmaW5kKGl0ZXJhYmxlLCBwcmVkaWNhdGUpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgaXRlcmFibGUpIHtcclxuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZShlbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIEl0ZXJhYmxlLmZpbmQgPSBmaW5kO1xyXG4gICAgZnVuY3Rpb24qIGZpbHRlcihpdGVyYWJsZSwgcHJlZGljYXRlKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGl0ZXJhYmxlKSB7XHJcbiAgICAgICAgICAgIGlmIChwcmVkaWNhdGUoZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgIHlpZWxkIGVsZW1lbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBJdGVyYWJsZS5maWx0ZXIgPSBmaWx0ZXI7XHJcbiAgICBmdW5jdGlvbiogbWFwKGl0ZXJhYmxlLCBmbikge1xyXG4gICAgICAgIGxldCBpbmRleCA9IDA7XHJcbiAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGl0ZXJhYmxlKSB7XHJcbiAgICAgICAgICAgIHlpZWxkIGZuKGVsZW1lbnQsIGluZGV4KyspO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIEl0ZXJhYmxlLm1hcCA9IG1hcDtcclxuICAgIGZ1bmN0aW9uKiBjb25jYXQoLi4uaXRlcmFibGVzKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBpdGVyYWJsZSBvZiBpdGVyYWJsZXMpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGl0ZXJhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICB5aWVsZCBlbGVtZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgSXRlcmFibGUuY29uY2F0ID0gY29uY2F0O1xyXG4gICAgZnVuY3Rpb24qIGNvbmNhdE5lc3RlZChpdGVyYWJsZXMpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGl0ZXJhYmxlIG9mIGl0ZXJhYmxlcykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgaXRlcmFibGUpIHtcclxuICAgICAgICAgICAgICAgIHlpZWxkIGVsZW1lbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBJdGVyYWJsZS5jb25jYXROZXN0ZWQgPSBjb25jYXROZXN0ZWQ7XHJcbiAgICBmdW5jdGlvbiByZWR1Y2UoaXRlcmFibGUsIHJlZHVjZXIsIGluaXRpYWxWYWx1ZSkge1xyXG4gICAgICAgIGxldCB2YWx1ZSA9IGluaXRpYWxWYWx1ZTtcclxuICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgaXRlcmFibGUpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSByZWR1Y2VyKHZhbHVlLCBlbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG4gICAgSXRlcmFibGUucmVkdWNlID0gcmVkdWNlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGFuIGl0ZXJhYmxlIHNsaWNlIG9mIHRoZSBhcnJheSwgd2l0aCB0aGUgc2FtZSBzZW1hbnRpY3MgYXMgYGFycmF5LnNsaWNlKClgLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiogc2xpY2UoYXJyLCBmcm9tLCB0byA9IGFyci5sZW5ndGgpIHtcclxuICAgICAgICBpZiAoZnJvbSA8IDApIHtcclxuICAgICAgICAgICAgZnJvbSArPSBhcnIubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodG8gPCAwKSB7XHJcbiAgICAgICAgICAgIHRvICs9IGFyci5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRvID4gYXJyLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0byA9IGFyci5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoOyBmcm9tIDwgdG87IGZyb20rKykge1xyXG4gICAgICAgICAgICB5aWVsZCBhcnJbZnJvbV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgSXRlcmFibGUuc2xpY2UgPSBzbGljZTtcclxuICAgIC8qKlxyXG4gICAgICogQ29uc3VtZXMgYGF0TW9zdGAgZWxlbWVudHMgZnJvbSBpdGVyYWJsZSBhbmQgcmV0dXJucyB0aGUgY29uc3VtZWQgZWxlbWVudHMsXHJcbiAgICAgKiBhbmQgYW4gaXRlcmFibGUgZm9yIHRoZSByZXN0IG9mIHRoZSBlbGVtZW50cy5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gY29uc3VtZShpdGVyYWJsZSwgYXRNb3N0ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKSB7XHJcbiAgICAgICAgY29uc3QgY29uc3VtZWQgPSBbXTtcclxuICAgICAgICBpZiAoYXRNb3N0ID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbY29uc3VtZWQsIGl0ZXJhYmxlXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaXRlcmF0b3IgPSBpdGVyYWJsZVtTeW1ib2wuaXRlcmF0b3JdKCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdE1vc3Q7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gaXRlcmF0b3IubmV4dCgpO1xyXG4gICAgICAgICAgICBpZiAobmV4dC5kb25lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW2NvbnN1bWVkLCBJdGVyYWJsZS5lbXB0eSgpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdW1lZC5wdXNoKG5leHQudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW2NvbnN1bWVkLCB7IFtTeW1ib2wuaXRlcmF0b3JdKCkgeyByZXR1cm4gaXRlcmF0b3I7IH0gfV07XHJcbiAgICB9XHJcbiAgICBJdGVyYWJsZS5jb25zdW1lID0gY29uc3VtZTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBpdGVyYWJsZXMgYXJlIHRoZSBzYW1lIGxlbmd0aCBhbmQgYWxsIGl0ZW1zIGFyZVxyXG4gICAgICogZXF1YWwgdXNpbmcgdGhlIGNvbXBhcmF0b3IgZnVuY3Rpb24uXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGVxdWFscyhhLCBiLCBjb21wYXJhdG9yID0gKGF0LCBidCkgPT4gYXQgPT09IGJ0KSB7XHJcbiAgICAgICAgY29uc3QgYWkgPSBhW1N5bWJvbC5pdGVyYXRvcl0oKTtcclxuICAgICAgICBjb25zdCBiaSA9IGJbU3ltYm9sLml0ZXJhdG9yXSgpO1xyXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFuID0gYWkubmV4dCgpO1xyXG4gICAgICAgICAgICBjb25zdCBibiA9IGJpLm5leHQoKTtcclxuICAgICAgICAgICAgaWYgKGFuLmRvbmUgIT09IGJuLmRvbmUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChhbi5kb25lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICghY29tcGFyYXRvcihhbi52YWx1ZSwgYm4udmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBJdGVyYWJsZS5lcXVhbHMgPSBlcXVhbHM7XHJcbn0pKEl0ZXJhYmxlIHx8IChJdGVyYWJsZSA9IHt9KSk7XHJcbiIsImltcG9ydCB7IEl0ZXJhYmxlIH0gZnJvbSAnLi9pdGVyYXRvci5qcyc7XHJcbi8qKlxyXG4gKiBFbmFibGVzIGxvZ2dpbmcgb2YgcG90ZW50aWFsbHkgbGVha2VkIGRpc3Bvc2FibGVzLlxyXG4gKlxyXG4gKiBBIGRpc3Bvc2FibGUgaXMgY29uc2lkZXJlZCBsZWFrZWQgaWYgaXQgaXMgbm90IGRpc3Bvc2VkIG9yIG5vdCByZWdpc3RlcmVkIGFzIHRoZSBjaGlsZCBvZlxyXG4gKiBhbm90aGVyIGRpc3Bvc2FibGUuIFRoaXMgdHJhY2tpbmcgaXMgdmVyeSBzaW1wbGUgYW4gb25seSB3b3JrcyBmb3IgY2xhc3NlcyB0aGF0IGVpdGhlclxyXG4gKiBleHRlbmQgRGlzcG9zYWJsZSBvciB1c2UgYSBEaXNwb3NhYmxlU3RvcmUuIFRoaXMgbWVhbnMgdGhlcmUgYXJlIGEgbG90IG9mIGZhbHNlIHBvc2l0aXZlcy5cclxuICovXHJcbmNvbnN0IFRSQUNLX0RJU1BPU0FCTEVTID0gZmFsc2U7XHJcbmxldCBkaXNwb3NhYmxlVHJhY2tlciA9IG51bGw7XHJcbmlmIChUUkFDS19ESVNQT1NBQkxFUykge1xyXG4gICAgY29uc3QgX19pc19kaXNwb3NhYmxlX3RyYWNrZWRfXyA9ICdfX2lzX2Rpc3Bvc2FibGVfdHJhY2tlZF9fJztcclxuICAgIGRpc3Bvc2FibGVUcmFja2VyID0gbmV3IGNsYXNzIHtcclxuICAgICAgICB0cmFja0Rpc3Bvc2FibGUoeCkge1xyXG4gICAgICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcignUG90ZW50aWFsbHkgbGVha2VkIGRpc3Bvc2FibGUnKS5zdGFjaztcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXhbX19pc19kaXNwb3NhYmxlX3RyYWNrZWRfX10pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzdGFjayk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIDMwMDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtYXJrVHJhY2tlZCh4KSB7XHJcbiAgICAgICAgICAgIGlmICh4ICYmIHggIT09IERpc3Bvc2FibGUuTm9uZSkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICB4W19faXNfZGlzcG9zYWJsZV90cmFja2VkX19dID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5vb3BcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gbWFya1RyYWNrZWQoeCkge1xyXG4gICAgaWYgKCFkaXNwb3NhYmxlVHJhY2tlcikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGRpc3Bvc2FibGVUcmFja2VyLm1hcmtUcmFja2VkKHgpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiB0cmFja0Rpc3Bvc2FibGUoeCkge1xyXG4gICAgaWYgKCFkaXNwb3NhYmxlVHJhY2tlcikge1xyXG4gICAgICAgIHJldHVybiB4O1xyXG4gICAgfVxyXG4gICAgZGlzcG9zYWJsZVRyYWNrZXIudHJhY2tEaXNwb3NhYmxlKHgpO1xyXG4gICAgcmV0dXJuIHg7XHJcbn1cclxuZXhwb3J0IGNsYXNzIE11bHRpRGlzcG9zZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IoZXJyb3JzKSB7XHJcbiAgICAgICAgc3VwZXIoYEVuY291bnRlcmVkIGVycm9ycyB3aGlsZSBkaXNwb3Npbmcgb2Ygc3RvcmUuIEVycm9yczogWyR7ZXJyb3JzLmpvaW4oJywgJyl9XWApO1xyXG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBpc0Rpc3Bvc2FibGUodGhpbmcpIHtcclxuICAgIHJldHVybiB0eXBlb2YgdGhpbmcuZGlzcG9zZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0aGluZy5kaXNwb3NlLmxlbmd0aCA9PT0gMDtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gZGlzcG9zZShhcmcpIHtcclxuICAgIGlmIChJdGVyYWJsZS5pcyhhcmcpKSB7XHJcbiAgICAgICAgbGV0IGVycm9ycyA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgZCBvZiBhcmcpIHtcclxuICAgICAgICAgICAgaWYgKGQpIHtcclxuICAgICAgICAgICAgICAgIG1hcmtUcmFja2VkKGQpO1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBkLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGVycm9ycy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgdGhyb3cgZXJyb3JzWzBdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChlcnJvcnMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgTXVsdGlEaXNwb3NlRXJyb3IoZXJyb3JzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKSA/IFtdIDogYXJnO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoYXJnKSB7XHJcbiAgICAgICAgbWFya1RyYWNrZWQoYXJnKTtcclxuICAgICAgICBhcmcuZGlzcG9zZSgpO1xyXG4gICAgICAgIHJldHVybiBhcmc7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVkRGlzcG9zYWJsZSguLi5kaXNwb3NhYmxlcykge1xyXG4gICAgZGlzcG9zYWJsZXMuZm9yRWFjaChtYXJrVHJhY2tlZCk7XHJcbiAgICByZXR1cm4gdG9EaXNwb3NhYmxlKCgpID0+IGRpc3Bvc2UoZGlzcG9zYWJsZXMpKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gdG9EaXNwb3NhYmxlKGZuKSB7XHJcbiAgICBjb25zdCBzZWxmID0gdHJhY2tEaXNwb3NhYmxlKHtcclxuICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIG1hcmtUcmFja2VkKHNlbGYpO1xyXG4gICAgICAgICAgICBmbigpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHNlbGY7XHJcbn1cclxuZXhwb3J0IGNsYXNzIERpc3Bvc2FibGVTdG9yZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLl90b0Rpc3Bvc2UgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgdGhpcy5faXNEaXNwb3NlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBEaXNwb3NlIG9mIGFsbCByZWdpc3RlcmVkIGRpc3Bvc2FibGVzIGFuZCBtYXJrIHRoaXMgb2JqZWN0IGFzIGRpc3Bvc2VkLlxyXG4gICAgICpcclxuICAgICAqIEFueSBmdXR1cmUgZGlzcG9zYWJsZXMgYWRkZWQgdG8gdGhpcyBvYmplY3Qgd2lsbCBiZSBkaXNwb3NlZCBvZiBvbiBgYWRkYC5cclxuICAgICAqL1xyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5faXNEaXNwb3NlZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1hcmtUcmFja2VkKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuX2lzRGlzcG9zZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuY2xlYXIoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRGlzcG9zZSBvZiBhbGwgcmVnaXN0ZXJlZCBkaXNwb3NhYmxlcyBidXQgZG8gbm90IG1hcmsgdGhpcyBvYmplY3QgYXMgZGlzcG9zZWQuXHJcbiAgICAgKi9cclxuICAgIGNsZWFyKCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGRpc3Bvc2UodGhpcy5fdG9EaXNwb3NlLnZhbHVlcygpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RvRGlzcG9zZS5jbGVhcigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGFkZCh0KSB7XHJcbiAgICAgICAgaWYgKCF0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodCA9PT0gdGhpcykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCByZWdpc3RlciBhIGRpc3Bvc2FibGUgb24gaXRzZWxmIScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtYXJrVHJhY2tlZCh0KTtcclxuICAgICAgICBpZiAodGhpcy5faXNEaXNwb3NlZCkge1xyXG4gICAgICAgICAgICBpZiAoIURpc3Bvc2FibGVTdG9yZS5ESVNBQkxFX0RJU1BPU0VEX1dBUk5JTkcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoJ1RyeWluZyB0byBhZGQgYSBkaXNwb3NhYmxlIHRvIGEgRGlzcG9zYWJsZVN0b3JlIHRoYXQgaGFzIGFscmVhZHkgYmVlbiBkaXNwb3NlZCBvZi4gVGhlIGFkZGVkIG9iamVjdCB3aWxsIGJlIGxlYWtlZCEnKS5zdGFjayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RvRGlzcG9zZS5hZGQodCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG59XHJcbkRpc3Bvc2FibGVTdG9yZS5ESVNBQkxFX0RJU1BPU0VEX1dBUk5JTkcgPSBmYWxzZTtcclxuZXhwb3J0IGNsYXNzIERpc3Bvc2FibGUge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5fc3RvcmUgPSBuZXcgRGlzcG9zYWJsZVN0b3JlKCk7XHJcbiAgICAgICAgdHJhY2tEaXNwb3NhYmxlKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgICBtYXJrVHJhY2tlZCh0aGlzKTtcclxuICAgICAgICB0aGlzLl9zdG9yZS5kaXNwb3NlKCk7XHJcbiAgICB9XHJcbiAgICBfcmVnaXN0ZXIodCkge1xyXG4gICAgICAgIGlmICh0ID09PSB0aGlzKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHJlZ2lzdGVyIGEgZGlzcG9zYWJsZSBvbiBpdHNlbGYhJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdG9yZS5hZGQodCk7XHJcbiAgICB9XHJcbn1cclxuRGlzcG9zYWJsZS5Ob25lID0gT2JqZWN0LmZyZWV6ZSh7IGRpc3Bvc2UoKSB7IH0gfSk7XHJcbi8qKlxyXG4gKiBNYW5hZ2VzIHRoZSBsaWZlY3ljbGUgb2YgYSBkaXNwb3NhYmxlIHZhbHVlIHRoYXQgbWF5IGJlIGNoYW5nZWQuXHJcbiAqXHJcbiAqIFRoaXMgZW5zdXJlcyB0aGF0IHdoZW4gdGhlIGRpc3Bvc2FibGUgdmFsdWUgaXMgY2hhbmdlZCwgdGhlIHByZXZpb3VzbHkgaGVsZCBkaXNwb3NhYmxlIGlzIGRpc3Bvc2VkIG9mLiBZb3UgY2FuXHJcbiAqIGFsc28gcmVnaXN0ZXIgYSBgTXV0YWJsZURpc3Bvc2FibGVgIG9uIGEgYERpc3Bvc2FibGVgIHRvIGVuc3VyZSBpdCBpcyBhdXRvbWF0aWNhbGx5IGNsZWFuZWQgdXAuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTXV0YWJsZURpc3Bvc2FibGUge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5faXNEaXNwb3NlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRyYWNrRGlzcG9zYWJsZSh0aGlzKTtcclxuICAgIH1cclxuICAgIGdldCB2YWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faXNEaXNwb3NlZCA/IHVuZGVmaW5lZCA6IHRoaXMuX3ZhbHVlO1xyXG4gICAgfVxyXG4gICAgc2V0IHZhbHVlKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGlmICh0aGlzLl9pc0Rpc3Bvc2VkIHx8IHZhbHVlID09PSB0aGlzLl92YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIChfYSA9IHRoaXMuX3ZhbHVlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGlzcG9zZSgpO1xyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBtYXJrVHJhY2tlZCh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBjbGVhcigpIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgdGhpcy5faXNEaXNwb3NlZCA9IHRydWU7XHJcbiAgICAgICAgbWFya1RyYWNrZWQodGhpcyk7XHJcbiAgICAgICAgKF9hID0gdGhpcy5fdmFsdWUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kaXNwb3NlKCk7XHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIEltbW9ydGFsUmVmZXJlbmNlIHtcclxuICAgIGNvbnN0cnVjdG9yKG9iamVjdCkge1xyXG4gICAgICAgIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xyXG4gICAgfVxyXG4gICAgZGlzcG9zZSgpIHsgfVxyXG59XHJcbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG52YXIgX2E7XHJcbmNvbnN0IExBTkdVQUdFX0RFRkFVTFQgPSAnZW4nO1xyXG5sZXQgX2lzV2luZG93cyA9IGZhbHNlO1xyXG5sZXQgX2lzTWFjaW50b3NoID0gZmFsc2U7XHJcbmxldCBfaXNMaW51eCA9IGZhbHNlO1xyXG5sZXQgX2lzTGludXhTbmFwID0gZmFsc2U7XHJcbmxldCBfaXNOYXRpdmUgPSBmYWxzZTtcclxubGV0IF9pc1dlYiA9IGZhbHNlO1xyXG5sZXQgX2lzSU9TID0gZmFsc2U7XHJcbmxldCBfbG9jYWxlID0gdW5kZWZpbmVkO1xyXG5sZXQgX2xhbmd1YWdlID0gTEFOR1VBR0VfREVGQVVMVDtcclxubGV0IF90cmFuc2xhdGlvbnNDb25maWdGaWxlID0gdW5kZWZpbmVkO1xyXG5sZXQgX3VzZXJBZ2VudCA9IHVuZGVmaW5lZDtcclxuZXhwb3J0IGNvbnN0IGdsb2JhbHMgPSAodHlwZW9mIHNlbGYgPT09ICdvYmplY3QnID8gc2VsZiA6IHR5cGVvZiBnbG9iYWwgPT09ICdvYmplY3QnID8gZ2xvYmFsIDoge30pO1xyXG5sZXQgbm9kZVByb2Nlc3MgPSB1bmRlZmluZWQ7XHJcbmlmICh0eXBlb2YgZ2xvYmFscy52c2NvZGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBnbG9iYWxzLnZzY29kZS5wcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgLy8gTmF0aXZlIGVudmlyb25tZW50IChzYW5kYm94ZWQpXHJcbiAgICBub2RlUHJvY2VzcyA9IGdsb2JhbHMudnNjb2RlLnByb2Nlc3M7XHJcbn1cclxuZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAvLyBOYXRpdmUgZW52aXJvbm1lbnQgKG5vbi1zYW5kYm94ZWQpXHJcbiAgICBub2RlUHJvY2VzcyA9IHByb2Nlc3M7XHJcbn1cclxuY29uc3QgaXNFbGVjdHJvblJlbmRlcmVyID0gdHlwZW9mICgoX2EgPSBub2RlUHJvY2VzcyA9PT0gbnVsbCB8fCBub2RlUHJvY2VzcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbm9kZVByb2Nlc3MudmVyc2lvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lbGVjdHJvbikgPT09ICdzdHJpbmcnICYmIG5vZGVQcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcic7XHJcbmV4cG9ydCBjb25zdCBpc0VsZWN0cm9uU2FuZGJveGVkID0gaXNFbGVjdHJvblJlbmRlcmVyICYmIChub2RlUHJvY2VzcyA9PT0gbnVsbCB8fCBub2RlUHJvY2VzcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbm9kZVByb2Nlc3Muc2FuZGJveGVkKTtcclxuZXhwb3J0IGNvbnN0IGJyb3dzZXJDb2RlTG9hZGluZ0NhY2hlU3RyYXRlZ3kgPSAoKCkgPT4ge1xyXG4gICAgLy8gQWx3YXlzIGVuYWJsZWQgd2hlbiBzYW5kYm94IGlzIGVuYWJsZWRcclxuICAgIGlmIChpc0VsZWN0cm9uU2FuZGJveGVkKSB7XHJcbiAgICAgICAgcmV0dXJuICdieXBhc3NIZWF0Q2hlY2snO1xyXG4gICAgfVxyXG4gICAgLy8gT3RoZXJ3aXNlLCBvbmx5IGVuYWJsZWQgY29uZGl0aW9uYWxseVxyXG4gICAgY29uc3QgZW52ID0gbm9kZVByb2Nlc3MgPT09IG51bGwgfHwgbm9kZVByb2Nlc3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5vZGVQcm9jZXNzLmVudlsnVlNDT0RFX0JST1dTRVJfQ09ERV9MT0FESU5HJ107XHJcbiAgICBpZiAodHlwZW9mIGVudiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICBpZiAoZW52ID09PSAnbm9uZScgfHwgZW52ID09PSAnY29kZScgfHwgZW52ID09PSAnYnlwYXNzSGVhdENoZWNrJyB8fCBlbnYgPT09ICdieXBhc3NIZWF0Q2hlY2tBbmRFYWdlckNvbXBpbGUnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlbnY7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAnYnlwYXNzSGVhdENoZWNrJztcclxuICAgIH1cclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbn0pKCk7XHJcbmV4cG9ydCBjb25zdCBpc1ByZWZlcnJpbmdCcm93c2VyQ29kZUxvYWQgPSB0eXBlb2YgYnJvd3NlckNvZGVMb2FkaW5nQ2FjaGVTdHJhdGVneSA9PT0gJ3N0cmluZyc7XHJcbi8vIFdlYiBlbnZpcm9ubWVudFxyXG5pZiAodHlwZW9mIG5hdmlnYXRvciA9PT0gJ29iamVjdCcgJiYgIWlzRWxlY3Ryb25SZW5kZXJlcikge1xyXG4gICAgX3VzZXJBZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XHJcbiAgICBfaXNXaW5kb3dzID0gX3VzZXJBZ2VudC5pbmRleE9mKCdXaW5kb3dzJykgPj0gMDtcclxuICAgIF9pc01hY2ludG9zaCA9IF91c2VyQWdlbnQuaW5kZXhPZignTWFjaW50b3NoJykgPj0gMDtcclxuICAgIF9pc0lPUyA9IChfdXNlckFnZW50LmluZGV4T2YoJ01hY2ludG9zaCcpID49IDAgfHwgX3VzZXJBZ2VudC5pbmRleE9mKCdpUGFkJykgPj0gMCB8fCBfdXNlckFnZW50LmluZGV4T2YoJ2lQaG9uZScpID49IDApICYmICEhbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzICYmIG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDA7XHJcbiAgICBfaXNMaW51eCA9IF91c2VyQWdlbnQuaW5kZXhPZignTGludXgnKSA+PSAwO1xyXG4gICAgX2lzV2ViID0gdHJ1ZTtcclxuICAgIF9sb2NhbGUgPSBuYXZpZ2F0b3IubGFuZ3VhZ2U7XHJcbiAgICBfbGFuZ3VhZ2UgPSBfbG9jYWxlO1xyXG59XHJcbi8vIE5hdGl2ZSBlbnZpcm9ubWVudFxyXG5lbHNlIGlmICh0eXBlb2Ygbm9kZVByb2Nlc3MgPT09ICdvYmplY3QnKSB7XHJcbiAgICBfaXNXaW5kb3dzID0gKG5vZGVQcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKTtcclxuICAgIF9pc01hY2ludG9zaCA9IChub2RlUHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ2RhcndpbicpO1xyXG4gICAgX2lzTGludXggPSAobm9kZVByb2Nlc3MucGxhdGZvcm0gPT09ICdsaW51eCcpO1xyXG4gICAgX2lzTGludXhTbmFwID0gX2lzTGludXggJiYgISFub2RlUHJvY2Vzcy5lbnZbJ1NOQVAnXSAmJiAhIW5vZGVQcm9jZXNzLmVudlsnU05BUF9SRVZJU0lPTiddO1xyXG4gICAgX2xvY2FsZSA9IExBTkdVQUdFX0RFRkFVTFQ7XHJcbiAgICBfbGFuZ3VhZ2UgPSBMQU5HVUFHRV9ERUZBVUxUO1xyXG4gICAgY29uc3QgcmF3TmxzQ29uZmlnID0gbm9kZVByb2Nlc3MuZW52WydWU0NPREVfTkxTX0NPTkZJRyddO1xyXG4gICAgaWYgKHJhd05sc0NvbmZpZykge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5sc0NvbmZpZyA9IEpTT04ucGFyc2UocmF3TmxzQ29uZmlnKTtcclxuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWQgPSBubHNDb25maWcuYXZhaWxhYmxlTGFuZ3VhZ2VzWycqJ107XHJcbiAgICAgICAgICAgIF9sb2NhbGUgPSBubHNDb25maWcubG9jYWxlO1xyXG4gICAgICAgICAgICAvLyBWU0NvZGUncyBkZWZhdWx0IGxhbmd1YWdlIGlzICdlbidcclxuICAgICAgICAgICAgX2xhbmd1YWdlID0gcmVzb2x2ZWQgPyByZXNvbHZlZCA6IExBTkdVQUdFX0RFRkFVTFQ7XHJcbiAgICAgICAgICAgIF90cmFuc2xhdGlvbnNDb25maWdGaWxlID0gbmxzQ29uZmlnLl90cmFuc2xhdGlvbnNDb25maWdGaWxlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIF9pc05hdGl2ZSA9IHRydWU7XHJcbn1cclxuLy8gVW5rbm93biBlbnZpcm9ubWVudFxyXG5lbHNlIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ1VuYWJsZSB0byByZXNvbHZlIHBsYXRmb3JtLicpO1xyXG59XHJcbmxldCBfcGxhdGZvcm0gPSAwIC8qIFdlYiAqLztcclxuaWYgKF9pc01hY2ludG9zaCkge1xyXG4gICAgX3BsYXRmb3JtID0gMSAvKiBNYWMgKi87XHJcbn1cclxuZWxzZSBpZiAoX2lzV2luZG93cykge1xyXG4gICAgX3BsYXRmb3JtID0gMyAvKiBXaW5kb3dzICovO1xyXG59XHJcbmVsc2UgaWYgKF9pc0xpbnV4KSB7XHJcbiAgICBfcGxhdGZvcm0gPSAyIC8qIExpbnV4ICovO1xyXG59XHJcbmV4cG9ydCBjb25zdCBpc1dpbmRvd3MgPSBfaXNXaW5kb3dzO1xyXG5leHBvcnQgY29uc3QgaXNNYWNpbnRvc2ggPSBfaXNNYWNpbnRvc2g7XHJcbmV4cG9ydCBjb25zdCBpc0xpbnV4ID0gX2lzTGludXg7XHJcbmV4cG9ydCBjb25zdCBpc05hdGl2ZSA9IF9pc05hdGl2ZTtcclxuZXhwb3J0IGNvbnN0IGlzV2ViID0gX2lzV2ViO1xyXG5leHBvcnQgY29uc3QgaXNJT1MgPSBfaXNJT1M7XHJcbmV4cG9ydCBjb25zdCB1c2VyQWdlbnQgPSBfdXNlckFnZW50O1xyXG5leHBvcnQgY29uc3Qgc2V0SW1tZWRpYXRlID0gKGZ1bmN0aW9uIGRlZmluZVNldEltbWVkaWF0ZSgpIHtcclxuICAgIGlmIChnbG9iYWxzLnNldEltbWVkaWF0ZSkge1xyXG4gICAgICAgIHJldHVybiBnbG9iYWxzLnNldEltbWVkaWF0ZS5iaW5kKGdsb2JhbHMpO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBnbG9iYWxzLnBvc3RNZXNzYWdlID09PSAnZnVuY3Rpb24nICYmICFnbG9iYWxzLmltcG9ydFNjcmlwdHMpIHtcclxuICAgICAgICBsZXQgcGVuZGluZyA9IFtdO1xyXG4gICAgICAgIGdsb2JhbHMuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlLmRhdGEgJiYgZS5kYXRhLnZzY29kZVNldEltbWVkaWF0ZUlkKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcGVuZGluZy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHBlbmRpbmdbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbmRpZGF0ZS5pZCA9PT0gZS5kYXRhLnZzY29kZVNldEltbWVkaWF0ZUlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmcuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGUuY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxldCBsYXN0SWQgPSAwO1xyXG4gICAgICAgIHJldHVybiAoY2FsbGJhY2spID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbXlJZCA9ICsrbGFzdElkO1xyXG4gICAgICAgICAgICBwZW5kaW5nLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgaWQ6IG15SWQsXHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2tcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGdsb2JhbHMucG9zdE1lc3NhZ2UoeyB2c2NvZGVTZXRJbW1lZGlhdGVJZDogbXlJZCB9LCAnKicpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIChub2RlUHJvY2VzcyA9PT0gbnVsbCB8fCBub2RlUHJvY2VzcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbm9kZVByb2Nlc3MubmV4dFRpY2spID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgcmV0dXJuIG5vZGVQcm9jZXNzLm5leHRUaWNrLmJpbmQobm9kZVByb2Nlc3MpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgX3Byb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIHJldHVybiAoY2FsbGJhY2spID0+IF9wcm9taXNlLnRoZW4oY2FsbGJhY2spO1xyXG59KSgpO1xyXG5leHBvcnQgY29uc3QgT1MgPSAoX2lzTWFjaW50b3NoIHx8IF9pc0lPUyA/IDIgLyogTWFjaW50b3NoICovIDogKF9pc1dpbmRvd3MgPyAxIC8qIFdpbmRvd3MgKi8gOiAzIC8qIExpbnV4ICovKSk7XHJcbmxldCBfaXNMaXR0bGVFbmRpYW4gPSB0cnVlO1xyXG5sZXQgX2lzTGl0dGxlRW5kaWFuQ29tcHV0ZWQgPSBmYWxzZTtcclxuZXhwb3J0IGZ1bmN0aW9uIGlzTGl0dGxlRW5kaWFuKCkge1xyXG4gICAgaWYgKCFfaXNMaXR0bGVFbmRpYW5Db21wdXRlZCkge1xyXG4gICAgICAgIF9pc0xpdHRsZUVuZGlhbkNvbXB1dGVkID0gdHJ1ZTtcclxuICAgICAgICBjb25zdCB0ZXN0ID0gbmV3IFVpbnQ4QXJyYXkoMik7XHJcbiAgICAgICAgdGVzdFswXSA9IDE7XHJcbiAgICAgICAgdGVzdFsxXSA9IDI7XHJcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBVaW50MTZBcnJheSh0ZXN0LmJ1ZmZlcik7XHJcbiAgICAgICAgX2lzTGl0dGxlRW5kaWFuID0gKHZpZXdbMF0gPT09ICgyIDw8IDgpICsgMSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX2lzTGl0dGxlRW5kaWFuO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXIgaXMgYSBKYXZhU2NyaXB0IEFycmF5IG9yIG5vdC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0FycmF5KGFycmF5KSB7XHJcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhcnJheSk7XHJcbn1cclxuLyoqXHJcbiAqIEByZXR1cm5zIHdoZXRoZXIgdGhlIHByb3ZpZGVkIHBhcmFtZXRlciBpcyBhIEphdmFTY3JpcHQgU3RyaW5nIG9yIG5vdC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZyhzdHIpIHtcclxuICAgIHJldHVybiAodHlwZW9mIHN0ciA9PT0gJ3N0cmluZycpO1xyXG59XHJcbi8qKlxyXG4gKlxyXG4gKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXIgaXMgb2YgdHlwZSBgb2JqZWN0YCBidXQgKipub3QqKlxyXG4gKlx0YG51bGxgLCBhbiBgYXJyYXlgLCBhIGByZWdleHBgLCBub3IgYSBgZGF0ZWAuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XHJcbiAgICAvLyBUaGUgbWV0aG9kIGNhbid0IGRvIGEgdHlwZSBjYXN0IHNpbmNlIHRoZXJlIGFyZSB0eXBlIChsaWtlIHN0cmluZ3MpIHdoaWNoXHJcbiAgICAvLyBhcmUgc3ViY2xhc3NlcyBvZiBhbnkgcHV0IG5vdCBwb3NpdHZlbHkgbWF0Y2hlZCBieSB0aGUgZnVuY3Rpb24uIEhlbmNlIHR5cGVcclxuICAgIC8vIG5hcnJvd2luZyByZXN1bHRzIGluIHdyb25nIHJlc3VsdHMuXHJcbiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcclxuICAgICAgICAmJiBvYmogIT09IG51bGxcclxuICAgICAgICAmJiAhQXJyYXkuaXNBcnJheShvYmopXHJcbiAgICAgICAgJiYgIShvYmogaW5zdGFuY2VvZiBSZWdFeHApXHJcbiAgICAgICAgJiYgIShvYmogaW5zdGFuY2VvZiBEYXRlKTtcclxufVxyXG4vKipcclxuICogSW4gKipjb250cmFzdCoqIHRvIGp1c3QgY2hlY2tpbmcgYHR5cGVvZmAgdGhpcyB3aWxsIHJldHVybiBgZmFsc2VgIGZvciBgTmFOYC5cclxuICogQHJldHVybnMgd2hldGhlciB0aGUgcHJvdmlkZWQgcGFyYW1ldGVyIGlzIGEgSmF2YVNjcmlwdCBOdW1iZXIgb3Igbm90LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyKG9iaikge1xyXG4gICAgcmV0dXJuICh0eXBlb2Ygb2JqID09PSAnbnVtYmVyJyAmJiAhaXNOYU4ob2JqKSk7XHJcbn1cclxuLyoqXHJcbiAqIEByZXR1cm5zIHdoZXRoZXIgdGhlIHByb3ZpZGVkIHBhcmFtZXRlciBpcyBhIEphdmFTY3JpcHQgQm9vbGVhbiBvciBub3QuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNCb29sZWFuKG9iaikge1xyXG4gICAgcmV0dXJuIChvYmogPT09IHRydWUgfHwgb2JqID09PSBmYWxzZSk7XHJcbn1cclxuLyoqXHJcbiAqIEByZXR1cm5zIHdoZXRoZXIgdGhlIHByb3ZpZGVkIHBhcmFtZXRlciBpcyB1bmRlZmluZWQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNVbmRlZmluZWQob2JqKSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKTtcclxufVxyXG4vKipcclxuICogQHJldHVybnMgd2hldGhlciB0aGUgcHJvdmlkZWQgcGFyYW1ldGVyIGlzIHVuZGVmaW5lZCBvciBudWxsLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzVW5kZWZpbmVkT3JOdWxsKG9iaikge1xyXG4gICAgcmV0dXJuIChpc1VuZGVmaW5lZChvYmopIHx8IG9iaiA9PT0gbnVsbCk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFR5cGUoY29uZGl0aW9uLCB0eXBlKSB7XHJcbiAgICBpZiAoIWNvbmRpdGlvbikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcih0eXBlID8gYFVuZXhwZWN0ZWQgdHlwZSwgZXhwZWN0ZWQgJyR7dHlwZX0nYCA6ICdVbmV4cGVjdGVkIHR5cGUnKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQXNzZXJ0cyB0aGF0IHRoZSBhcmd1bWVudCBwYXNzZWQgaW4gaXMgbmVpdGhlciB1bmRlZmluZWQgbm9yIG51bGwuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0SXNEZWZpbmVkKGFyZykge1xyXG4gICAgaWYgKGlzVW5kZWZpbmVkT3JOdWxsKGFyZykpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Fzc2VydGlvbiBGYWlsZWQ6IGFyZ3VtZW50IGlzIHVuZGVmaW5lZCBvciBudWxsJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXJnO1xyXG59XHJcbi8qKlxyXG4gKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXIgaXMgYSBKYXZhU2NyaXB0IEZ1bmN0aW9uIG9yIG5vdC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKG9iaikge1xyXG4gICAgcmV0dXJuICh0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVDb25zdHJhaW50cyhhcmdzLCBjb25zdHJhaW50cykge1xyXG4gICAgY29uc3QgbGVuID0gTWF0aC5taW4oYXJncy5sZW5ndGgsIGNvbnN0cmFpbnRzLmxlbmd0aCk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgdmFsaWRhdGVDb25zdHJhaW50KGFyZ3NbaV0sIGNvbnN0cmFpbnRzW2ldKTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVDb25zdHJhaW50KGFyZywgY29uc3RyYWludCkge1xyXG4gICAgaWYgKGlzU3RyaW5nKGNvbnN0cmFpbnQpKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBhcmcgIT09IGNvbnN0cmFpbnQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBhcmd1bWVudCBkb2VzIG5vdCBtYXRjaCBjb25zdHJhaW50OiB0eXBlb2YgJHtjb25zdHJhaW50fWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24oY29uc3RyYWludCkpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAoYXJnIGluc3RhbmNlb2YgY29uc3RyYWludCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChfYSkge1xyXG4gICAgICAgICAgICAvLyBpZ25vcmVcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZE9yTnVsbChhcmcpICYmIGFyZy5jb25zdHJ1Y3RvciA9PT0gY29uc3RyYWludCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb25zdHJhaW50Lmxlbmd0aCA9PT0gMSAmJiBjb25zdHJhaW50LmNhbGwodW5kZWZpbmVkLCBhcmcpID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBhcmd1bWVudCBkb2VzIG5vdCBtYXRjaCBvbmUgb2YgdGhlc2UgY29uc3RyYWludHM6IGFyZyBpbnN0YW5jZW9mIGNvbnN0cmFpbnQsIGFyZy5jb25zdHJ1Y3RvciA9PT0gY29uc3RyYWludCwgbm9yIGNvbnN0cmFpbnQoYXJnKSA9PT0gdHJ1ZWApO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGxQcm9wZXJ0eU5hbWVzKG9iaikge1xyXG4gICAgbGV0IHJlcyA9IFtdO1xyXG4gICAgbGV0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaik7XHJcbiAgICB3aGlsZSAoT2JqZWN0LnByb3RvdHlwZSAhPT0gcHJvdG8pIHtcclxuICAgICAgICByZXMgPSByZXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHByb3RvKSk7XHJcbiAgICAgICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWxsTWV0aG9kTmFtZXMob2JqKSB7XHJcbiAgICBjb25zdCBtZXRob2RzID0gW107XHJcbiAgICBmb3IgKGNvbnN0IHByb3Agb2YgZ2V0QWxsUHJvcGVydHlOYW1lcyhvYmopKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvYmpbcHJvcF0gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgbWV0aG9kcy5wdXNoKHByb3ApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBtZXRob2RzO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm94eU9iamVjdChtZXRob2ROYW1lcywgaW52b2tlKSB7XHJcbiAgICBjb25zdCBjcmVhdGVQcm94eU1ldGhvZCA9IChtZXRob2QpID0+IHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcclxuICAgICAgICAgICAgcmV0dXJuIGludm9rZShtZXRob2QsIGFyZ3MpO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgbGV0IHJlc3VsdCA9IHt9O1xyXG4gICAgZm9yIChjb25zdCBtZXRob2ROYW1lIG9mIG1ldGhvZE5hbWVzKSB7XHJcbiAgICAgICAgcmVzdWx0W21ldGhvZE5hbWVdID0gY3JlYXRlUHJveHlNZXRob2QobWV0aG9kTmFtZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBudWxsIHRvIHVuZGVmaW5lZCwgcGFzc2VzIGFsbCBvdGhlciB2YWx1ZXMgdGhyb3VnaC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB3aXRoTnVsbEFzVW5kZWZpbmVkKHgpIHtcclxuICAgIHJldHVybiB4ID09PSBudWxsID8gdW5kZWZpbmVkIDogeDtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0TmV2ZXIodmFsdWUpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignVW5yZWFjaGFibGUnKTtcclxufVxyXG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuaW1wb3J0IHsgdHJhbnNmb3JtRXJyb3JGb3JTZXJpYWxpemF0aW9uIH0gZnJvbSAnLi4vZXJyb3JzLmpzJztcclxuaW1wb3J0IHsgRGlzcG9zYWJsZSB9IGZyb20gJy4uL2xpZmVjeWNsZS5qcyc7XHJcbmltcG9ydCB7IGlzV2ViIH0gZnJvbSAnLi4vcGxhdGZvcm0uanMnO1xyXG5pbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuLi90eXBlcy5qcyc7XHJcbmNvbnN0IElOSVRJQUxJWkUgPSAnJGluaXRpYWxpemUnO1xyXG5sZXQgd2ViV29ya2VyV2FybmluZ0xvZ2dlZCA9IGZhbHNlO1xyXG5leHBvcnQgZnVuY3Rpb24gbG9nT25jZVdlYldvcmtlcldhcm5pbmcoZXJyKSB7XHJcbiAgICBpZiAoIWlzV2ViKSB7XHJcbiAgICAgICAgLy8gcnVubmluZyB0ZXN0c1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICghd2ViV29ya2VyV2FybmluZ0xvZ2dlZCkge1xyXG4gICAgICAgIHdlYldvcmtlcldhcm5pbmdMb2dnZWQgPSB0cnVlO1xyXG4gICAgICAgIGNvbnNvbGUud2FybignQ291bGQgbm90IGNyZWF0ZSB3ZWIgd29ya2VyKHMpLiBGYWxsaW5nIGJhY2sgdG8gbG9hZGluZyB3ZWIgd29ya2VyIGNvZGUgaW4gbWFpbiB0aHJlYWQsIHdoaWNoIG1pZ2h0IGNhdXNlIFVJIGZyZWV6ZXMuIFBsZWFzZSBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9tb25hY28tZWRpdG9yI2ZhcScpO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS53YXJuKGVyci5tZXNzYWdlKTtcclxufVxyXG5jbGFzcyBTaW1wbGVXb3JrZXJQcm90b2NvbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihoYW5kbGVyKSB7XHJcbiAgICAgICAgdGhpcy5fd29ya2VySWQgPSAtMTtcclxuICAgICAgICB0aGlzLl9oYW5kbGVyID0gaGFuZGxlcjtcclxuICAgICAgICB0aGlzLl9sYXN0U2VudFJlcSA9IDA7XHJcbiAgICAgICAgdGhpcy5fcGVuZGluZ1JlcGxpZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgfVxyXG4gICAgc2V0V29ya2VySWQod29ya2VySWQpIHtcclxuICAgICAgICB0aGlzLl93b3JrZXJJZCA9IHdvcmtlcklkO1xyXG4gICAgfVxyXG4gICAgc2VuZE1lc3NhZ2UobWV0aG9kLCBhcmdzKSB7XHJcbiAgICAgICAgbGV0IHJlcSA9IFN0cmluZygrK3RoaXMuX2xhc3RTZW50UmVxKTtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9wZW5kaW5nUmVwbGllc1tyZXFdID0ge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZTogcmVzb2x2ZSxcclxuICAgICAgICAgICAgICAgIHJlamVjdDogcmVqZWN0XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuX3NlbmQoe1xyXG4gICAgICAgICAgICAgICAgdnNXb3JrZXI6IHRoaXMuX3dvcmtlcklkLFxyXG4gICAgICAgICAgICAgICAgcmVxOiByZXEsXHJcbiAgICAgICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcclxuICAgICAgICAgICAgICAgIGFyZ3M6IGFyZ3NcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVNZXNzYWdlKG1lc3NhZ2UpIHtcclxuICAgICAgICBpZiAoIW1lc3NhZ2UgfHwgIW1lc3NhZ2UudnNXb3JrZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fd29ya2VySWQgIT09IC0xICYmIG1lc3NhZ2UudnNXb3JrZXIgIT09IHRoaXMuX3dvcmtlcklkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5faGFuZGxlTWVzc2FnZShtZXNzYWdlKTtcclxuICAgIH1cclxuICAgIF9oYW5kbGVNZXNzYWdlKG1zZykge1xyXG4gICAgICAgIGlmIChtc2cuc2VxKSB7XHJcbiAgICAgICAgICAgIGxldCByZXBseU1lc3NhZ2UgPSBtc2c7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fcGVuZGluZ1JlcGxpZXNbcmVwbHlNZXNzYWdlLnNlcV0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignR290IHJlcGx5IHRvIHVua25vd24gc2VxJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHJlcGx5ID0gdGhpcy5fcGVuZGluZ1JlcGxpZXNbcmVwbHlNZXNzYWdlLnNlcV07XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9wZW5kaW5nUmVwbGllc1tyZXBseU1lc3NhZ2Uuc2VxXTtcclxuICAgICAgICAgICAgaWYgKHJlcGx5TWVzc2FnZS5lcnIpIHtcclxuICAgICAgICAgICAgICAgIGxldCBlcnIgPSByZXBseU1lc3NhZ2UuZXJyO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlcGx5TWVzc2FnZS5lcnIuJGlzRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBlcnIgPSBuZXcgRXJyb3IoKTtcclxuICAgICAgICAgICAgICAgICAgICBlcnIubmFtZSA9IHJlcGx5TWVzc2FnZS5lcnIubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBlcnIubWVzc2FnZSA9IHJlcGx5TWVzc2FnZS5lcnIubWVzc2FnZTtcclxuICAgICAgICAgICAgICAgICAgICBlcnIuc3RhY2sgPSByZXBseU1lc3NhZ2UuZXJyLnN0YWNrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVwbHkucmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVwbHkucmVzb2x2ZShyZXBseU1lc3NhZ2UucmVzKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcmVxdWVzdE1lc3NhZ2UgPSBtc2c7XHJcbiAgICAgICAgbGV0IHJlcSA9IHJlcXVlc3RNZXNzYWdlLnJlcTtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5faGFuZGxlci5oYW5kbGVNZXNzYWdlKHJlcXVlc3RNZXNzYWdlLm1ldGhvZCwgcmVxdWVzdE1lc3NhZ2UuYXJncyk7XHJcbiAgICAgICAgcmVzdWx0LnRoZW4oKHIpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fc2VuZCh7XHJcbiAgICAgICAgICAgICAgICB2c1dvcmtlcjogdGhpcy5fd29ya2VySWQsXHJcbiAgICAgICAgICAgICAgICBzZXE6IHJlcSxcclxuICAgICAgICAgICAgICAgIHJlczogcixcclxuICAgICAgICAgICAgICAgIGVycjogdW5kZWZpbmVkXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sIChlKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlLmRldGFpbCBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBMb2FkaW5nIGVycm9ycyBoYXZlIGEgZGV0YWlsIHByb3BlcnR5IHRoYXQgcG9pbnRzIHRvIHRoZSBhY3R1YWwgZXJyb3JcclxuICAgICAgICAgICAgICAgIGUuZGV0YWlsID0gdHJhbnNmb3JtRXJyb3JGb3JTZXJpYWxpemF0aW9uKGUuZGV0YWlsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9zZW5kKHtcclxuICAgICAgICAgICAgICAgIHZzV29ya2VyOiB0aGlzLl93b3JrZXJJZCxcclxuICAgICAgICAgICAgICAgIHNlcTogcmVxLFxyXG4gICAgICAgICAgICAgICAgcmVzOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBlcnI6IHRyYW5zZm9ybUVycm9yRm9yU2VyaWFsaXphdGlvbihlKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIF9zZW5kKG1zZykge1xyXG4gICAgICAgIGxldCB0cmFuc2ZlciA9IFtdO1xyXG4gICAgICAgIGlmIChtc2cucmVxKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG0gPSBtc2c7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbS5hcmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobS5hcmdzW2ldIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zlci5wdXNoKG0uYXJnc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG0gPSBtc2c7XHJcbiAgICAgICAgICAgIGlmIChtLnJlcyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zlci5wdXNoKG0ucmVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9oYW5kbGVyLnNlbmRNZXNzYWdlKG1zZywgdHJhbnNmZXIpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBNYWluIHRocmVhZCBzaWRlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2ltcGxlV29ya2VyQ2xpZW50IGV4dGVuZHMgRGlzcG9zYWJsZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih3b3JrZXJGYWN0b3J5LCBtb2R1bGVJZCwgaG9zdCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgbGV0IGxhenlQcm94eVJlamVjdCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fd29ya2VyID0gdGhpcy5fcmVnaXN0ZXIod29ya2VyRmFjdG9yeS5jcmVhdGUoJ3ZzL2Jhc2UvY29tbW9uL3dvcmtlci9zaW1wbGVXb3JrZXInLCAobXNnKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Byb3RvY29sLmhhbmRsZU1lc3NhZ2UobXNnKTtcclxuICAgICAgICB9LCAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGluIEZpcmVmb3gsIHdlYiB3b3JrZXJzIGZhaWwgbGF6aWx5IDooXHJcbiAgICAgICAgICAgIC8vIHdlIHdpbGwgcmVqZWN0IHRoZSBwcm94eVxyXG4gICAgICAgICAgICBpZiAobGF6eVByb3h5UmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBsYXp5UHJveHlSZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICB0aGlzLl9wcm90b2NvbCA9IG5ldyBTaW1wbGVXb3JrZXJQcm90b2NvbCh7XHJcbiAgICAgICAgICAgIHNlbmRNZXNzYWdlOiAobXNnLCB0cmFuc2ZlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd29ya2VyLnBvc3RNZXNzYWdlKG1zZywgdHJhbnNmZXIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBoYW5kbGVNZXNzYWdlOiAobWV0aG9kLCBhcmdzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGhvc3RbbWV0aG9kXSAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ01pc3NpbmcgbWV0aG9kICcgKyBtZXRob2QgKyAnIG9uIG1haW4gdGhyZWFkIGhvc3QuJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGhvc3RbbWV0aG9kXS5hcHBseShob3N0LCBhcmdzKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX3Byb3RvY29sLnNldFdvcmtlcklkKHRoaXMuX3dvcmtlci5nZXRJZCgpKTtcclxuICAgICAgICAvLyBHYXRoZXIgbG9hZGVyIGNvbmZpZ3VyYXRpb25cclxuICAgICAgICBsZXQgbG9hZGVyQ29uZmlndXJhdGlvbiA9IG51bGw7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzZWxmLnJlcXVpcmUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBzZWxmLnJlcXVpcmUuZ2V0Q29uZmlnID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIC8vIEdldCB0aGUgY29uZmlndXJhdGlvbiBmcm9tIHRoZSBNb25hY28gQU1EIExvYWRlclxyXG4gICAgICAgICAgICBsb2FkZXJDb25maWd1cmF0aW9uID0gc2VsZi5yZXF1aXJlLmdldENvbmZpZygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlb2Ygc2VsZi5yZXF1aXJlanMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIC8vIEdldCB0aGUgY29uZmlndXJhdGlvbiBmcm9tIHJlcXVpcmVqc1xyXG4gICAgICAgICAgICBsb2FkZXJDb25maWd1cmF0aW9uID0gc2VsZi5yZXF1aXJlanMucy5jb250ZXh0cy5fLmNvbmZpZztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaG9zdE1ldGhvZHMgPSB0eXBlcy5nZXRBbGxNZXRob2ROYW1lcyhob3N0KTtcclxuICAgICAgICAvLyBTZW5kIGluaXRpYWxpemUgbWVzc2FnZVxyXG4gICAgICAgIHRoaXMuX29uTW9kdWxlTG9hZGVkID0gdGhpcy5fcHJvdG9jb2wuc2VuZE1lc3NhZ2UoSU5JVElBTElaRSwgW1xyXG4gICAgICAgICAgICB0aGlzLl93b3JrZXIuZ2V0SWQoKSxcclxuICAgICAgICAgICAgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShsb2FkZXJDb25maWd1cmF0aW9uKSksXHJcbiAgICAgICAgICAgIG1vZHVsZUlkLFxyXG4gICAgICAgICAgICBob3N0TWV0aG9kcyxcclxuICAgICAgICBdKTtcclxuICAgICAgICAvLyBDcmVhdGUgcHJveHkgdG8gbG9hZGVkIGNvZGVcclxuICAgICAgICBjb25zdCBwcm94eU1ldGhvZFJlcXVlc3QgPSAobWV0aG9kLCBhcmdzKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KG1ldGhvZCwgYXJncyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLl9sYXp5UHJveHkgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGxhenlQcm94eVJlamVjdCA9IHJlamVjdDtcclxuICAgICAgICAgICAgdGhpcy5fb25Nb2R1bGVMb2FkZWQudGhlbigoYXZhaWxhYmxlTWV0aG9kcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0eXBlcy5jcmVhdGVQcm94eU9iamVjdChhdmFpbGFibGVNZXRob2RzLCBwcm94eU1ldGhvZFJlcXVlc3QpKTtcclxuICAgICAgICAgICAgfSwgKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29uRXJyb3IoJ1dvcmtlciBmYWlsZWQgdG8gbG9hZCAnICsgbW9kdWxlSWQsIGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGdldFByb3h5T2JqZWN0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9sYXp5UHJveHk7XHJcbiAgICB9XHJcbiAgICBfcmVxdWVzdChtZXRob2QsIGFyZ3MpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9vbk1vZHVsZUxvYWRlZC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Byb3RvY29sLnNlbmRNZXNzYWdlKG1ldGhvZCwgYXJncykudGhlbihyZXNvbHZlLCByZWplY3QpO1xyXG4gICAgICAgICAgICB9LCByZWplY3QpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgX29uRXJyb3IobWVzc2FnZSwgZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xyXG4gICAgICAgIGNvbnNvbGUuaW5mbyhlcnJvcik7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFdvcmtlciBzaWRlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2ltcGxlV29ya2VyU2VydmVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHBvc3RNZXNzYWdlLCByZXF1ZXN0SGFuZGxlckZhY3RvcnkpIHtcclxuICAgICAgICB0aGlzLl9yZXF1ZXN0SGFuZGxlckZhY3RvcnkgPSByZXF1ZXN0SGFuZGxlckZhY3Rvcnk7XHJcbiAgICAgICAgdGhpcy5fcmVxdWVzdEhhbmRsZXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX3Byb3RvY29sID0gbmV3IFNpbXBsZVdvcmtlclByb3RvY29sKHtcclxuICAgICAgICAgICAgc2VuZE1lc3NhZ2U6IChtc2csIHRyYW5zZmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZShtc2csIHRyYW5zZmVyKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaGFuZGxlTWVzc2FnZTogKG1ldGhvZCwgYXJncykgPT4gdGhpcy5faGFuZGxlTWVzc2FnZShtZXRob2QsIGFyZ3MpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBvbm1lc3NhZ2UobXNnKSB7XHJcbiAgICAgICAgdGhpcy5fcHJvdG9jb2wuaGFuZGxlTWVzc2FnZShtc2cpO1xyXG4gICAgfVxyXG4gICAgX2hhbmRsZU1lc3NhZ2UobWV0aG9kLCBhcmdzKSB7XHJcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gSU5JVElBTElaRSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbml0aWFsaXplKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuX3JlcXVlc3RIYW5kbGVyIHx8IHR5cGVvZiB0aGlzLl9yZXF1ZXN0SGFuZGxlclttZXRob2RdICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ01pc3NpbmcgcmVxdWVzdEhhbmRsZXIgb3IgbWV0aG9kOiAnICsgbWV0aG9kKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fcmVxdWVzdEhhbmRsZXJbbWV0aG9kXS5hcHBseSh0aGlzLl9yZXF1ZXN0SGFuZGxlciwgYXJncykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaW5pdGlhbGl6ZSh3b3JrZXJJZCwgbG9hZGVyQ29uZmlnLCBtb2R1bGVJZCwgaG9zdE1ldGhvZHMpIHtcclxuICAgICAgICB0aGlzLl9wcm90b2NvbC5zZXRXb3JrZXJJZCh3b3JrZXJJZCk7XHJcbiAgICAgICAgY29uc3QgcHJveHlNZXRob2RSZXF1ZXN0ID0gKG1ldGhvZCwgYXJncykgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJvdG9jb2wuc2VuZE1lc3NhZ2UobWV0aG9kLCBhcmdzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGhvc3RQcm94eSA9IHR5cGVzLmNyZWF0ZVByb3h5T2JqZWN0KGhvc3RNZXRob2RzLCBwcm94eU1ldGhvZFJlcXVlc3QpO1xyXG4gICAgICAgIGlmICh0aGlzLl9yZXF1ZXN0SGFuZGxlckZhY3RvcnkpIHtcclxuICAgICAgICAgICAgLy8gc3RhdGljIHJlcXVlc3QgaGFuZGxlclxyXG4gICAgICAgICAgICB0aGlzLl9yZXF1ZXN0SGFuZGxlciA9IHRoaXMuX3JlcXVlc3RIYW5kbGVyRmFjdG9yeShob3N0UHJveHkpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHR5cGVzLmdldEFsbE1ldGhvZE5hbWVzKHRoaXMuX3JlcXVlc3RIYW5kbGVyKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsb2FkZXJDb25maWcpIHtcclxuICAgICAgICAgICAgLy8gUmVtb3ZlICdiYXNlVXJsJywgaGFuZGxpbmcgaXQgaXMgYmV5b25kIHNjb3BlIGZvciBub3dcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBsb2FkZXJDb25maWcuYmFzZVVybCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBsb2FkZXJDb25maWdbJ2Jhc2VVcmwnXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGxvYWRlckNvbmZpZy5wYXRocyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbG9hZGVyQ29uZmlnLnBhdGhzLnZzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBsb2FkZXJDb25maWcucGF0aHNbJ3ZzJ107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBsb2FkZXJDb25maWcudHJ1c3RlZFR5cGVzUG9saWN5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIGRvbid0IHVzZSwgaXQgaGFzIGJlZW4gZGVzdHJveWVkIGR1cmluZyBzZXJpYWxpemVcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBsb2FkZXJDb25maWdbJ3RydXN0ZWRUeXBlc1BvbGljeSddO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFNpbmNlIHRoaXMgaXMgaW4gYSB3ZWIgd29ya2VyLCBlbmFibGUgY2F0Y2hpbmcgZXJyb3JzXHJcbiAgICAgICAgICAgIGxvYWRlckNvbmZpZy5jYXRjaEVycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgc2VsZi5yZXF1aXJlLmNvbmZpZyhsb2FkZXJDb25maWcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBVc2UgdGhlIGdsb2JhbCByZXF1aXJlIHRvIGJlIHN1cmUgdG8gZ2V0IHRoZSBnbG9iYWwgY29uZmlnXHJcbiAgICAgICAgICAgIHNlbGYucmVxdWlyZShbbW9kdWxlSWRdLCAobW9kdWxlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXF1ZXN0SGFuZGxlciA9IG1vZHVsZS5jcmVhdGUoaG9zdFByb3h5KTtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fcmVxdWVzdEhhbmRsZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBObyBSZXF1ZXN0SGFuZGxlciFgKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0eXBlcy5nZXRBbGxNZXRob2ROYW1lcyh0aGlzLl9yZXF1ZXN0SGFuZGxlcikpO1xyXG4gICAgICAgICAgICB9LCByZWplY3QpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBDYWxsZWQgb24gdGhlIHdvcmtlciBzaWRlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKHBvc3RNZXNzYWdlKSB7XHJcbiAgICByZXR1cm4gbmV3IFNpbXBsZVdvcmtlclNlcnZlcihwb3N0TWVzc2FnZSwgbnVsbCk7XHJcbn1cclxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGluZm9ybWF0aW9uIGFib3V0IGEgc3BlY2lmaWMgZGlmZmVyZW5jZSBiZXR3ZWVuIHR3byBzZXF1ZW5jZXMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRGlmZkNoYW5nZSB7XHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdHMgYSBuZXcgRGlmZkNoYW5nZSB3aXRoIHRoZSBnaXZlbiBzZXF1ZW5jZSBpbmZvcm1hdGlvblxyXG4gICAgICogYW5kIGNvbnRlbnQuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG9yaWdpbmFsU3RhcnQsIG9yaWdpbmFsTGVuZ3RoLCBtb2RpZmllZFN0YXJ0LCBtb2RpZmllZExlbmd0aCkge1xyXG4gICAgICAgIC8vRGVidWcuQXNzZXJ0KG9yaWdpbmFsTGVuZ3RoID4gMCB8fCBtb2RpZmllZExlbmd0aCA+IDAsIFwib3JpZ2luYWxMZW5ndGggYW5kIG1vZGlmaWVkTGVuZ3RoIGNhbm5vdCBib3RoIGJlIDw9IDBcIik7XHJcbiAgICAgICAgdGhpcy5vcmlnaW5hbFN0YXJ0ID0gb3JpZ2luYWxTdGFydDtcclxuICAgICAgICB0aGlzLm9yaWdpbmFsTGVuZ3RoID0gb3JpZ2luYWxMZW5ndGg7XHJcbiAgICAgICAgdGhpcy5tb2RpZmllZFN0YXJ0ID0gbW9kaWZpZWRTdGFydDtcclxuICAgICAgICB0aGlzLm1vZGlmaWVkTGVuZ3RoID0gbW9kaWZpZWRMZW5ndGg7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBlbmQgcG9pbnQgKGV4Y2x1c2l2ZSkgb2YgdGhlIGNoYW5nZSBpbiB0aGUgb3JpZ2luYWwgc2VxdWVuY2UuXHJcbiAgICAgKi9cclxuICAgIGdldE9yaWdpbmFsRW5kKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9yaWdpbmFsU3RhcnQgKyB0aGlzLm9yaWdpbmFsTGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZW5kIHBvaW50IChleGNsdXNpdmUpIG9mIHRoZSBjaGFuZ2UgaW4gdGhlIG1vZGlmaWVkIHNlcXVlbmNlLlxyXG4gICAgICovXHJcbiAgICBnZXRNb2RpZmllZEVuZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tb2RpZmllZFN0YXJ0ICsgdGhpcy5tb2RpZmllZExlbmd0aDtcclxuICAgIH1cclxufVxyXG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRmFsc3lPcldoaXRlc3BhY2Uoc3RyKSB7XHJcbiAgICBpZiAoIXN0ciB8fCB0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0ci50cmltKCkubGVuZ3RoID09PSAwO1xyXG59XHJcbmNvbnN0IF9mb3JtYXRSZWdleHAgPSAveyhcXGQrKX0vZztcclxuLyoqXHJcbiAqIEhlbHBlciB0byBwcm9kdWNlIGEgc3RyaW5nIHdpdGggYSB2YXJpYWJsZSBudW1iZXIgb2YgYXJndW1lbnRzLiBJbnNlcnQgdmFyaWFibGUgc2VnbWVudHNcclxuICogaW50byB0aGUgc3RyaW5nIHVzaW5nIHRoZSB7bn0gbm90YXRpb24gd2hlcmUgTiBpcyB0aGUgaW5kZXggb2YgdGhlIGFyZ3VtZW50IGZvbGxvd2luZyB0aGUgc3RyaW5nLlxyXG4gKiBAcGFyYW0gdmFsdWUgc3RyaW5nIHRvIHdoaWNoIGZvcm1hdHRpbmcgaXMgYXBwbGllZFxyXG4gKiBAcGFyYW0gYXJncyByZXBsYWNlbWVudHMgZm9yIHtufS1lbnRyaWVzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0KHZhbHVlLCAuLi5hcmdzKSB7XHJcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZShfZm9ybWF0UmVnZXhwLCBmdW5jdGlvbiAobWF0Y2gsIGdyb3VwKSB7XHJcbiAgICAgICAgY29uc3QgaWR4ID0gcGFyc2VJbnQoZ3JvdXAsIDEwKTtcclxuICAgICAgICByZXR1cm4gaXNOYU4oaWR4KSB8fCBpZHggPCAwIHx8IGlkeCA+PSBhcmdzLmxlbmd0aCA/XHJcbiAgICAgICAgICAgIG1hdGNoIDpcclxuICAgICAgICAgICAgYXJnc1tpZHhdO1xyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIENvbnZlcnRzIEhUTUwgY2hhcmFjdGVycyBpbnNpZGUgdGhlIHN0cmluZyB0byB1c2UgZW50aXRpZXMgaW5zdGVhZC4gTWFrZXMgdGhlIHN0cmluZyBzYWZlIGZyb21cclxuICogYmVpbmcgdXNlZCBlLmcuIGluIEhUTUxFbGVtZW50LmlubmVySFRNTC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGUoaHRtbCkge1xyXG4gICAgcmV0dXJuIGh0bWwucmVwbGFjZSgvWzw+Jl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XHJcbiAgICAgICAgc3dpdGNoIChtYXRjaCkge1xyXG4gICAgICAgICAgICBjYXNlICc8JzogcmV0dXJuICcmbHQ7JztcclxuICAgICAgICAgICAgY2FzZSAnPic6IHJldHVybiAnJmd0Oyc7XHJcbiAgICAgICAgICAgIGNhc2UgJyYnOiByZXR1cm4gJyZhbXA7JztcclxuICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIG1hdGNoO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKiBFc2NhcGVzIHJlZ3VsYXIgZXhwcmVzc2lvbiBjaGFyYWN0ZXJzIGluIGEgZ2l2ZW4gc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlUmVnRXhwQ2hhcmFjdGVycyh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1tcXFxcXFx7XFx9XFwqXFwrXFw/XFx8XFxeXFwkXFwuXFxbXFxdXFwoXFwpXS9nLCAnXFxcXCQmJyk7XHJcbn1cclxuLyoqXHJcbiAqIFJlbW92ZXMgYWxsIG9jY3VycmVuY2VzIG9mIG5lZWRsZSBmcm9tIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBoYXlzdGFjay5cclxuICogQHBhcmFtIGhheXN0YWNrIHN0cmluZyB0byB0cmltXHJcbiAqIEBwYXJhbSBuZWVkbGUgdGhlIHRoaW5nIHRvIHRyaW0gKGRlZmF1bHQgaXMgYSBibGFuaylcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmltKGhheXN0YWNrLCBuZWVkbGUgPSAnICcpIHtcclxuICAgIGNvbnN0IHRyaW1tZWQgPSBsdHJpbShoYXlzdGFjaywgbmVlZGxlKTtcclxuICAgIHJldHVybiBydHJpbSh0cmltbWVkLCBuZWVkbGUpO1xyXG59XHJcbi8qKlxyXG4gKiBSZW1vdmVzIGFsbCBvY2N1cnJlbmNlcyBvZiBuZWVkbGUgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIGhheXN0YWNrLlxyXG4gKiBAcGFyYW0gaGF5c3RhY2sgc3RyaW5nIHRvIHRyaW1cclxuICogQHBhcmFtIG5lZWRsZSB0aGUgdGhpbmcgdG8gdHJpbVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGx0cmltKGhheXN0YWNrLCBuZWVkbGUpIHtcclxuICAgIGlmICghaGF5c3RhY2sgfHwgIW5lZWRsZSkge1xyXG4gICAgICAgIHJldHVybiBoYXlzdGFjaztcclxuICAgIH1cclxuICAgIGNvbnN0IG5lZWRsZUxlbiA9IG5lZWRsZS5sZW5ndGg7XHJcbiAgICBpZiAobmVlZGxlTGVuID09PSAwIHx8IGhheXN0YWNrLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBoYXlzdGFjaztcclxuICAgIH1cclxuICAgIGxldCBvZmZzZXQgPSAwO1xyXG4gICAgd2hpbGUgKGhheXN0YWNrLmluZGV4T2YobmVlZGxlLCBvZmZzZXQpID09PSBvZmZzZXQpIHtcclxuICAgICAgICBvZmZzZXQgPSBvZmZzZXQgKyBuZWVkbGVMZW47XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaGF5c3RhY2suc3Vic3RyaW5nKG9mZnNldCk7XHJcbn1cclxuLyoqXHJcbiAqIFJlbW92ZXMgYWxsIG9jY3VycmVuY2VzIG9mIG5lZWRsZSBmcm9tIHRoZSBlbmQgb2YgaGF5c3RhY2suXHJcbiAqIEBwYXJhbSBoYXlzdGFjayBzdHJpbmcgdG8gdHJpbVxyXG4gKiBAcGFyYW0gbmVlZGxlIHRoZSB0aGluZyB0byB0cmltXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcnRyaW0oaGF5c3RhY2ssIG5lZWRsZSkge1xyXG4gICAgaWYgKCFoYXlzdGFjayB8fCAhbmVlZGxlKSB7XHJcbiAgICAgICAgcmV0dXJuIGhheXN0YWNrO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbmVlZGxlTGVuID0gbmVlZGxlLmxlbmd0aCwgaGF5c3RhY2tMZW4gPSBoYXlzdGFjay5sZW5ndGg7XHJcbiAgICBpZiAobmVlZGxlTGVuID09PSAwIHx8IGhheXN0YWNrTGVuID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGhheXN0YWNrO1xyXG4gICAgfVxyXG4gICAgbGV0IG9mZnNldCA9IGhheXN0YWNrTGVuLCBpZHggPSAtMTtcclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgaWR4ID0gaGF5c3RhY2subGFzdEluZGV4T2YobmVlZGxlLCBvZmZzZXQgLSAxKTtcclxuICAgICAgICBpZiAoaWR4ID09PSAtMSB8fCBpZHggKyBuZWVkbGVMZW4gIT09IG9mZnNldCkge1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlkeCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9mZnNldCA9IGlkeDtcclxuICAgIH1cclxuICAgIHJldHVybiBoYXlzdGFjay5zdWJzdHJpbmcoMCwgb2Zmc2V0KTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFNpbXBsZTJSZWdFeHBQYXR0ZXJuKHBhdHRlcm4pIHtcclxuICAgIHJldHVybiBwYXR0ZXJuLnJlcGxhY2UoL1tcXC1cXFxcXFx7XFx9XFwrXFw/XFx8XFxeXFwkXFwuXFwsXFxbXFxdXFwoXFwpXFwjXFxzXS9nLCAnXFxcXCQmJykucmVwbGFjZSgvW1xcKl0vZywgJy4qJyk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwV2lsZGNhcmRzKHBhdHRlcm4pIHtcclxuICAgIHJldHVybiBwYXR0ZXJuLnJlcGxhY2UoL1xcKi9nLCAnJyk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlZ0V4cChzZWFyY2hTdHJpbmcsIGlzUmVnZXgsIG9wdGlvbnMgPSB7fSkge1xyXG4gICAgaWYgKCFzZWFyY2hTdHJpbmcpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBjcmVhdGUgcmVnZXggZnJvbSBlbXB0eSBzdHJpbmcnKTtcclxuICAgIH1cclxuICAgIGlmICghaXNSZWdleCkge1xyXG4gICAgICAgIHNlYXJjaFN0cmluZyA9IGVzY2FwZVJlZ0V4cENoYXJhY3RlcnMoc2VhcmNoU3RyaW5nKTtcclxuICAgIH1cclxuICAgIGlmIChvcHRpb25zLndob2xlV29yZCkge1xyXG4gICAgICAgIGlmICghL1xcQi8udGVzdChzZWFyY2hTdHJpbmcuY2hhckF0KDApKSkge1xyXG4gICAgICAgICAgICBzZWFyY2hTdHJpbmcgPSAnXFxcXGInICsgc2VhcmNoU3RyaW5nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIS9cXEIvLnRlc3Qoc2VhcmNoU3RyaW5nLmNoYXJBdChzZWFyY2hTdHJpbmcubGVuZ3RoIC0gMSkpKSB7XHJcbiAgICAgICAgICAgIHNlYXJjaFN0cmluZyA9IHNlYXJjaFN0cmluZyArICdcXFxcYic7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbGV0IG1vZGlmaWVycyA9ICcnO1xyXG4gICAgaWYgKG9wdGlvbnMuZ2xvYmFsKSB7XHJcbiAgICAgICAgbW9kaWZpZXJzICs9ICdnJztcclxuICAgIH1cclxuICAgIGlmICghb3B0aW9ucy5tYXRjaENhc2UpIHtcclxuICAgICAgICBtb2RpZmllcnMgKz0gJ2knO1xyXG4gICAgfVxyXG4gICAgaWYgKG9wdGlvbnMubXVsdGlsaW5lKSB7XHJcbiAgICAgICAgbW9kaWZpZXJzICs9ICdtJztcclxuICAgIH1cclxuICAgIGlmIChvcHRpb25zLnVuaWNvZGUpIHtcclxuICAgICAgICBtb2RpZmllcnMgKz0gJ3UnO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoc2VhcmNoU3RyaW5nLCBtb2RpZmllcnMpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiByZWdFeHBMZWFkc1RvRW5kbGVzc0xvb3AocmVnZXhwKSB7XHJcbiAgICAvLyBFeGl0IGVhcmx5IGlmIGl0J3Mgb25lIG9mIHRoZXNlIHNwZWNpYWwgY2FzZXMgd2hpY2ggYXJlIG1lYW50IHRvIG1hdGNoXHJcbiAgICAvLyBhZ2FpbnN0IGFuIGVtcHR5IHN0cmluZ1xyXG4gICAgaWYgKHJlZ2V4cC5zb3VyY2UgPT09ICdeJyB8fCByZWdleHAuc291cmNlID09PSAnXiQnIHx8IHJlZ2V4cC5zb3VyY2UgPT09ICckJyB8fCByZWdleHAuc291cmNlID09PSAnXlxcXFxzKiQnKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gV2UgY2hlY2sgYWdhaW5zdCBhbiBlbXB0eSBzdHJpbmcuIElmIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gZG9lc24ndCBhZHZhbmNlXHJcbiAgICAvLyAoZS5nLiBlbmRzIGluIGFuIGVuZGxlc3MgbG9vcCkgaXQgd2lsbCBtYXRjaCBhbiBlbXB0eSBzdHJpbmcuXHJcbiAgICBjb25zdCBtYXRjaCA9IHJlZ2V4cC5leGVjKCcnKTtcclxuICAgIHJldHVybiAhIShtYXRjaCAmJiByZWdleHAubGFzdEluZGV4ID09PSAwKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gcmVnRXhwRmxhZ3MocmVnZXhwKSB7XHJcbiAgICByZXR1cm4gKHJlZ2V4cC5nbG9iYWwgPyAnZycgOiAnJylcclxuICAgICAgICArIChyZWdleHAuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKVxyXG4gICAgICAgICsgKHJlZ2V4cC5tdWx0aWxpbmUgPyAnbScgOiAnJylcclxuICAgICAgICArIChyZWdleHAgLyogc3RhbmRhbG9uZSBlZGl0b3IgY29tcGlsYXRpb24gKi8udW5pY29kZSA/ICd1JyA6ICcnKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRMaW5lcyhzdHIpIHtcclxuICAgIHJldHVybiBzdHIuc3BsaXQoL1xcclxcbnxcXHJ8XFxuLyk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgZmlyc3QgaW5kZXggb2YgdGhlIHN0cmluZyB0aGF0IGlzIG5vdCB3aGl0ZXNwYWNlLlxyXG4gKiBJZiBzdHJpbmcgaXMgZW1wdHkgb3IgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlcywgcmV0dXJucyAtMVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZpcnN0Tm9uV2hpdGVzcGFjZUluZGV4KHN0cikge1xyXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHN0ci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGNoQ29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIGlmIChjaENvZGUgIT09IDMyIC8qIFNwYWNlICovICYmIGNoQ29kZSAhPT0gOSAvKiBUYWIgKi8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIC0xO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBsZWFkaW5nIHdoaXRlc3BhY2Ugb2YgdGhlIHN0cmluZy5cclxuICogSWYgdGhlIHN0cmluZyBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VzLCByZXR1cm5zIGVudGlyZSBzdHJpbmdcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRMZWFkaW5nV2hpdGVzcGFjZShzdHIsIHN0YXJ0ID0gMCwgZW5kID0gc3RyLmxlbmd0aCkge1xyXG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcclxuICAgICAgICBjb25zdCBjaENvZGUgPSBzdHIuY2hhckNvZGVBdChpKTtcclxuICAgICAgICBpZiAoY2hDb2RlICE9PSAzMiAvKiBTcGFjZSAqLyAmJiBjaENvZGUgIT09IDkgLyogVGFiICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdHIuc3Vic3RyaW5nKHN0YXJ0LCBpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RyLnN1YnN0cmluZyhzdGFydCwgZW5kKTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyBsYXN0IGluZGV4IG9mIHRoZSBzdHJpbmcgdGhhdCBpcyBub3Qgd2hpdGVzcGFjZS5cclxuICogSWYgc3RyaW5nIGlzIGVtcHR5IG9yIGNvbnRhaW5zIG9ubHkgd2hpdGVzcGFjZXMsIHJldHVybnMgLTFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBsYXN0Tm9uV2hpdGVzcGFjZUluZGV4KHN0ciwgc3RhcnRJbmRleCA9IHN0ci5sZW5ndGggLSAxKSB7XHJcbiAgICBmb3IgKGxldCBpID0gc3RhcnRJbmRleDsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICBjb25zdCBjaENvZGUgPSBzdHIuY2hhckNvZGVBdChpKTtcclxuICAgICAgICBpZiAoY2hDb2RlICE9PSAzMiAvKiBTcGFjZSAqLyAmJiBjaENvZGUgIT09IDkgLyogVGFiICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiAtMTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XHJcbiAgICBpZiAoYSA8IGIpIHtcclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChhID4gYikge1xyXG4gICAgICAgIHJldHVybiAxO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVTdWJzdHJpbmcoYSwgYiwgYVN0YXJ0ID0gMCwgYUVuZCA9IGEubGVuZ3RoLCBiU3RhcnQgPSAwLCBiRW5kID0gYi5sZW5ndGgpIHtcclxuICAgIGZvciAoOyBhU3RhcnQgPCBhRW5kICYmIGJTdGFydCA8IGJFbmQ7IGFTdGFydCsrLCBiU3RhcnQrKykge1xyXG4gICAgICAgIGxldCBjb2RlQSA9IGEuY2hhckNvZGVBdChhU3RhcnQpO1xyXG4gICAgICAgIGxldCBjb2RlQiA9IGIuY2hhckNvZGVBdChiU3RhcnQpO1xyXG4gICAgICAgIGlmIChjb2RlQSA8IGNvZGVCKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoY29kZUEgPiBjb2RlQikge1xyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBhTGVuID0gYUVuZCAtIGFTdGFydDtcclxuICAgIGNvbnN0IGJMZW4gPSBiRW5kIC0gYlN0YXJ0O1xyXG4gICAgaWYgKGFMZW4gPCBiTGVuKSB7XHJcbiAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoYUxlbiA+IGJMZW4pIHtcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIH1cclxuICAgIHJldHVybiAwO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlSWdub3JlQ2FzZShhLCBiKSB7XHJcbiAgICByZXR1cm4gY29tcGFyZVN1YnN0cmluZ0lnbm9yZUNhc2UoYSwgYiwgMCwgYS5sZW5ndGgsIDAsIGIubGVuZ3RoKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZVN1YnN0cmluZ0lnbm9yZUNhc2UoYSwgYiwgYVN0YXJ0ID0gMCwgYUVuZCA9IGEubGVuZ3RoLCBiU3RhcnQgPSAwLCBiRW5kID0gYi5sZW5ndGgpIHtcclxuICAgIGZvciAoOyBhU3RhcnQgPCBhRW5kICYmIGJTdGFydCA8IGJFbmQ7IGFTdGFydCsrLCBiU3RhcnQrKykge1xyXG4gICAgICAgIGxldCBjb2RlQSA9IGEuY2hhckNvZGVBdChhU3RhcnQpO1xyXG4gICAgICAgIGxldCBjb2RlQiA9IGIuY2hhckNvZGVBdChiU3RhcnQpO1xyXG4gICAgICAgIGlmIChjb2RlQSA9PT0gY29kZUIpIHtcclxuICAgICAgICAgICAgLy8gZXF1YWxcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGRpZmYgPSBjb2RlQSAtIGNvZGVCO1xyXG4gICAgICAgIGlmIChkaWZmID09PSAzMiAmJiBpc1VwcGVyQXNjaWlMZXR0ZXIoY29kZUIpKSB7IC8vY29kZUIgPVs2NS05MF0gJiYgY29kZUEgPVs5Ny0xMjJdXHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChkaWZmID09PSAtMzIgJiYgaXNVcHBlckFzY2lpTGV0dGVyKGNvZGVBKSkgeyAvL2NvZGVCID1bOTctMTIyXSAmJiBjb2RlQSA9WzY1LTkwXVxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzTG93ZXJBc2NpaUxldHRlcihjb2RlQSkgJiYgaXNMb3dlckFzY2lpTGV0dGVyKGNvZGVCKSkge1xyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICByZXR1cm4gZGlmZjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb21wYXJlU3Vic3RyaW5nKGEudG9Mb3dlckNhc2UoKSwgYi50b0xvd2VyQ2FzZSgpLCBhU3RhcnQsIGFFbmQsIGJTdGFydCwgYkVuZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgYUxlbiA9IGFFbmQgLSBhU3RhcnQ7XHJcbiAgICBjb25zdCBiTGVuID0gYkVuZCAtIGJTdGFydDtcclxuICAgIGlmIChhTGVuIDwgYkxlbikge1xyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGFMZW4gPiBiTGVuKSB7XHJcbiAgICAgICAgcmV0dXJuIDE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gMDtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gaXNMb3dlckFzY2lpTGV0dGVyKGNvZGUpIHtcclxuICAgIHJldHVybiBjb2RlID49IDk3IC8qIGEgKi8gJiYgY29kZSA8PSAxMjIgLyogeiAqLztcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gaXNVcHBlckFzY2lpTGV0dGVyKGNvZGUpIHtcclxuICAgIHJldHVybiBjb2RlID49IDY1IC8qIEEgKi8gJiYgY29kZSA8PSA5MCAvKiBaICovO1xyXG59XHJcbmZ1bmN0aW9uIGlzQXNjaWlMZXR0ZXIoY29kZSkge1xyXG4gICAgcmV0dXJuIGlzTG93ZXJBc2NpaUxldHRlcihjb2RlKSB8fCBpc1VwcGVyQXNjaWlMZXR0ZXIoY29kZSk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFsc0lnbm9yZUNhc2UoYSwgYikge1xyXG4gICAgcmV0dXJuIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBkb0VxdWFsc0lnbm9yZUNhc2UoYSwgYik7XHJcbn1cclxuZnVuY3Rpb24gZG9FcXVhbHNJZ25vcmVDYXNlKGEsIGIsIHN0b3BBdCA9IGEubGVuZ3RoKSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0b3BBdDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgY29kZUEgPSBhLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgY29uc3QgY29kZUIgPSBiLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgaWYgKGNvZGVBID09PSBjb2RlQikge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYS16IEEtWlxyXG4gICAgICAgIGlmIChpc0FzY2lpTGV0dGVyKGNvZGVBKSAmJiBpc0FzY2lpTGV0dGVyKGNvZGVCKSkge1xyXG4gICAgICAgICAgICBjb25zdCBkaWZmID0gTWF0aC5hYnMoY29kZUEgLSBjb2RlQik7XHJcbiAgICAgICAgICAgIGlmIChkaWZmICE9PSAwICYmIGRpZmYgIT09IDMyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQW55IG90aGVyIGNoYXJjb2RlXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGVBKS50b0xvd2VyQ2FzZSgpICE9PSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGVCKS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRzV2l0aElnbm9yZUNhc2Uoc3RyLCBjYW5kaWRhdGUpIHtcclxuICAgIGNvbnN0IGNhbmRpZGF0ZUxlbmd0aCA9IGNhbmRpZGF0ZS5sZW5ndGg7XHJcbiAgICBpZiAoY2FuZGlkYXRlLmxlbmd0aCA+IHN0ci5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZG9FcXVhbHNJZ25vcmVDYXNlKHN0ciwgY2FuZGlkYXRlLCBjYW5kaWRhdGVMZW5ndGgpO1xyXG59XHJcbi8qKlxyXG4gKiBAcmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBjb21tb24gcHJlZml4IG9mIHRoZSB0d28gc3RyaW5ncy5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21tb25QcmVmaXhMZW5ndGgoYSwgYikge1xyXG4gICAgbGV0IGksIGxlbiA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aCk7XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICBpZiAoYS5jaGFyQ29kZUF0KGkpICE9PSBiLmNoYXJDb2RlQXQoaSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxlbjtcclxufVxyXG4vKipcclxuICogQHJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUgY29tbW9uIHN1ZmZpeCBvZiB0aGUgdHdvIHN0cmluZ3MuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29tbW9uU3VmZml4TGVuZ3RoKGEsIGIpIHtcclxuICAgIGxldCBpLCBsZW4gPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpO1xyXG4gICAgY29uc3QgYUxhc3RJbmRleCA9IGEubGVuZ3RoIC0gMTtcclxuICAgIGNvbnN0IGJMYXN0SW5kZXggPSBiLmxlbmd0aCAtIDE7XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICBpZiAoYS5jaGFyQ29kZUF0KGFMYXN0SW5kZXggLSBpKSAhPT0gYi5jaGFyQ29kZUF0KGJMYXN0SW5kZXggLSBpKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gaTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbGVuO1xyXG59XHJcbi8qKlxyXG4gKiBTZWUgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TdXJyb2dhdGVfcGFpclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzSGlnaFN1cnJvZ2F0ZShjaGFyQ29kZSkge1xyXG4gICAgcmV0dXJuICgweEQ4MDAgPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gMHhEQkZGKTtcclxufVxyXG4vKipcclxuICogU2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3Vycm9nYXRlX3BhaXJcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0xvd1N1cnJvZ2F0ZShjaGFyQ29kZSkge1xyXG4gICAgcmV0dXJuICgweERDMDAgPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gMHhERkZGKTtcclxufVxyXG4vKipcclxuICogU2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3Vycm9nYXRlX3BhaXJcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlQ29kZVBvaW50KGhpZ2hTdXJyb2dhdGUsIGxvd1N1cnJvZ2F0ZSkge1xyXG4gICAgcmV0dXJuICgoaGlnaFN1cnJvZ2F0ZSAtIDB4RDgwMCkgPDwgMTApICsgKGxvd1N1cnJvZ2F0ZSAtIDB4REMwMCkgKyAweDEwMDAwO1xyXG59XHJcbi8qKlxyXG4gKiBnZXQgdGhlIGNvZGUgcG9pbnQgdGhhdCBiZWdpbnMgYXQgb2Zmc2V0IGBvZmZzZXRgXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV4dENvZGVQb2ludChzdHIsIGxlbiwgb2Zmc2V0KSB7XHJcbiAgICBjb25zdCBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KG9mZnNldCk7XHJcbiAgICBpZiAoaXNIaWdoU3Vycm9nYXRlKGNoYXJDb2RlKSAmJiBvZmZzZXQgKyAxIDwgbGVuKSB7XHJcbiAgICAgICAgY29uc3QgbmV4dENoYXJDb2RlID0gc3RyLmNoYXJDb2RlQXQob2Zmc2V0ICsgMSk7XHJcbiAgICAgICAgaWYgKGlzTG93U3Vycm9nYXRlKG5leHRDaGFyQ29kZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbXB1dGVDb2RlUG9pbnQoY2hhckNvZGUsIG5leHRDaGFyQ29kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNoYXJDb2RlO1xyXG59XHJcbi8qKlxyXG4gKiBnZXQgdGhlIGNvZGUgcG9pbnQgdGhhdCBlbmRzIHJpZ2h0IGJlZm9yZSBvZmZzZXQgYG9mZnNldGBcclxuICovXHJcbmZ1bmN0aW9uIGdldFByZXZDb2RlUG9pbnQoc3RyLCBvZmZzZXQpIHtcclxuICAgIGNvbnN0IGNoYXJDb2RlID0gc3RyLmNoYXJDb2RlQXQob2Zmc2V0IC0gMSk7XHJcbiAgICBpZiAoaXNMb3dTdXJyb2dhdGUoY2hhckNvZGUpICYmIG9mZnNldCA+IDEpIHtcclxuICAgICAgICBjb25zdCBwcmV2Q2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChvZmZzZXQgLSAyKTtcclxuICAgICAgICBpZiAoaXNIaWdoU3Vycm9nYXRlKHByZXZDaGFyQ29kZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbXB1dGVDb2RlUG9pbnQocHJldkNoYXJDb2RlLCBjaGFyQ29kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNoYXJDb2RlO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBuZXh0Q2hhckxlbmd0aChzdHIsIG9mZnNldCkge1xyXG4gICAgY29uc3QgZ3JhcGhlbWVCcmVha1RyZWUgPSBHcmFwaGVtZUJyZWFrVHJlZS5nZXRJbnN0YW5jZSgpO1xyXG4gICAgY29uc3QgaW5pdGlhbE9mZnNldCA9IG9mZnNldDtcclxuICAgIGNvbnN0IGxlbiA9IHN0ci5sZW5ndGg7XHJcbiAgICBjb25zdCBpbml0aWFsQ29kZVBvaW50ID0gZ2V0TmV4dENvZGVQb2ludChzdHIsIGxlbiwgb2Zmc2V0KTtcclxuICAgIG9mZnNldCArPSAoaW5pdGlhbENvZGVQb2ludCA+PSA2NTUzNiAvKiBVTklDT0RFX1NVUFBMRU1FTlRBUllfUExBTkVfQkVHSU4gKi8gPyAyIDogMSk7XHJcbiAgICBsZXQgZ3JhcGhlbWVCcmVha1R5cGUgPSBncmFwaGVtZUJyZWFrVHJlZS5nZXRHcmFwaGVtZUJyZWFrVHlwZShpbml0aWFsQ29kZVBvaW50KTtcclxuICAgIHdoaWxlIChvZmZzZXQgPCBsZW4pIHtcclxuICAgICAgICBjb25zdCBuZXh0Q29kZVBvaW50ID0gZ2V0TmV4dENvZGVQb2ludChzdHIsIGxlbiwgb2Zmc2V0KTtcclxuICAgICAgICBjb25zdCBuZXh0R3JhcGhlbWVCcmVha1R5cGUgPSBncmFwaGVtZUJyZWFrVHJlZS5nZXRHcmFwaGVtZUJyZWFrVHlwZShuZXh0Q29kZVBvaW50KTtcclxuICAgICAgICBpZiAoYnJlYWtCZXR3ZWVuR3JhcGhlbWVCcmVha1R5cGUoZ3JhcGhlbWVCcmVha1R5cGUsIG5leHRHcmFwaGVtZUJyZWFrVHlwZSkpIHtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9mZnNldCArPSAobmV4dENvZGVQb2ludCA+PSA2NTUzNiAvKiBVTklDT0RFX1NVUFBMRU1FTlRBUllfUExBTkVfQkVHSU4gKi8gPyAyIDogMSk7XHJcbiAgICAgICAgZ3JhcGhlbWVCcmVha1R5cGUgPSBuZXh0R3JhcGhlbWVCcmVha1R5cGU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKG9mZnNldCAtIGluaXRpYWxPZmZzZXQpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBwcmV2Q2hhckxlbmd0aChzdHIsIG9mZnNldCkge1xyXG4gICAgY29uc3QgZ3JhcGhlbWVCcmVha1RyZWUgPSBHcmFwaGVtZUJyZWFrVHJlZS5nZXRJbnN0YW5jZSgpO1xyXG4gICAgY29uc3QgaW5pdGlhbE9mZnNldCA9IG9mZnNldDtcclxuICAgIGNvbnN0IGluaXRpYWxDb2RlUG9pbnQgPSBnZXRQcmV2Q29kZVBvaW50KHN0ciwgb2Zmc2V0KTtcclxuICAgIG9mZnNldCAtPSAoaW5pdGlhbENvZGVQb2ludCA+PSA2NTUzNiAvKiBVTklDT0RFX1NVUFBMRU1FTlRBUllfUExBTkVfQkVHSU4gKi8gPyAyIDogMSk7XHJcbiAgICBsZXQgZ3JhcGhlbWVCcmVha1R5cGUgPSBncmFwaGVtZUJyZWFrVHJlZS5nZXRHcmFwaGVtZUJyZWFrVHlwZShpbml0aWFsQ29kZVBvaW50KTtcclxuICAgIHdoaWxlIChvZmZzZXQgPiAwKSB7XHJcbiAgICAgICAgY29uc3QgcHJldkNvZGVQb2ludCA9IGdldFByZXZDb2RlUG9pbnQoc3RyLCBvZmZzZXQpO1xyXG4gICAgICAgIGNvbnN0IHByZXZHcmFwaGVtZUJyZWFrVHlwZSA9IGdyYXBoZW1lQnJlYWtUcmVlLmdldEdyYXBoZW1lQnJlYWtUeXBlKHByZXZDb2RlUG9pbnQpO1xyXG4gICAgICAgIGlmIChicmVha0JldHdlZW5HcmFwaGVtZUJyZWFrVHlwZShwcmV2R3JhcGhlbWVCcmVha1R5cGUsIGdyYXBoZW1lQnJlYWtUeXBlKSkge1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgb2Zmc2V0IC09IChwcmV2Q29kZVBvaW50ID49IDY1NTM2IC8qIFVOSUNPREVfU1VQUExFTUVOVEFSWV9QTEFORV9CRUdJTiAqLyA/IDIgOiAxKTtcclxuICAgICAgICBncmFwaGVtZUJyZWFrVHlwZSA9IHByZXZHcmFwaGVtZUJyZWFrVHlwZTtcclxuICAgIH1cclxuICAgIHJldHVybiAoaW5pdGlhbE9mZnNldCAtIG9mZnNldCk7XHJcbn1cclxuLyoqXHJcbiAqIEEgbWFudWFsIGRlY29kaW5nIG9mIGEgVVRGOCBzdHJpbmcuXHJcbiAqIFVzZSBvbmx5IGluIGVudmlyb25tZW50cyB3aGljaCBkbyBub3Qgb2ZmZXIgbmF0aXZlIGNvbnZlcnNpb24gbWV0aG9kcyFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVVVEY4KGJ1ZmZlcikge1xyXG4gICAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVVRGLThcclxuICAgIGNvbnN0IGxlbiA9IGJ1ZmZlci5ieXRlTGVuZ3RoO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gW107XHJcbiAgICBsZXQgb2Zmc2V0ID0gMDtcclxuICAgIHdoaWxlIChvZmZzZXQgPCBsZW4pIHtcclxuICAgICAgICBjb25zdCB2MCA9IGJ1ZmZlcltvZmZzZXRdO1xyXG4gICAgICAgIGxldCBjb2RlUG9pbnQ7XHJcbiAgICAgICAgaWYgKHYwID49IDBiMTExMTAwMDAgJiYgb2Zmc2V0ICsgMyA8IGxlbikge1xyXG4gICAgICAgICAgICAvLyA0IGJ5dGVzXHJcbiAgICAgICAgICAgIGNvZGVQb2ludCA9ICgoKChidWZmZXJbb2Zmc2V0KytdICYgMGIwMDAwMDExMSkgPDwgMTgpID4+PiAwKVxyXG4gICAgICAgICAgICAgICAgfCAoKChidWZmZXJbb2Zmc2V0KytdICYgMGIwMDExMTExMSkgPDwgMTIpID4+PiAwKVxyXG4gICAgICAgICAgICAgICAgfCAoKChidWZmZXJbb2Zmc2V0KytdICYgMGIwMDExMTExMSkgPDwgNikgPj4+IDApXHJcbiAgICAgICAgICAgICAgICB8ICgoKGJ1ZmZlcltvZmZzZXQrK10gJiAwYjAwMTExMTExKSA8PCAwKSA+Pj4gMCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2MCA+PSAwYjExMTAwMDAwICYmIG9mZnNldCArIDIgPCBsZW4pIHtcclxuICAgICAgICAgICAgLy8gMyBieXRlc1xyXG4gICAgICAgICAgICBjb2RlUG9pbnQgPSAoKCgoYnVmZmVyW29mZnNldCsrXSAmIDBiMDAwMDExMTEpIDw8IDEyKSA+Pj4gMClcclxuICAgICAgICAgICAgICAgIHwgKCgoYnVmZmVyW29mZnNldCsrXSAmIDBiMDAxMTExMTEpIDw8IDYpID4+PiAwKVxyXG4gICAgICAgICAgICAgICAgfCAoKChidWZmZXJbb2Zmc2V0KytdICYgMGIwMDExMTExMSkgPDwgMCkgPj4+IDApKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodjAgPj0gMGIxMTAwMDAwMCAmJiBvZmZzZXQgKyAxIDwgbGVuKSB7XHJcbiAgICAgICAgICAgIC8vIDIgYnl0ZXNcclxuICAgICAgICAgICAgY29kZVBvaW50ID0gKCgoKGJ1ZmZlcltvZmZzZXQrK10gJiAwYjAwMDExMTExKSA8PCA2KSA+Pj4gMClcclxuICAgICAgICAgICAgICAgIHwgKCgoYnVmZmVyW29mZnNldCsrXSAmIDBiMDAxMTExMTEpIDw8IDApID4+PiAwKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyAxIGJ5dGVcclxuICAgICAgICAgICAgY29kZVBvaW50ID0gYnVmZmVyW29mZnNldCsrXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKChjb2RlUG9pbnQgPj0gMCAmJiBjb2RlUG9pbnQgPD0gMHhEN0ZGKSB8fCAoY29kZVBvaW50ID49IDB4RTAwMCAmJiBjb2RlUG9pbnQgPD0gMHhGRkZGKSkge1xyXG4gICAgICAgICAgICAvLyBCYXNpYyBNdWx0aWxpbmd1YWwgUGxhbmVcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlUG9pbnQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoY29kZVBvaW50ID49IDB4MDEwMDAwICYmIGNvZGVQb2ludCA8PSAweDEwRkZGRikge1xyXG4gICAgICAgICAgICAvLyBTdXBwbGVtZW50YXJ5IFBsYW5lc1xyXG4gICAgICAgICAgICBjb25zdCB1UHJpbWUgPSBjb2RlUG9pbnQgLSAweDEwMDAwO1xyXG4gICAgICAgICAgICBjb25zdCB3MSA9IDB4RDgwMCArICgodVByaW1lICYgMGIxMTExMTExMTExMDAwMDAwMDAwMCkgPj4+IDEwKTtcclxuICAgICAgICAgICAgY29uc3QgdzIgPSAweERDMDAgKyAoKHVQcmltZSAmIDBiMDAwMDAwMDAwMDExMTExMTExMTEpID4+PiAwKTtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSh3MSkpO1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKHcyKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBpbGxlZ2FsIGNvZGUgcG9pbnRcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSgweEZGRkQpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0LmpvaW4oJycpO1xyXG59XHJcbi8qKlxyXG4gKiBHZW5lcmF0ZWQgdXNpbmcgaHR0cHM6Ly9naXRodWIuY29tL2FsZXhkaW1hL3VuaWNvZGUtdXRpbHMvYmxvYi9tYXN0ZXIvZ2VuZXJhdGUtcnRsLXRlc3QuanNcclxuICovXHJcbmNvbnN0IENPTlRBSU5TX1JUTCA9IC8oPzpbXFx1MDVCRVxcdTA1QzBcXHUwNUMzXFx1MDVDNlxcdTA1RDAtXFx1MDVGNFxcdTA2MDhcXHUwNjBCXFx1MDYwRFxcdTA2MUItXFx1MDY0QVxcdTA2NkQtXFx1MDY2RlxcdTA2NzEtXFx1MDZENVxcdTA2RTVcXHUwNkU2XFx1MDZFRVxcdTA2RUZcXHUwNkZBLVxcdTA3MTBcXHUwNzEyLVxcdTA3MkZcXHUwNzRELVxcdTA3QTVcXHUwN0IxLVxcdTA3RUFcXHUwN0Y0XFx1MDdGNVxcdTA3RkEtXFx1MDgxNVxcdTA4MUFcXHUwODI0XFx1MDgyOFxcdTA4MzAtXFx1MDg1OFxcdTA4NUUtXFx1MDhCRFxcdTIwMEZcXHVGQjFEXFx1RkIxRi1cXHVGQjI4XFx1RkIyQS1cXHVGRDNEXFx1RkQ1MC1cXHVGREZDXFx1RkU3MC1cXHVGRUZDXXxcXHVEODAyW1xcdURDMDAtXFx1REQxQlxcdUREMjAtXFx1REUwMFxcdURFMTAtXFx1REUzM1xcdURFNDAtXFx1REVFNFxcdURFRUItXFx1REYzNVxcdURGNDAtXFx1REZGRl18XFx1RDgwM1tcXHVEQzAwLVxcdURDRkZdfFxcdUQ4M0FbXFx1REMwMC1cXHVEQ0NGXFx1REQwMC1cXHVERDQzXFx1REQ1MC1cXHVERkZGXXxcXHVEODNCW1xcdURDMDAtXFx1REVCQl0pLztcclxuLyoqXHJcbiAqIFJldHVybnMgdHJ1ZSBpZiBgc3RyYCBjb250YWlucyBhbnkgVW5pY29kZSBjaGFyYWN0ZXIgdGhhdCBpcyBjbGFzc2lmaWVkIGFzIFwiUlwiIG9yIFwiQUxcIi5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb250YWluc1JUTChzdHIpIHtcclxuICAgIHJldHVybiBDT05UQUlOU19SVEwudGVzdChzdHIpO1xyXG59XHJcbi8qKlxyXG4gKiBHZW5lcmF0ZWQgdXNpbmcgaHR0cHM6Ly9naXRodWIuY29tL2FsZXhkaW1hL3VuaWNvZGUtdXRpbHMvYmxvYi9tYXN0ZXIvZ2VuZXJhdGUtZW1vamktdGVzdC5qc1xyXG4gKi9cclxuY29uc3QgQ09OVEFJTlNfRU1PSkkgPSAvKD86W1xcdTIzMUFcXHUyMzFCXFx1MjNGMFxcdTIzRjNcXHUyNjAwLVxcdTI3QkZcXHUyQjUwXFx1MkI1NV18XFx1RDgzQ1tcXHVEREU2LVxcdURERkZcXHVERjAwLVxcdURGRkZdfFxcdUQ4M0RbXFx1REMwMC1cXHVERTRGXFx1REU4MC1cXHVERUZDXFx1REZFMC1cXHVERkVCXXxcXHVEODNFW1xcdUREMDAtXFx1RERGRlxcdURFNzAtXFx1REVENl0pLztcclxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRhaW5zRW1vamkoc3RyKSB7XHJcbiAgICByZXR1cm4gQ09OVEFJTlNfRU1PSkkudGVzdChzdHIpO1xyXG59XHJcbmNvbnN0IElTX0JBU0lDX0FTQ0lJID0gL15bXFx0XFxuXFxyXFx4MjAtXFx4N0VdKiQvO1xyXG4vKipcclxuICogUmV0dXJucyB0cnVlIGlmIGBzdHJgIGNvbnRhaW5zIG9ubHkgYmFzaWMgQVNDSUkgY2hhcmFjdGVycyBpbiB0aGUgcmFuZ2UgMzIgLSAxMjYgKGluY2x1ZGluZyAzMiBhbmQgMTI2KSBvciBcXG4sIFxcciwgXFx0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNCYXNpY0FTQ0lJKHN0cikge1xyXG4gICAgcmV0dXJuIElTX0JBU0lDX0FTQ0lJLnRlc3Qoc3RyKTtcclxufVxyXG5leHBvcnQgY29uc3QgVU5VU1VBTF9MSU5FX1RFUk1JTkFUT1JTID0gL1tcXHUyMDI4XFx1MjAyOV0vOyAvLyBMSU5FIFNFUEFSQVRPUiAoTFMpIG9yIFBBUkFHUkFQSCBTRVBBUkFUT1IgKFBTKVxyXG4vKipcclxuICogUmV0dXJucyB0cnVlIGlmIGBzdHJgIGNvbnRhaW5zIHVudXN1YWwgbGluZSB0ZXJtaW5hdG9ycywgbGlrZSBMUyBvciBQU1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRhaW5zVW51c3VhbExpbmVUZXJtaW5hdG9ycyhzdHIpIHtcclxuICAgIHJldHVybiBVTlVTVUFMX0xJTkVfVEVSTUlOQVRPUlMudGVzdChzdHIpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBjb250YWluc0Z1bGxXaWR0aENoYXJhY3RlcihzdHIpIHtcclxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzdHIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICBpZiAoaXNGdWxsV2lkdGhDaGFyYWN0ZXIoc3RyLmNoYXJDb2RlQXQoaSkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gaXNGdWxsV2lkdGhDaGFyYWN0ZXIoY2hhckNvZGUpIHtcclxuICAgIC8vIERvIGEgY2hlYXAgdHJpY2sgdG8gYmV0dGVyIHN1cHBvcnQgd3JhcHBpbmcgb2Ygd2lkZSBjaGFyYWN0ZXJzLCB0cmVhdCB0aGVtIGFzIDIgY29sdW1uc1xyXG4gICAgLy8gaHR0cDovL2pyZ3JhcGhpeC5uZXQvcmVzZWFyY2gvdW5pY29kZV9ibG9ja3MucGhwXHJcbiAgICAvLyAgICAgICAgICAyRTgwIOKAlCAyRUZGICAgQ0pLIFJhZGljYWxzIFN1cHBsZW1lbnRcclxuICAgIC8vICAgICAgICAgIDJGMDAg4oCUIDJGREYgICBLYW5neGkgUmFkaWNhbHNcclxuICAgIC8vICAgICAgICAgIDJGRjAg4oCUIDJGRkYgICBJZGVvZ3JhcGhpYyBEZXNjcmlwdGlvbiBDaGFyYWN0ZXJzXHJcbiAgICAvLyAgICAgICAgICAzMDAwIOKAlCAzMDNGICAgQ0pLIFN5bWJvbHMgYW5kIFB1bmN0dWF0aW9uXHJcbiAgICAvLyAgICAgICAgICAzMDQwIOKAlCAzMDlGICAgSGlyYWdhbmFcclxuICAgIC8vICAgICAgICAgIDMwQTAg4oCUIDMwRkYgICBLYXRha2FuYVxyXG4gICAgLy8gICAgICAgICAgMzEwMCDigJQgMzEyRiAgIEJvcG9tb2ZvXHJcbiAgICAvLyAgICAgICAgICAzMTMwIOKAlCAzMThGICAgSGFuZ3VsIENvbXBhdGliaWxpdHkgSmFtb1xyXG4gICAgLy8gICAgICAgICAgMzE5MCDigJQgMzE5RiAgIEthbmJ1blxyXG4gICAgLy8gICAgICAgICAgMzFBMCDigJQgMzFCRiAgIEJvcG9tb2ZvIEV4dGVuZGVkXHJcbiAgICAvLyAgICAgICAgICAzMUYwIOKAlCAzMUZGICAgS2F0YWthbmEgUGhvbmV0aWMgRXh0ZW5zaW9uc1xyXG4gICAgLy8gICAgICAgICAgMzIwMCDigJQgMzJGRiAgIEVuY2xvc2VkIENKSyBMZXR0ZXJzIGFuZCBNb250aHNcclxuICAgIC8vICAgICAgICAgIDMzMDAg4oCUIDMzRkYgICBDSksgQ29tcGF0aWJpbGl0eVxyXG4gICAgLy8gICAgICAgICAgMzQwMCDigJQgNERCRiAgIENKSyBVbmlmaWVkIElkZW9ncmFwaHMgRXh0ZW5zaW9uIEFcclxuICAgIC8vICAgICAgICAgIDREQzAg4oCUIDRERkYgICBZaWppbmcgSGV4YWdyYW0gU3ltYm9sc1xyXG4gICAgLy8gICAgICAgICAgNEUwMCDigJQgOUZGRiAgIENKSyBVbmlmaWVkIElkZW9ncmFwaHNcclxuICAgIC8vICAgICAgICAgIEEwMDAg4oCUIEE0OEYgICBZaSBTeWxsYWJsZXNcclxuICAgIC8vICAgICAgICAgIEE0OTAg4oCUIEE0Q0YgICBZaSBSYWRpY2Fsc1xyXG4gICAgLy8gICAgICAgICAgQUMwMCDigJQgRDdBRiAgIEhhbmd1bCBTeWxsYWJsZXNcclxuICAgIC8vIFtJR05PUkVdIEQ4MDAg4oCUIERCN0YgICBIaWdoIFN1cnJvZ2F0ZXNcclxuICAgIC8vIFtJR05PUkVdIERCODAg4oCUIERCRkYgICBIaWdoIFByaXZhdGUgVXNlIFN1cnJvZ2F0ZXNcclxuICAgIC8vIFtJR05PUkVdIERDMDAg4oCUIERGRkYgICBMb3cgU3Vycm9nYXRlc1xyXG4gICAgLy8gW0lHTk9SRV0gRTAwMCDigJQgRjhGRiAgIFByaXZhdGUgVXNlIEFyZWFcclxuICAgIC8vICAgICAgICAgIEY5MDAg4oCUIEZBRkYgICBDSksgQ29tcGF0aWJpbGl0eSBJZGVvZ3JhcGhzXHJcbiAgICAvLyBbSUdOT1JFXSBGQjAwIOKAlCBGQjRGICAgQWxwaGFiZXRpYyBQcmVzZW50YXRpb24gRm9ybXNcclxuICAgIC8vIFtJR05PUkVdIEZCNTAg4oCUIEZERkYgICBBcmFiaWMgUHJlc2VudGF0aW9uIEZvcm1zLUFcclxuICAgIC8vIFtJR05PUkVdIEZFMDAg4oCUIEZFMEYgICBWYXJpYXRpb24gU2VsZWN0b3JzXHJcbiAgICAvLyBbSUdOT1JFXSBGRTIwIOKAlCBGRTJGICAgQ29tYmluaW5nIEhhbGYgTWFya3NcclxuICAgIC8vIFtJR05PUkVdIEZFMzAg4oCUIEZFNEYgICBDSksgQ29tcGF0aWJpbGl0eSBGb3Jtc1xyXG4gICAgLy8gW0lHTk9SRV0gRkU1MCDigJQgRkU2RiAgIFNtYWxsIEZvcm0gVmFyaWFudHNcclxuICAgIC8vIFtJR05PUkVdIEZFNzAg4oCUIEZFRkYgICBBcmFiaWMgUHJlc2VudGF0aW9uIEZvcm1zLUJcclxuICAgIC8vICAgICAgICAgIEZGMDAg4oCUIEZGRUYgICBIYWxmd2lkdGggYW5kIEZ1bGx3aWR0aCBGb3Jtc1xyXG4gICAgLy8gICAgICAgICAgICAgICBbaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSGFsZndpZHRoX2FuZF9mdWxsd2lkdGhfZm9ybXNdXHJcbiAgICAvLyAgICAgICAgICAgICAgIG9mIHdoaWNoIEZGMDEgLSBGRjVFIGZ1bGx3aWR0aCBBU0NJSSBvZiAyMSB0byA3RVxyXG4gICAgLy8gW0lHTk9SRV0gICAgYW5kIEZGNjUgLSBGRkRDIGhhbGZ3aWR0aCBvZiBLYXRha2FuYSBhbmQgSGFuZ3VsXHJcbiAgICAvLyBbSUdOT1JFXSBGRkYwIOKAlCBGRkZGICAgU3BlY2lhbHNcclxuICAgIGNoYXJDb2RlID0gK2NoYXJDb2RlOyAvLyBAcGVyZlxyXG4gICAgcmV0dXJuICgoY2hhckNvZGUgPj0gMHgyRTgwICYmIGNoYXJDb2RlIDw9IDB4RDdBRilcclxuICAgICAgICB8fCAoY2hhckNvZGUgPj0gMHhGOTAwICYmIGNoYXJDb2RlIDw9IDB4RkFGRilcclxuICAgICAgICB8fCAoY2hhckNvZGUgPj0gMHhGRjAxICYmIGNoYXJDb2RlIDw9IDB4RkY1RSkpO1xyXG59XHJcbi8qKlxyXG4gKiBBIGZhc3QgZnVuY3Rpb24gKHRoZXJlZm9yZSBpbXByZWNpc2UpIHRvIGNoZWNrIGlmIGNvZGUgcG9pbnRzIGFyZSBlbW9qaXMuXHJcbiAqIEdlbmVyYXRlZCB1c2luZyBodHRwczovL2dpdGh1Yi5jb20vYWxleGRpbWEvdW5pY29kZS11dGlscy9ibG9iL21hc3Rlci9nZW5lcmF0ZS1lbW9qaS10ZXN0LmpzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNFbW9qaUltcHJlY2lzZSh4KSB7XHJcbiAgICByZXR1cm4gKCh4ID49IDB4MUYxRTYgJiYgeCA8PSAweDFGMUZGKSB8fCAoeCA9PT0gODk4NikgfHwgKHggPT09IDg5ODcpIHx8ICh4ID09PSA5MjAwKVxyXG4gICAgICAgIHx8ICh4ID09PSA5MjAzKSB8fCAoeCA+PSA5NzI4ICYmIHggPD0gMTAxNzUpIHx8ICh4ID09PSAxMTA4OCkgfHwgKHggPT09IDExMDkzKVxyXG4gICAgICAgIHx8ICh4ID49IDEyNzc0NCAmJiB4IDw9IDEyODU5MSkgfHwgKHggPj0gMTI4NjQwICYmIHggPD0gMTI4NzY0KVxyXG4gICAgICAgIHx8ICh4ID49IDEyODk5MiAmJiB4IDw9IDEyOTAwMykgfHwgKHggPj0gMTI5MjgwICYmIHggPD0gMTI5NTM1KVxyXG4gICAgICAgIHx8ICh4ID49IDEyOTY0OCAmJiB4IDw9IDEyOTc1MCkpO1xyXG59XHJcbi8vIC0tIFVURi04IEJPTVxyXG5leHBvcnQgY29uc3QgVVRGOF9CT01fQ0hBUkFDVEVSID0gU3RyaW5nLmZyb21DaGFyQ29kZSg2NTI3OSAvKiBVVEY4X0JPTSAqLyk7XHJcbmV4cG9ydCBmdW5jdGlvbiBzdGFydHNXaXRoVVRGOEJPTShzdHIpIHtcclxuICAgIHJldHVybiAhIShzdHIgJiYgc3RyLmxlbmd0aCA+IDAgJiYgc3RyLmNoYXJDb2RlQXQoMCkgPT09IDY1Mjc5IC8qIFVURjhfQk9NICovKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnNVcHBlcmNhc2VDaGFyYWN0ZXIodGFyZ2V0LCBpZ25vcmVFc2NhcGVkQ2hhcnMgPSBmYWxzZSkge1xyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoaWdub3JlRXNjYXBlZENoYXJzKSB7XHJcbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnJlcGxhY2UoL1xcXFwuL2csICcnKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0YXJnZXQudG9Mb3dlckNhc2UoKSAhPT0gdGFyZ2V0O1xyXG59XHJcbi8qKlxyXG4gKiBQcm9kdWNlcyAnYSctJ3onLCBmb2xsb3dlZCBieSAnQSctJ1onLi4uIGZvbGxvd2VkIGJ5ICdhJy0neicsIGV0Yy5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzaW5nbGVMZXR0ZXJIYXNoKG4pIHtcclxuICAgIGNvbnN0IExFVFRFUlNfQ05UID0gKDkwIC8qIFogKi8gLSA2NSAvKiBBICovICsgMSk7XHJcbiAgICBuID0gbiAlICgyICogTEVUVEVSU19DTlQpO1xyXG4gICAgaWYgKG4gPCBMRVRURVJTX0NOVCkge1xyXG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKDk3IC8qIGEgKi8gKyBuKTtcclxuICAgIH1cclxuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKDY1IC8qIEEgKi8gKyBuIC0gTEVUVEVSU19DTlQpO1xyXG59XHJcbi8vI3JlZ2lvbiBVbmljb2RlIEdyYXBoZW1lIEJyZWFrXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRHcmFwaGVtZUJyZWFrVHlwZShjb2RlUG9pbnQpIHtcclxuICAgIGNvbnN0IGdyYXBoZW1lQnJlYWtUcmVlID0gR3JhcGhlbWVCcmVha1RyZWUuZ2V0SW5zdGFuY2UoKTtcclxuICAgIHJldHVybiBncmFwaGVtZUJyZWFrVHJlZS5nZXRHcmFwaGVtZUJyZWFrVHlwZShjb2RlUG9pbnQpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBicmVha0JldHdlZW5HcmFwaGVtZUJyZWFrVHlwZShicmVha1R5cGVBLCBicmVha1R5cGVCKSB7XHJcbiAgICAvLyBodHRwOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIyOS8jR3JhcGhlbWVfQ2x1c3Rlcl9Cb3VuZGFyeV9SdWxlc1xyXG4gICAgLy8gISEhIExldCdzIG1ha2UgdGhlIGNvbW1vbiBjYXNlIGEgYml0IGZhc3RlclxyXG4gICAgaWYgKGJyZWFrVHlwZUEgPT09IDAgLyogT3RoZXIgKi8pIHtcclxuICAgICAgICAvLyBzZWUgaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvUHVibGljLzEzLjAuMC91Y2QvYXV4aWxpYXJ5L0dyYXBoZW1lQnJlYWtUZXN0LTEzLjAuMGQxMC5odG1sI3RhYmxlXHJcbiAgICAgICAgcmV0dXJuIChicmVha1R5cGVCICE9PSA1IC8qIEV4dGVuZCAqLyAmJiBicmVha1R5cGVCICE9PSA3IC8qIFNwYWNpbmdNYXJrICovKTtcclxuICAgIH1cclxuICAgIC8vIERvIG5vdCBicmVhayBiZXR3ZWVuIGEgQ1IgYW5kIExGLiBPdGhlcndpc2UsIGJyZWFrIGJlZm9yZSBhbmQgYWZ0ZXIgY29udHJvbHMuXHJcbiAgICAvLyBHQjMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1Igw5cgTEZcclxuICAgIC8vIEdCNCAgICAgICAgICAgICAgICAgICAgICAgKENvbnRyb2wgfCBDUiB8IExGKSDDt1xyXG4gICAgLy8gR0I1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIMO3IChDb250cm9sIHwgQ1IgfCBMRilcclxuICAgIGlmIChicmVha1R5cGVBID09PSAyIC8qIENSICovKSB7XHJcbiAgICAgICAgaWYgKGJyZWFrVHlwZUIgPT09IDMgLyogTEYgKi8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBHQjNcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoYnJlYWtUeXBlQSA9PT0gNCAvKiBDb250cm9sICovIHx8IGJyZWFrVHlwZUEgPT09IDIgLyogQ1IgKi8gfHwgYnJlYWtUeXBlQSA9PT0gMyAvKiBMRiAqLykge1xyXG4gICAgICAgIHJldHVybiB0cnVlOyAvLyBHQjRcclxuICAgIH1cclxuICAgIGlmIChicmVha1R5cGVCID09PSA0IC8qIENvbnRyb2wgKi8gfHwgYnJlYWtUeXBlQiA9PT0gMiAvKiBDUiAqLyB8fCBicmVha1R5cGVCID09PSAzIC8qIExGICovKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7IC8vIEdCNVxyXG4gICAgfVxyXG4gICAgLy8gRG8gbm90IGJyZWFrIEhhbmd1bCBzeWxsYWJsZSBzZXF1ZW5jZXMuXHJcbiAgICAvLyBHQjYgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEwgw5cgKEwgfCBWIHwgTFYgfCBMVlQpXHJcbiAgICAvLyBHQjcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKExWIHwgVikgw5cgKFYgfCBUKVxyXG4gICAgLy8gR0I4ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKExWVCB8IFQpIMOXIFRcclxuICAgIGlmIChicmVha1R5cGVBID09PSA4IC8qIEwgKi8pIHtcclxuICAgICAgICBpZiAoYnJlYWtUeXBlQiA9PT0gOCAvKiBMICovIHx8IGJyZWFrVHlwZUIgPT09IDkgLyogViAqLyB8fCBicmVha1R5cGVCID09PSAxMSAvKiBMViAqLyB8fCBicmVha1R5cGVCID09PSAxMiAvKiBMVlQgKi8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBHQjZcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoYnJlYWtUeXBlQSA9PT0gMTEgLyogTFYgKi8gfHwgYnJlYWtUeXBlQSA9PT0gOSAvKiBWICovKSB7XHJcbiAgICAgICAgaWYgKGJyZWFrVHlwZUIgPT09IDkgLyogViAqLyB8fCBicmVha1R5cGVCID09PSAxMCAvKiBUICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gR0I3XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGJyZWFrVHlwZUEgPT09IDEyIC8qIExWVCAqLyB8fCBicmVha1R5cGVBID09PSAxMCAvKiBUICovKSB7XHJcbiAgICAgICAgaWYgKGJyZWFrVHlwZUIgPT09IDEwIC8qIFQgKi8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBHQjhcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBEbyBub3QgYnJlYWsgYmVmb3JlIGV4dGVuZGluZyBjaGFyYWN0ZXJzIG9yIFpXSi5cclxuICAgIC8vIEdCOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDDlyAoRXh0ZW5kIHwgWldKKVxyXG4gICAgaWYgKGJyZWFrVHlwZUIgPT09IDUgLyogRXh0ZW5kICovIHx8IGJyZWFrVHlwZUIgPT09IDEzIC8qIFpXSiAqLykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gR0I5XHJcbiAgICB9XHJcbiAgICAvLyBUaGUgR0I5YSBhbmQgR0I5YiBydWxlcyBvbmx5IGFwcGx5IHRvIGV4dGVuZGVkIGdyYXBoZW1lIGNsdXN0ZXJzOlxyXG4gICAgLy8gRG8gbm90IGJyZWFrIGJlZm9yZSBTcGFjaW5nTWFya3MsIG9yIGFmdGVyIFByZXBlbmQgY2hhcmFjdGVycy5cclxuICAgIC8vIEdCOWEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDDlyBTcGFjaW5nTWFya1xyXG4gICAgLy8gR0I5YiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcmVwZW5kIMOXXHJcbiAgICBpZiAoYnJlYWtUeXBlQiA9PT0gNyAvKiBTcGFjaW5nTWFyayAqLykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gR0I5YVxyXG4gICAgfVxyXG4gICAgaWYgKGJyZWFrVHlwZUEgPT09IDEgLyogUHJlcGVuZCAqLykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gR0I5YlxyXG4gICAgfVxyXG4gICAgLy8gRG8gbm90IGJyZWFrIHdpdGhpbiBlbW9qaSBtb2RpZmllciBzZXF1ZW5jZXMgb3IgZW1vamkgendqIHNlcXVlbmNlcy5cclxuICAgIC8vIEdCMTEgICAgXFxwe0V4dGVuZGVkX1BpY3RvZ3JhcGhpY30gRXh0ZW5kKiBaV0ogw5cgXFxwe0V4dGVuZGVkX1BpY3RvZ3JhcGhpY31cclxuICAgIGlmIChicmVha1R5cGVBID09PSAxMyAvKiBaV0ogKi8gJiYgYnJlYWtUeXBlQiA9PT0gMTQgLyogRXh0ZW5kZWRfUGljdG9ncmFwaGljICovKSB7XHJcbiAgICAgICAgLy8gTm90ZTogd2UgYXJlIG5vdCBpbXBsZW1lbnRpbmcgdGhlIHJ1bGUgZW50aXJlbHkgaGVyZSB0byBhdm9pZCBpbnRyb2R1Y2luZyBzdGF0ZXNcclxuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIEdCMTFcclxuICAgIH1cclxuICAgIC8vIEdCMTIgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdCAoUkkgUkkpKiBSSSDDlyBSSVxyXG4gICAgLy8gR0IxMyAgICAgICAgICAgICAgICAgICAgICAgIFteUkldIChSSSBSSSkqIFJJIMOXIFJJXHJcbiAgICBpZiAoYnJlYWtUeXBlQSA9PT0gNiAvKiBSZWdpb25hbF9JbmRpY2F0b3IgKi8gJiYgYnJlYWtUeXBlQiA9PT0gNiAvKiBSZWdpb25hbF9JbmRpY2F0b3IgKi8pIHtcclxuICAgICAgICAvLyBOb3RlOiB3ZSBhcmUgbm90IGltcGxlbWVudGluZyB0aGUgcnVsZSBlbnRpcmVseSBoZXJlIHRvIGF2b2lkIGludHJvZHVjaW5nIHN0YXRlc1xyXG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gR0IxMiAmIEdCMTNcclxuICAgIH1cclxuICAgIC8vIEdCOTk5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFueSDDtyBBbnlcclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmNsYXNzIEdyYXBoZW1lQnJlYWtUcmVlIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuX2RhdGEgPSBnZXRHcmFwaGVtZUJyZWFrUmF3RGF0YSgpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGdldEluc3RhbmNlKCkge1xyXG4gICAgICAgIGlmICghR3JhcGhlbWVCcmVha1RyZWUuX0lOU1RBTkNFKSB7XHJcbiAgICAgICAgICAgIEdyYXBoZW1lQnJlYWtUcmVlLl9JTlNUQU5DRSA9IG5ldyBHcmFwaGVtZUJyZWFrVHJlZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gR3JhcGhlbWVCcmVha1RyZWUuX0lOU1RBTkNFO1xyXG4gICAgfVxyXG4gICAgZ2V0R3JhcGhlbWVCcmVha1R5cGUoY29kZVBvaW50KSB7XHJcbiAgICAgICAgLy8gISEhIExldCdzIG1ha2UgN2JpdCBBU0NJSSBhIGJpdCBmYXN0ZXI6IDAuLjMxXHJcbiAgICAgICAgaWYgKGNvZGVQb2ludCA8IDMyKSB7XHJcbiAgICAgICAgICAgIGlmIChjb2RlUG9pbnQgPT09IDEwIC8qIExpbmVGZWVkICovKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMyAvKiBMRiAqLztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY29kZVBvaW50ID09PSAxMyAvKiBDYXJyaWFnZVJldHVybiAqLykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDIgLyogQ1IgKi87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIDQgLyogQ29udHJvbCAqLztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gISEhIExldCdzIG1ha2UgN2JpdCBBU0NJSSBhIGJpdCBmYXN0ZXI6IDMyLi4xMjZcclxuICAgICAgICBpZiAoY29kZVBvaW50IDwgMTI3KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwIC8qIE90aGVyICovO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5fZGF0YTtcclxuICAgICAgICBjb25zdCBub2RlQ291bnQgPSBkYXRhLmxlbmd0aCAvIDM7XHJcbiAgICAgICAgbGV0IG5vZGVJbmRleCA9IDE7XHJcbiAgICAgICAgd2hpbGUgKG5vZGVJbmRleCA8PSBub2RlQ291bnQpIHtcclxuICAgICAgICAgICAgaWYgKGNvZGVQb2ludCA8IGRhdGFbMyAqIG5vZGVJbmRleF0pIHtcclxuICAgICAgICAgICAgICAgIC8vIGdvIGxlZnRcclxuICAgICAgICAgICAgICAgIG5vZGVJbmRleCA9IDIgKiBub2RlSW5kZXg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY29kZVBvaW50ID4gZGF0YVszICogbm9kZUluZGV4ICsgMV0pIHtcclxuICAgICAgICAgICAgICAgIC8vIGdvIHJpZ2h0XHJcbiAgICAgICAgICAgICAgICBub2RlSW5kZXggPSAyICogbm9kZUluZGV4ICsgMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGhpdFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFbMyAqIG5vZGVJbmRleCArIDJdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAwIC8qIE90aGVyICovO1xyXG4gICAgfVxyXG59XHJcbkdyYXBoZW1lQnJlYWtUcmVlLl9JTlNUQU5DRSA9IG51bGw7XHJcbmZ1bmN0aW9uIGdldEdyYXBoZW1lQnJlYWtSYXdEYXRhKCkge1xyXG4gICAgLy8gZ2VuZXJhdGVkIHVzaW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGV4ZGltYS91bmljb2RlLXV0aWxzL2Jsb2IvbWFzdGVyL2dlbmVyYXRlLWdyYXBoZW1lLWJyZWFrLmpzXHJcbiAgICByZXR1cm4gSlNPTi5wYXJzZSgnWzAsMCwwLDUxNTkyLDUxNTkyLDExLDQ0NDI0LDQ0NDI0LDExLDcyMjUxLDcyMjU0LDUsNzE1MCw3MTUwLDcsNDgwMDgsNDgwMDgsMTEsNTUxNzYsNTUxNzYsMTEsMTI4NDIwLDEyODQyMCwxNCwzMjc2LDMyNzcsNSw5OTc5LDk5ODAsMTQsNDYyMTYsNDYyMTYsMTEsNDk4MDAsNDk4MDAsMTEsNTMzODQsNTMzODQsMTEsNzA3MjYsNzA3MjYsNSwxMjI5MTUsMTIyOTE2LDUsMTI5MzIwLDEyOTMyNywxNCwyNTU4LDI1NTgsNSw1OTA2LDU5MDgsNSw5NzYyLDk3NjMsMTQsNDMzNjAsNDMzODgsOCw0NTMyMCw0NTMyMCwxMSw0NzExMiw0NzExMiwxMSw0ODkwNCw0ODkwNCwxMSw1MDY5Niw1MDY5NiwxMSw1MjQ4OCw1MjQ4OCwxMSw1NDI4MCw1NDI4MCwxMSw3MDA4Miw3MDA4MywxLDcxMzUwLDcxMzUwLDcsNzMxMTEsNzMxMTEsNSwxMjc4OTIsMTI3ODkzLDE0LDEyODcyNiwxMjg3MjcsMTQsMTI5NDczLDEyOTQ3NCwxNCwyMDI3LDIwMzUsNSwyOTAxLDI5MDIsNSwzNzg0LDM3ODksNSw2NzU0LDY3NTQsNSw4NDE4LDg0MjAsNSw5ODc3LDk4NzcsMTQsMTEwODgsMTEwODgsMTQsNDQwMDgsNDQwMDgsNSw0NDg3Miw0NDg3MiwxMSw0NTc2OCw0NTc2OCwxMSw0NjY2NCw0NjY2NCwxMSw0NzU2MCw0NzU2MCwxMSw0ODQ1Niw0ODQ1NiwxMSw0OTM1Miw0OTM1MiwxMSw1MDI0OCw1MDI0OCwxMSw1MTE0NCw1MTE0NCwxMSw1MjA0MCw1MjA0MCwxMSw1MjkzNiw1MjkzNiwxMSw1MzgzMiw1MzgzMiwxMSw1NDcyOCw1NDcyOCwxMSw2OTgxMSw2OTgxNCw1LDcwNDU5LDcwNDYwLDUsNzEwOTYsNzEwOTksNyw3MTk5OCw3MTk5OCw1LDcyODc0LDcyODgwLDUsMTE5MTQ5LDExOTE0OSw3LDEyNzM3NCwxMjczNzQsMTQsMTI4MzM1LDEyODMzNSwxNCwxMjg0ODIsMTI4NDgyLDE0LDEyODc2NSwxMjg3NjcsMTQsMTI5Mzk5LDEyOTQwMCwxNCwxMjk2ODAsMTI5Njg1LDE0LDE0NzYsMTQ3Nyw1LDIzNzcsMjM4MCw3LDI3NTksMjc2MCw1LDMxMzcsMzE0MCw3LDM0NTgsMzQ1OSw3LDQxNTMsNDE1NCw1LDY0MzIsNjQzNCw1LDY5NzgsNjk3OCw1LDc2NzUsNzY3OSw1LDk3MjMsOTcyNiwxNCw5ODIzLDk4MjMsMTQsOTkxOSw5OTIzLDE0LDEwMDM1LDEwMDM2LDE0LDQyNzM2LDQyNzM3LDUsNDM1OTYsNDM1OTYsNSw0NDIwMCw0NDIwMCwxMSw0NDY0OCw0NDY0OCwxMSw0NTA5Niw0NTA5NiwxMSw0NTU0NCw0NTU0NCwxMSw0NTk5Miw0NTk5MiwxMSw0NjQ0MCw0NjQ0MCwxMSw0Njg4OCw0Njg4OCwxMSw0NzMzNiw0NzMzNiwxMSw0Nzc4NCw0Nzc4NCwxMSw0ODIzMiw0ODIzMiwxMSw0ODY4MCw0ODY4MCwxMSw0OTEyOCw0OTEyOCwxMSw0OTU3Niw0OTU3NiwxMSw1MDAyNCw1MDAyNCwxMSw1MDQ3Miw1MDQ3MiwxMSw1MDkyMCw1MDkyMCwxMSw1MTM2OCw1MTM2OCwxMSw1MTgxNiw1MTgxNiwxMSw1MjI2NCw1MjI2NCwxMSw1MjcxMiw1MjcxMiwxMSw1MzE2MCw1MzE2MCwxMSw1MzYwOCw1MzYwOCwxMSw1NDA1Niw1NDA1NiwxMSw1NDUwNCw1NDUwNCwxMSw1NDk1Miw1NDk1MiwxMSw2ODEwOCw2ODExMSw1LDY5OTMzLDY5OTQwLDUsNzAxOTcsNzAxOTcsNyw3MDQ5OCw3MDQ5OSw3LDcwODQ1LDcwODQ1LDUsNzEyMjksNzEyMjksNSw3MTcyNyw3MTczNSw1LDcyMTU0LDcyMTU1LDUsNzIzNDQsNzIzNDUsNSw3MzAyMyw3MzAyOSw1LDk0MDk1LDk0MDk4LDUsMTIxNDAzLDEyMTQ1Miw1LDEyNjk4MSwxMjcxODIsMTQsMTI3NTM4LDEyNzU0NiwxNCwxMjc5OTAsMTI3OTkwLDE0LDEyODM5MSwxMjgzOTEsMTQsMTI4NDQ1LDEyODQ0OSwxNCwxMjg1MDAsMTI4NTA1LDE0LDEyODc1MiwxMjg3NTIsMTQsMTI5MTYwLDEyOTE2NywxNCwxMjkzNTYsMTI5MzU2LDE0LDEyOTQzMiwxMjk0NDIsMTQsMTI5NjQ4LDEyOTY1MSwxNCwxMjk3NTEsMTMxMDY5LDE0LDE3MywxNzMsNCwxNzU3LDE3NTcsMSwyMjc0LDIyNzQsMSwyNDk0LDI0OTQsNSwyNjQxLDI2NDEsNSwyODc2LDI4NzYsNSwzMDE0LDMwMTYsNywzMjYyLDMyNjIsNywzMzkzLDMzOTYsNSwzNTcwLDM1NzEsNywzOTY4LDM5NzIsNSw0MjI4LDQyMjgsNyw2MDg2LDYwODYsNSw2Njc5LDY2ODAsNSw2OTEyLDY5MTUsNSw3MDgwLDcwODEsNSw3MzgwLDczOTIsNSw4MjUyLDgyNTIsMTQsOTA5Niw5MDk2LDE0LDk3NDgsOTc0OSwxNCw5Nzg0LDk3ODYsMTQsOTgzMyw5ODUwLDE0LDk4OTAsOTg5NCwxNCw5OTM4LDk5MzgsMTQsOTk5OSw5OTk5LDE0LDEwMDg1LDEwMDg3LDE0LDEyMzQ5LDEyMzQ5LDE0LDQzMTM2LDQzMTM3LDcsNDM0NTQsNDM0NTYsNyw0Mzc1NSw0Mzc1NSw3LDQ0MDg4LDQ0MDg4LDExLDQ0MzEyLDQ0MzEyLDExLDQ0NTM2LDQ0NTM2LDExLDQ0NzYwLDQ0NzYwLDExLDQ0OTg0LDQ0OTg0LDExLDQ1MjA4LDQ1MjA4LDExLDQ1NDMyLDQ1NDMyLDExLDQ1NjU2LDQ1NjU2LDExLDQ1ODgwLDQ1ODgwLDExLDQ2MTA0LDQ2MTA0LDExLDQ2MzI4LDQ2MzI4LDExLDQ2NTUyLDQ2NTUyLDExLDQ2Nzc2LDQ2Nzc2LDExLDQ3MDAwLDQ3MDAwLDExLDQ3MjI0LDQ3MjI0LDExLDQ3NDQ4LDQ3NDQ4LDExLDQ3NjcyLDQ3NjcyLDExLDQ3ODk2LDQ3ODk2LDExLDQ4MTIwLDQ4MTIwLDExLDQ4MzQ0LDQ4MzQ0LDExLDQ4NTY4LDQ4NTY4LDExLDQ4NzkyLDQ4NzkyLDExLDQ5MDE2LDQ5MDE2LDExLDQ5MjQwLDQ5MjQwLDExLDQ5NDY0LDQ5NDY0LDExLDQ5Njg4LDQ5Njg4LDExLDQ5OTEyLDQ5OTEyLDExLDUwMTM2LDUwMTM2LDExLDUwMzYwLDUwMzYwLDExLDUwNTg0LDUwNTg0LDExLDUwODA4LDUwODA4LDExLDUxMDMyLDUxMDMyLDExLDUxMjU2LDUxMjU2LDExLDUxNDgwLDUxNDgwLDExLDUxNzA0LDUxNzA0LDExLDUxOTI4LDUxOTI4LDExLDUyMTUyLDUyMTUyLDExLDUyMzc2LDUyMzc2LDExLDUyNjAwLDUyNjAwLDExLDUyODI0LDUyODI0LDExLDUzMDQ4LDUzMDQ4LDExLDUzMjcyLDUzMjcyLDExLDUzNDk2LDUzNDk2LDExLDUzNzIwLDUzNzIwLDExLDUzOTQ0LDUzOTQ0LDExLDU0MTY4LDU0MTY4LDExLDU0MzkyLDU0MzkyLDExLDU0NjE2LDU0NjE2LDExLDU0ODQwLDU0ODQwLDExLDU1MDY0LDU1MDY0LDExLDY1NDM4LDY1NDM5LDUsNjk2MzMsNjk2MzMsNSw2OTgzNyw2OTgzNywxLDcwMDE4LDcwMDE4LDcsNzAxODgsNzAxOTAsNyw3MDM2OCw3MDM3MCw3LDcwNDY1LDcwNDY4LDcsNzA3MTIsNzA3MTksNSw3MDgzNSw3MDg0MCw1LDcwODUwLDcwODUxLDUsNzExMzIsNzExMzMsNSw3MTM0MCw3MTM0MCw3LDcxNDU4LDcxNDYxLDUsNzE5ODUsNzE5ODksNyw3MjAwMiw3MjAwMiw3LDcyMTkzLDcyMjAyLDUsNzIyODEsNzIyODMsNSw3Mjc2Niw3Mjc2Niw3LDcyODg1LDcyODg2LDUsNzMxMDQsNzMxMDUsNSw5MjkxMiw5MjkxNiw1LDExMzgyNCwxMTM4MjcsNCwxMTkxNzMsMTE5MTc5LDUsMTIxNTA1LDEyMTUxOSw1LDEyNTEzNiwxMjUxNDIsNSwxMjcyNzksMTI3Mjc5LDE0LDEyNzQ4OSwxMjc0OTAsMTQsMTI3NTcwLDEyNzc0MywxNCwxMjc5MDAsMTI3OTAxLDE0LDEyODI1NCwxMjgyNTQsMTQsMTI4MzY5LDEyODM3MCwxNCwxMjg0MDAsMTI4NDAwLDE0LDEyODQyNSwxMjg0MzIsMTQsMTI4NDY4LDEyODQ3NSwxNCwxMjg0ODksMTI4NDk0LDE0LDEyODcxNSwxMjg3MjAsMTQsMTI4NzQ1LDEyODc0NSwxNCwxMjg3NTksMTI4NzYwLDE0LDEyOTAwNCwxMjkwMjMsMTQsMTI5Mjk2LDEyOTMwNCwxNCwxMjkzNDAsMTI5MzQyLDE0LDEyOTM4OCwxMjkzOTIsMTQsMTI5NDA0LDEyOTQwNywxNCwxMjk0NTQsMTI5NDU1LDE0LDEyOTQ4NSwxMjk0ODcsMTQsMTI5NjU5LDEyOTY2MywxNCwxMjk3MTksMTI5NzI3LDE0LDkxNzUzNiw5MTc2MzEsNSwxMywxMywyLDExNjAsMTE2MSw1LDE1NjQsMTU2NCw0LDE4MDcsMTgwNywxLDIwODUsMjA4Nyw1LDIzNjMsMjM2Myw3LDI0MDIsMjQwMyw1LDI1MDcsMjUwOCw3LDI2MjIsMjYyNCw3LDI2OTEsMjY5MSw3LDI3ODYsMjc4Nyw1LDI4ODEsMjg4NCw1LDMwMDYsMzAwNiw1LDMwNzIsMzA3Miw1LDMxNzAsMzE3MSw1LDMyNjcsMzI2OCw3LDMzMzAsMzMzMSw3LDM0MDYsMzQwNiwxLDM1MzgsMzU0MCw1LDM2NTUsMzY2Miw1LDM4OTcsMzg5Nyw1LDQwMzgsNDAzOCw1LDQxODQsNDE4NSw1LDQzNTIsNDQ0Nyw4LDYwNjgsNjA2OSw1LDYxNTUsNjE1Nyw1LDY0NDgsNjQ0OSw3LDY3NDIsNjc0Miw1LDY3ODMsNjc4Myw1LDY5NjYsNjk3MCw1LDcwNDIsNzA0Miw3LDcxNDMsNzE0Myw3LDcyMTIsNzIxOSw1LDc0MTIsNzQxMiw1LDgyMDYsODIwNyw0LDgyOTQsODMwMyw0LDg1OTYsODYwMSwxNCw5NDEwLDk0MTAsMTQsOTc0Miw5NzQyLDE0LDk3NTcsOTc1NywxNCw5NzcwLDk3NzAsMTQsOTc5NCw5Nzk0LDE0LDk4MjgsOTgyOCwxNCw5ODU1LDk4NTUsMTQsOTg4Miw5ODgyLDE0LDk5MDAsOTkwMywxNCw5OTI5LDk5MzMsMTQsOTk2Myw5OTY3LDE0LDk5ODcsOTk4OCwxNCwxMDAwNiwxMDAwNiwxNCwxMDA2MiwxMDA2MiwxNCwxMDE3NSwxMDE3NSwxNCwxMTc0NCwxMTc3NSw1LDQyNjA3LDQyNjA3LDUsNDMwNDMsNDMwNDQsNyw0MzI2Myw0MzI2Myw1LDQzNDQ0LDQzNDQ1LDcsNDM1NjksNDM1NzAsNSw0MzY5OCw0MzcwMCw1LDQzNzY2LDQzNzY2LDUsNDQwMzIsNDQwMzIsMTEsNDQxNDQsNDQxNDQsMTEsNDQyNTYsNDQyNTYsMTEsNDQzNjgsNDQzNjgsMTEsNDQ0ODAsNDQ0ODAsMTEsNDQ1OTIsNDQ1OTIsMTEsNDQ3MDQsNDQ3MDQsMTEsNDQ4MTYsNDQ4MTYsMTEsNDQ5MjgsNDQ5MjgsMTEsNDUwNDAsNDUwNDAsMTEsNDUxNTIsNDUxNTIsMTEsNDUyNjQsNDUyNjQsMTEsNDUzNzYsNDUzNzYsMTEsNDU0ODgsNDU0ODgsMTEsNDU2MDAsNDU2MDAsMTEsNDU3MTIsNDU3MTIsMTEsNDU4MjQsNDU4MjQsMTEsNDU5MzYsNDU5MzYsMTEsNDYwNDgsNDYwNDgsMTEsNDYxNjAsNDYxNjAsMTEsNDYyNzIsNDYyNzIsMTEsNDYzODQsNDYzODQsMTEsNDY0OTYsNDY0OTYsMTEsNDY2MDgsNDY2MDgsMTEsNDY3MjAsNDY3MjAsMTEsNDY4MzIsNDY4MzIsMTEsNDY5NDQsNDY5NDQsMTEsNDcwNTYsNDcwNTYsMTEsNDcxNjgsNDcxNjgsMTEsNDcyODAsNDcyODAsMTEsNDczOTIsNDczOTIsMTEsNDc1MDQsNDc1MDQsMTEsNDc2MTYsNDc2MTYsMTEsNDc3MjgsNDc3MjgsMTEsNDc4NDAsNDc4NDAsMTEsNDc5NTIsNDc5NTIsMTEsNDgwNjQsNDgwNjQsMTEsNDgxNzYsNDgxNzYsMTEsNDgyODgsNDgyODgsMTEsNDg0MDAsNDg0MDAsMTEsNDg1MTIsNDg1MTIsMTEsNDg2MjQsNDg2MjQsMTEsNDg3MzYsNDg3MzYsMTEsNDg4NDgsNDg4NDgsMTEsNDg5NjAsNDg5NjAsMTEsNDkwNzIsNDkwNzIsMTEsNDkxODQsNDkxODQsMTEsNDkyOTYsNDkyOTYsMTEsNDk0MDgsNDk0MDgsMTEsNDk1MjAsNDk1MjAsMTEsNDk2MzIsNDk2MzIsMTEsNDk3NDQsNDk3NDQsMTEsNDk4NTYsNDk4NTYsMTEsNDk5NjgsNDk5NjgsMTEsNTAwODAsNTAwODAsMTEsNTAxOTIsNTAxOTIsMTEsNTAzMDQsNTAzMDQsMTEsNTA0MTYsNTA0MTYsMTEsNTA1MjgsNTA1MjgsMTEsNTA2NDAsNTA2NDAsMTEsNTA3NTIsNTA3NTIsMTEsNTA4NjQsNTA4NjQsMTEsNTA5NzYsNTA5NzYsMTEsNTEwODgsNTEwODgsMTEsNTEyMDAsNTEyMDAsMTEsNTEzMTIsNTEzMTIsMTEsNTE0MjQsNTE0MjQsMTEsNTE1MzYsNTE1MzYsMTEsNTE2NDgsNTE2NDgsMTEsNTE3NjAsNTE3NjAsMTEsNTE4NzIsNTE4NzIsMTEsNTE5ODQsNTE5ODQsMTEsNTIwOTYsNTIwOTYsMTEsNTIyMDgsNTIyMDgsMTEsNTIzMjAsNTIzMjAsMTEsNTI0MzIsNTI0MzIsMTEsNTI1NDQsNTI1NDQsMTEsNTI2NTYsNTI2NTYsMTEsNTI3NjgsNTI3NjgsMTEsNTI4ODAsNTI4ODAsMTEsNTI5OTIsNTI5OTIsMTEsNTMxMDQsNTMxMDQsMTEsNTMyMTYsNTMyMTYsMTEsNTMzMjgsNTMzMjgsMTEsNTM0NDAsNTM0NDAsMTEsNTM1NTIsNTM1NTIsMTEsNTM2NjQsNTM2NjQsMTEsNTM3NzYsNTM3NzYsMTEsNTM4ODgsNTM4ODgsMTEsNTQwMDAsNTQwMDAsMTEsNTQxMTIsNTQxMTIsMTEsNTQyMjQsNTQyMjQsMTEsNTQzMzYsNTQzMzYsMTEsNTQ0NDgsNTQ0NDgsMTEsNTQ1NjAsNTQ1NjAsMTEsNTQ2NzIsNTQ2NzIsMTEsNTQ3ODQsNTQ3ODQsMTEsNTQ4OTYsNTQ4OTYsMTEsNTUwMDgsNTUwMDgsMTEsNTUxMjAsNTUxMjAsMTEsNjQyODYsNjQyODYsNSw2NjI3Miw2NjI3Miw1LDY4OTAwLDY4OTAzLDUsNjk3NjIsNjk3NjIsNyw2OTgxNyw2OTgxOCw1LDY5OTI3LDY5OTMxLDUsNzAwMDMsNzAwMDMsNSw3MDA3MCw3MDA3OCw1LDcwMDk0LDcwMDk0LDcsNzAxOTQsNzAxOTUsNyw3MDIwNiw3MDIwNiw1LDcwNDAwLDcwNDAxLDUsNzA0NjMsNzA0NjMsNyw3MDQ3NSw3MDQ3Nyw3LDcwNTEyLDcwNTE2LDUsNzA3MjIsNzA3MjQsNSw3MDgzMiw3MDgzMiw1LDcwODQyLDcwODQyLDUsNzA4NDcsNzA4NDgsNSw3MTA4OCw3MTA4OSw3LDcxMTAyLDcxMTAyLDcsNzEyMTksNzEyMjYsNSw3MTIzMSw3MTIzMiw1LDcxMzQyLDcxMzQzLDcsNzE0NTMsNzE0NTUsNSw3MTQ2Myw3MTQ2Nyw1LDcxNzM3LDcxNzM4LDUsNzE5OTUsNzE5OTYsNSw3MjAwMCw3MjAwMCw3LDcyMTQ1LDcyMTQ3LDcsNzIxNjAsNzIxNjAsNSw3MjI0OSw3MjI0OSw3LDcyMjczLDcyMjc4LDUsNzIzMzAsNzIzNDIsNSw3Mjc1Miw3Mjc1OCw1LDcyODUwLDcyODcxLDUsNzI4ODIsNzI4ODMsNSw3MzAxOCw3MzAxOCw1LDczMDMxLDczMDMxLDUsNzMxMDksNzMxMDksNSw3MzQ2MSw3MzQ2Miw3LDk0MDMxLDk0MDMxLDUsOTQxOTIsOTQxOTMsNywxMTkxNDIsMTE5MTQyLDcsMTE5MTU1LDExOTE2Miw0LDExOTM2MiwxMTkzNjQsNSwxMjE0NzYsMTIxNDc2LDUsMTIyODg4LDEyMjkwNCw1LDEyMzE4NCwxMjMxOTAsNSwxMjY5NzYsMTI2OTc5LDE0LDEyNzE4NCwxMjcyMzEsMTQsMTI3MzQ0LDEyNzM0NSwxNCwxMjc0MDUsMTI3NDYxLDE0LDEyNzUxNCwxMjc1MTQsMTQsMTI3NTYxLDEyNzU2NywxNCwxMjc3NzgsMTI3Nzc5LDE0LDEyNzg5NiwxMjc4OTYsMTQsMTI3OTg1LDEyNzk4NiwxNCwxMjc5OTUsMTI3OTk5LDUsMTI4MzI2LDEyODMyOCwxNCwxMjgzNjAsMTI4MzY2LDE0LDEyODM3OCwxMjgzNzgsMTQsMTI4Mzk0LDEyODM5NywxNCwxMjg0MDUsMTI4NDA2LDE0LDEyODQyMiwxMjg0MjMsMTQsMTI4NDM1LDEyODQ0MywxNCwxMjg0NTMsMTI4NDY0LDE0LDEyODQ3OSwxMjg0ODAsMTQsMTI4NDg0LDEyODQ4NywxNCwxMjg0OTYsMTI4NDk4LDE0LDEyODY0MCwxMjg3MDksMTQsMTI4NzIzLDEyODcyNCwxNCwxMjg3MzYsMTI4NzQxLDE0LDEyODc0NywxMjg3NDgsMTQsMTI4NzU1LDEyODc1NSwxNCwxMjg3NjIsMTI4NzYyLDE0LDEyODk4MSwxMjg5OTEsMTQsMTI5MDk2LDEyOTEwMywxNCwxMjkyOTIsMTI5MjkyLDE0LDEyOTMxMSwxMjkzMTEsMTQsMTI5MzI5LDEyOTMzMCwxNCwxMjkzNDQsMTI5MzQ5LDE0LDEyOTM2MCwxMjkzNzQsMTQsMTI5Mzk0LDEyOTM5NCwxNCwxMjk0MDIsMTI5NDAyLDE0LDEyOTQxMywxMjk0MjUsMTQsMTI5NDQ1LDEyOTQ1MCwxNCwxMjk0NjYsMTI5NDcxLDE0LDEyOTQ4MywxMjk0ODMsMTQsMTI5NTExLDEyOTUzNSwxNCwxMjk2NTMsMTI5NjU1LDE0LDEyOTY2NywxMjk2NzAsMTQsMTI5NzA1LDEyOTcxMSwxNCwxMjk3MzEsMTI5NzQzLDE0LDkxNzUwNSw5MTc1MDUsNCw5MTc3NjAsOTE3OTk5LDUsMTAsMTAsMywxMjcsMTU5LDQsNzY4LDg3OSw1LDE0NzEsMTQ3MSw1LDE1MzYsMTU0MSwxLDE2NDgsMTY0OCw1LDE3NjcsMTc2OCw1LDE4NDAsMTg2Niw1LDIwNzAsMjA3Myw1LDIxMzcsMjEzOSw1LDIzMDcsMjMwNyw3LDIzNjYsMjM2OCw3LDIzODIsMjM4Myw3LDI0MzQsMjQzNSw3LDI0OTcsMjUwMCw1LDI1MTksMjUxOSw1LDI1NjMsMjU2Myw3LDI2MzEsMjYzMiw1LDI2NzcsMjY3Nyw1LDI3NTAsMjc1Miw3LDI3NjMsMjc2NCw3LDI4MTcsMjgxNyw1LDI4NzksMjg3OSw1LDI4OTEsMjg5Miw3LDI5MTQsMjkxNSw1LDMwMDgsMzAwOCw1LDMwMjEsMzAyMSw1LDMwNzYsMzA3Niw1LDMxNDYsMzE0OSw1LDMyMDIsMzIwMyw3LDMyNjQsMzI2NSw3LDMyNzEsMzI3Miw3LDMyOTgsMzI5OSw1LDMzOTAsMzM5MCw1LDM0MDIsMzQwNCw3LDM0MjYsMzQyNyw1LDM1MzUsMzUzNSw1LDM1NDQsMzU1MCw3LDM2MzUsMzYzNSw3LDM3NjMsMzc2Myw3LDM4OTMsMzg5Myw1LDM5NTMsMzk2Niw1LDM5ODEsMzk5MSw1LDQxNDUsNDE0NSw3LDQxNTcsNDE1OCw1LDQyMDksNDIxMiw1LDQyMzcsNDIzNyw1LDQ1MjAsNDYwNywxMCw1OTcwLDU5NzEsNSw2MDcxLDYwNzcsNSw2MDg5LDYwOTksNSw2Mjc3LDYyNzgsNSw2NDM5LDY0NDAsNSw2NDUxLDY0NTYsNyw2NjgzLDY2ODMsNSw2NzQ0LDY3NTAsNSw2NzY1LDY3NzAsNyw2ODQ2LDY4NDYsNSw2OTY0LDY5NjQsNSw2OTcyLDY5NzIsNSw3MDE5LDcwMjcsNSw3MDc0LDcwNzcsNSw3MDgzLDcwODUsNSw3MTQ2LDcxNDgsNyw3MTU0LDcxNTUsNyw3MjIyLDcyMjMsNSw3Mzk0LDc0MDAsNSw3NDE2LDc0MTcsNSw4MjA0LDgyMDQsNSw4MjMzLDgyMzMsNCw4Mjg4LDgyOTIsNCw4NDEzLDg0MTYsNSw4NDgyLDg0ODIsMTQsODk4Niw4OTg3LDE0LDkxOTMsOTIwMywxNCw5NjU0LDk2NTQsMTQsOTczMyw5NzMzLDE0LDk3NDUsOTc0NSwxNCw5NzUyLDk3NTIsMTQsOTc2MCw5NzYwLDE0LDk3NjYsOTc2NiwxNCw5Nzc0LDk3NzUsMTQsOTc5Miw5NzkyLDE0LDk4MDAsOTgxMSwxNCw5ODI1LDk4MjYsMTQsOTgzMSw5ODMxLDE0LDk4NTIsOTg1MywxNCw5ODcyLDk4NzMsMTQsOTg4MCw5ODgwLDE0LDk4ODUsOTg4NywxNCw5ODk2LDk4OTcsMTQsOTkwNiw5OTE2LDE0LDk5MjYsOTkyNywxNCw5OTM2LDk5MzYsMTQsOTk0MSw5OTYwLDE0LDk5NzQsOTk3NCwxNCw5OTgyLDk5ODUsMTQsOTk5Miw5OTk3LDE0LDEwMDAyLDEwMDAyLDE0LDEwMDE3LDEwMDE3LDE0LDEwMDU1LDEwMDU1LDE0LDEwMDcxLDEwMDcxLDE0LDEwMTQ1LDEwMTQ1LDE0LDExMDEzLDExMDE1LDE0LDExNTAzLDExNTA1LDUsMTIzMzQsMTIzMzUsNSwxMjk1MSwxMjk1MSwxNCw0MjYxMiw0MjYyMSw1LDQzMDE0LDQzMDE0LDUsNDMwNDcsNDMwNDcsNyw0MzIwNCw0MzIwNSw1LDQzMzM1LDQzMzQ1LDUsNDMzOTUsNDMzOTUsNyw0MzQ1MCw0MzQ1MSw3LDQzNTYxLDQzNTY2LDUsNDM1NzMsNDM1NzQsNSw0MzY0NCw0MzY0NCw1LDQzNzEwLDQzNzExLDUsNDM3NTgsNDM3NTksNyw0NDAwNSw0NDAwNSw1LDQ0MDEyLDQ0MDEyLDcsNDQwNjAsNDQwNjAsMTEsNDQxMTYsNDQxMTYsMTEsNDQxNzIsNDQxNzIsMTEsNDQyMjgsNDQyMjgsMTEsNDQyODQsNDQyODQsMTEsNDQzNDAsNDQzNDAsMTEsNDQzOTYsNDQzOTYsMTEsNDQ0NTIsNDQ0NTIsMTEsNDQ1MDgsNDQ1MDgsMTEsNDQ1NjQsNDQ1NjQsMTEsNDQ2MjAsNDQ2MjAsMTEsNDQ2NzYsNDQ2NzYsMTEsNDQ3MzIsNDQ3MzIsMTEsNDQ3ODgsNDQ3ODgsMTEsNDQ4NDQsNDQ4NDQsMTEsNDQ5MDAsNDQ5MDAsMTEsNDQ5NTYsNDQ5NTYsMTEsNDUwMTIsNDUwMTIsMTEsNDUwNjgsNDUwNjgsMTEsNDUxMjQsNDUxMjQsMTEsNDUxODAsNDUxODAsMTEsNDUyMzYsNDUyMzYsMTEsNDUyOTIsNDUyOTIsMTEsNDUzNDgsNDUzNDgsMTEsNDU0MDQsNDU0MDQsMTEsNDU0NjAsNDU0NjAsMTEsNDU1MTYsNDU1MTYsMTEsNDU1NzIsNDU1NzIsMTEsNDU2MjgsNDU2MjgsMTEsNDU2ODQsNDU2ODQsMTEsNDU3NDAsNDU3NDAsMTEsNDU3OTYsNDU3OTYsMTEsNDU4NTIsNDU4NTIsMTEsNDU5MDgsNDU5MDgsMTEsNDU5NjQsNDU5NjQsMTEsNDYwMjAsNDYwMjAsMTEsNDYwNzYsNDYwNzYsMTEsNDYxMzIsNDYxMzIsMTEsNDYxODgsNDYxODgsMTEsNDYyNDQsNDYyNDQsMTEsNDYzMDAsNDYzMDAsMTEsNDYzNTYsNDYzNTYsMTEsNDY0MTIsNDY0MTIsMTEsNDY0NjgsNDY0NjgsMTEsNDY1MjQsNDY1MjQsMTEsNDY1ODAsNDY1ODAsMTEsNDY2MzYsNDY2MzYsMTEsNDY2OTIsNDY2OTIsMTEsNDY3NDgsNDY3NDgsMTEsNDY4MDQsNDY4MDQsMTEsNDY4NjAsNDY4NjAsMTEsNDY5MTYsNDY5MTYsMTEsNDY5NzIsNDY5NzIsMTEsNDcwMjgsNDcwMjgsMTEsNDcwODQsNDcwODQsMTEsNDcxNDAsNDcxNDAsMTEsNDcxOTYsNDcxOTYsMTEsNDcyNTIsNDcyNTIsMTEsNDczMDgsNDczMDgsMTEsNDczNjQsNDczNjQsMTEsNDc0MjAsNDc0MjAsMTEsNDc0NzYsNDc0NzYsMTEsNDc1MzIsNDc1MzIsMTEsNDc1ODgsNDc1ODgsMTEsNDc2NDQsNDc2NDQsMTEsNDc3MDAsNDc3MDAsMTEsNDc3NTYsNDc3NTYsMTEsNDc4MTIsNDc4MTIsMTEsNDc4NjgsNDc4NjgsMTEsNDc5MjQsNDc5MjQsMTEsNDc5ODAsNDc5ODAsMTEsNDgwMzYsNDgwMzYsMTEsNDgwOTIsNDgwOTIsMTEsNDgxNDgsNDgxNDgsMTEsNDgyMDQsNDgyMDQsMTEsNDgyNjAsNDgyNjAsMTEsNDgzMTYsNDgzMTYsMTEsNDgzNzIsNDgzNzIsMTEsNDg0MjgsNDg0MjgsMTEsNDg0ODQsNDg0ODQsMTEsNDg1NDAsNDg1NDAsMTEsNDg1OTYsNDg1OTYsMTEsNDg2NTIsNDg2NTIsMTEsNDg3MDgsNDg3MDgsMTEsNDg3NjQsNDg3NjQsMTEsNDg4MjAsNDg4MjAsMTEsNDg4NzYsNDg4NzYsMTEsNDg5MzIsNDg5MzIsMTEsNDg5ODgsNDg5ODgsMTEsNDkwNDQsNDkwNDQsMTEsNDkxMDAsNDkxMDAsMTEsNDkxNTYsNDkxNTYsMTEsNDkyMTIsNDkyMTIsMTEsNDkyNjgsNDkyNjgsMTEsNDkzMjQsNDkzMjQsMTEsNDkzODAsNDkzODAsMTEsNDk0MzYsNDk0MzYsMTEsNDk0OTIsNDk0OTIsMTEsNDk1NDgsNDk1NDgsMTEsNDk2MDQsNDk2MDQsMTEsNDk2NjAsNDk2NjAsMTEsNDk3MTYsNDk3MTYsMTEsNDk3NzIsNDk3NzIsMTEsNDk4MjgsNDk4MjgsMTEsNDk4ODQsNDk4ODQsMTEsNDk5NDAsNDk5NDAsMTEsNDk5OTYsNDk5OTYsMTEsNTAwNTIsNTAwNTIsMTEsNTAxMDgsNTAxMDgsMTEsNTAxNjQsNTAxNjQsMTEsNTAyMjAsNTAyMjAsMTEsNTAyNzYsNTAyNzYsMTEsNTAzMzIsNTAzMzIsMTEsNTAzODgsNTAzODgsMTEsNTA0NDQsNTA0NDQsMTEsNTA1MDAsNTA1MDAsMTEsNTA1NTYsNTA1NTYsMTEsNTA2MTIsNTA2MTIsMTEsNTA2NjgsNTA2NjgsMTEsNTA3MjQsNTA3MjQsMTEsNTA3ODAsNTA3ODAsMTEsNTA4MzYsNTA4MzYsMTEsNTA4OTIsNTA4OTIsMTEsNTA5NDgsNTA5NDgsMTEsNTEwMDQsNTEwMDQsMTEsNTEwNjAsNTEwNjAsMTEsNTExMTYsNTExMTYsMTEsNTExNzIsNTExNzIsMTEsNTEyMjgsNTEyMjgsMTEsNTEyODQsNTEyODQsMTEsNTEzNDAsNTEzNDAsMTEsNTEzOTYsNTEzOTYsMTEsNTE0NTIsNTE0NTIsMTEsNTE1MDgsNTE1MDgsMTEsNTE1NjQsNTE1NjQsMTEsNTE2MjAsNTE2MjAsMTEsNTE2NzYsNTE2NzYsMTEsNTE3MzIsNTE3MzIsMTEsNTE3ODgsNTE3ODgsMTEsNTE4NDQsNTE4NDQsMTEsNTE5MDAsNTE5MDAsMTEsNTE5NTYsNTE5NTYsMTEsNTIwMTIsNTIwMTIsMTEsNTIwNjgsNTIwNjgsMTEsNTIxMjQsNTIxMjQsMTEsNTIxODAsNTIxODAsMTEsNTIyMzYsNTIyMzYsMTEsNTIyOTIsNTIyOTIsMTEsNTIzNDgsNTIzNDgsMTEsNTI0MDQsNTI0MDQsMTEsNTI0NjAsNTI0NjAsMTEsNTI1MTYsNTI1MTYsMTEsNTI1NzIsNTI1NzIsMTEsNTI2MjgsNTI2MjgsMTEsNTI2ODQsNTI2ODQsMTEsNTI3NDAsNTI3NDAsMTEsNTI3OTYsNTI3OTYsMTEsNTI4NTIsNTI4NTIsMTEsNTI5MDgsNTI5MDgsMTEsNTI5NjQsNTI5NjQsMTEsNTMwMjAsNTMwMjAsMTEsNTMwNzYsNTMwNzYsMTEsNTMxMzIsNTMxMzIsMTEsNTMxODgsNTMxODgsMTEsNTMyNDQsNTMyNDQsMTEsNTMzMDAsNTMzMDAsMTEsNTMzNTYsNTMzNTYsMTEsNTM0MTIsNTM0MTIsMTEsNTM0NjgsNTM0NjgsMTEsNTM1MjQsNTM1MjQsMTEsNTM1ODAsNTM1ODAsMTEsNTM2MzYsNTM2MzYsMTEsNTM2OTIsNTM2OTIsMTEsNTM3NDgsNTM3NDgsMTEsNTM4MDQsNTM4MDQsMTEsNTM4NjAsNTM4NjAsMTEsNTM5MTYsNTM5MTYsMTEsNTM5NzIsNTM5NzIsMTEsNTQwMjgsNTQwMjgsMTEsNTQwODQsNTQwODQsMTEsNTQxNDAsNTQxNDAsMTEsNTQxOTYsNTQxOTYsMTEsNTQyNTIsNTQyNTIsMTEsNTQzMDgsNTQzMDgsMTEsNTQzNjQsNTQzNjQsMTEsNTQ0MjAsNTQ0MjAsMTEsNTQ0NzYsNTQ0NzYsMTEsNTQ1MzIsNTQ1MzIsMTEsNTQ1ODgsNTQ1ODgsMTEsNTQ2NDQsNTQ2NDQsMTEsNTQ3MDAsNTQ3MDAsMTEsNTQ3NTYsNTQ3NTYsMTEsNTQ4MTIsNTQ4MTIsMTEsNTQ4NjgsNTQ4NjgsMTEsNTQ5MjQsNTQ5MjQsMTEsNTQ5ODAsNTQ5ODAsMTEsNTUwMzYsNTUwMzYsMTEsNTUwOTIsNTUwOTIsMTEsNTUxNDgsNTUxNDgsMTEsNTUyMTYsNTUyMzgsOSw2NTA1Niw2NTA3MSw1LDY1NTI5LDY1NTMxLDQsNjgwOTcsNjgwOTksNSw2ODE1OSw2ODE1OSw1LDY5NDQ2LDY5NDU2LDUsNjk2ODgsNjk3MDIsNSw2OTgwOCw2OTgxMCw3LDY5ODE1LDY5ODE2LDcsNjk4MjEsNjk4MjEsMSw2OTg4OCw2OTg5MCw1LDY5OTMyLDY5OTMyLDcsNjk5NTcsNjk5NTgsNyw3MDAxNiw3MDAxNyw1LDcwMDY3LDcwMDY5LDcsNzAwNzksNzAwODAsNyw3MDA4OSw3MDA5Miw1LDcwMDk1LDcwMDk1LDUsNzAxOTEsNzAxOTMsNSw3MDE5Niw3MDE5Niw1LDcwMTk4LDcwMTk5LDUsNzAzNjcsNzAzNjcsNSw3MDM3MSw3MDM3OCw1LDcwNDAyLDcwNDAzLDcsNzA0NjIsNzA0NjIsNSw3MDQ2NCw3MDQ2NCw1LDcwNDcxLDcwNDcyLDcsNzA0ODcsNzA0ODcsNSw3MDUwMiw3MDUwOCw1LDcwNzA5LDcwNzExLDcsNzA3MjAsNzA3MjEsNyw3MDcyNSw3MDcyNSw3LDcwNzUwLDcwNzUwLDUsNzA4MzMsNzA4MzQsNyw3MDg0MSw3MDg0MSw3LDcwODQzLDcwODQ0LDcsNzA4NDYsNzA4NDYsNyw3MDg0OSw3MDg0OSw3LDcxMDg3LDcxMDg3LDUsNzEwOTAsNzEwOTMsNSw3MTEwMCw3MTEwMSw1LDcxMTAzLDcxMTA0LDUsNzEyMTYsNzEyMTgsNyw3MTIyNyw3MTIyOCw3LDcxMjMwLDcxMjMwLDcsNzEzMzksNzEzMzksNSw3MTM0MSw3MTM0MSw1LDcxMzQ0LDcxMzQ5LDUsNzEzNTEsNzEzNTEsNSw3MTQ1Niw3MTQ1Nyw3LDcxNDYyLDcxNDYyLDcsNzE3MjQsNzE3MjYsNyw3MTczNiw3MTczNiw3LDcxOTg0LDcxOTg0LDUsNzE5OTEsNzE5OTIsNyw3MTk5Nyw3MTk5Nyw3LDcxOTk5LDcxOTk5LDEsNzIwMDEsNzIwMDEsMSw3MjAwMyw3MjAwMyw1LDcyMTQ4LDcyMTUxLDUsNzIxNTYsNzIxNTksNyw3MjE2NCw3MjE2NCw3LDcyMjQzLDcyMjQ4LDUsNzIyNTAsNzIyNTAsMSw3MjI2Myw3MjI2Myw1LDcyMjc5LDcyMjgwLDcsNzIzMjQsNzIzMjksMSw3MjM0Myw3MjM0Myw3LDcyNzUxLDcyNzUxLDcsNzI3NjAsNzI3NjUsNSw3Mjc2Nyw3Mjc2Nyw1LDcyODczLDcyODczLDcsNzI4ODEsNzI4ODEsNyw3Mjg4NCw3Mjg4NCw3LDczMDA5LDczMDE0LDUsNzMwMjAsNzMwMjEsNSw3MzAzMCw3MzAzMCwxLDczMDk4LDczMTAyLDcsNzMxMDcsNzMxMDgsNyw3MzExMCw3MzExMCw3LDczNDU5LDczNDYwLDUsNzg4OTYsNzg5MDQsNCw5Mjk3Niw5Mjk4Miw1LDk0MDMzLDk0MDg3LDcsOTQxODAsOTQxODAsNSwxMTM4MjEsMTEzODIyLDUsMTE5MTQxLDExOTE0MSw1LDExOTE0MywxMTkxNDUsNSwxMTkxNTAsMTE5MTU0LDUsMTE5MTYzLDExOTE3MCw1LDExOTIxMCwxMTkyMTMsNSwxMjEzNDQsMTIxMzk4LDUsMTIxNDYxLDEyMTQ2MSw1LDEyMTQ5OSwxMjE1MDMsNSwxMjI4ODAsMTIyODg2LDUsMTIyOTA3LDEyMjkxMyw1LDEyMjkxOCwxMjI5MjIsNSwxMjM2MjgsMTIzNjMxLDUsMTI1MjUyLDEyNTI1OCw1LDEyNjk4MCwxMjY5ODAsMTQsMTI3MTgzLDEyNzE4MywxNCwxMjcyNDUsMTI3MjQ3LDE0LDEyNzM0MCwxMjczNDMsMTQsMTI3MzU4LDEyNzM1OSwxNCwxMjczNzcsMTI3Mzg2LDE0LDEyNzQ2MiwxMjc0ODcsNiwxMjc0OTEsMTI3NTAzLDE0LDEyNzUzNSwxMjc1MzUsMTQsMTI3NTQ4LDEyNzU1MSwxNCwxMjc1NjgsMTI3NTY5LDE0LDEyNzc0NCwxMjc3NzcsMTQsMTI3NzgwLDEyNzg5MSwxNCwxMjc4OTQsMTI3ODk1LDE0LDEyNzg5NywxMjc4OTksMTQsMTI3OTAyLDEyNzk4NCwxNCwxMjc5ODcsMTI3OTg5LDE0LDEyNzk5MSwxMjc5OTQsMTQsMTI4MDAwLDEyODI1MywxNCwxMjgyNTUsMTI4MzE3LDE0LDEyODMyOSwxMjgzMzQsMTQsMTI4MzM2LDEyODM1OSwxNCwxMjgzNjcsMTI4MzY4LDE0LDEyODM3MSwxMjgzNzcsMTQsMTI4Mzc5LDEyODM5MCwxNCwxMjgzOTIsMTI4MzkzLDE0LDEyODM5OCwxMjgzOTksMTQsMTI4NDAxLDEyODQwNCwxNCwxMjg0MDcsMTI4NDE5LDE0LDEyODQyMSwxMjg0MjEsMTQsMTI4NDI0LDEyODQyNCwxNCwxMjg0MzMsMTI4NDM0LDE0LDEyODQ0NCwxMjg0NDQsMTQsMTI4NDUwLDEyODQ1MiwxNCwxMjg0NjUsMTI4NDY3LDE0LDEyODQ3NiwxMjg0NzgsMTQsMTI4NDgxLDEyODQ4MSwxNCwxMjg0ODMsMTI4NDgzLDE0LDEyODQ4OCwxMjg0ODgsMTQsMTI4NDk1LDEyODQ5NSwxNCwxMjg0OTksMTI4NDk5LDE0LDEyODUwNiwxMjg1OTEsMTQsMTI4NzEwLDEyODcxNCwxNCwxMjg3MjEsMTI4NzIyLDE0LDEyODcyNSwxMjg3MjUsMTQsMTI4NzI4LDEyODczNSwxNCwxMjg3NDIsMTI4NzQ0LDE0LDEyODc0NiwxMjg3NDYsMTQsMTI4NzQ5LDEyODc1MSwxNCwxMjg3NTMsMTI4NzU0LDE0LDEyODc1NiwxMjg3NTgsMTQsMTI4NzYxLDEyODc2MSwxNCwxMjg3NjMsMTI4NzY0LDE0LDEyODg4NCwxMjg4OTUsMTQsMTI4OTkyLDEyOTAwMywxNCwxMjkwMzYsMTI5MDM5LDE0LDEyOTExNCwxMjkxMTksMTQsMTI5MTk4LDEyOTI3OSwxNCwxMjkyOTMsMTI5Mjk1LDE0LDEyOTMwNSwxMjkzMTAsMTQsMTI5MzEyLDEyOTMxOSwxNCwxMjkzMjgsMTI5MzI4LDE0LDEyOTMzMSwxMjkzMzgsMTQsMTI5MzQzLDEyOTM0MywxNCwxMjkzNTEsMTI5MzU1LDE0LDEyOTM1NywxMjkzNTksMTQsMTI5Mzc1LDEyOTM4NywxNCwxMjkzOTMsMTI5MzkzLDE0LDEyOTM5NSwxMjkzOTgsMTQsMTI5NDAxLDEyOTQwMSwxNCwxMjk0MDMsMTI5NDAzLDE0LDEyOTQwOCwxMjk0MTIsMTQsMTI5NDI2LDEyOTQzMSwxNCwxMjk0NDMsMTI5NDQ0LDE0LDEyOTQ1MSwxMjk0NTMsMTQsMTI5NDU2LDEyOTQ2NSwxNCwxMjk0NzIsMTI5NDcyLDE0LDEyOTQ3NSwxMjk0ODIsMTQsMTI5NDg0LDEyOTQ4NCwxNCwxMjk0ODgsMTI5NTEwLDE0LDEyOTUzNiwxMjk2NDcsMTQsMTI5NjUyLDEyOTY1MiwxNCwxMjk2NTYsMTI5NjU4LDE0LDEyOTY2NCwxMjk2NjYsMTQsMTI5NjcxLDEyOTY3OSwxNCwxMjk2ODYsMTI5NzA0LDE0LDEyOTcxMiwxMjk3MTgsMTQsMTI5NzI4LDEyOTczMCwxNCwxMjk3NDQsMTI5NzUwLDE0LDkxNzUwNCw5MTc1MDQsNCw5MTc1MDYsOTE3NTM1LDQsOTE3NjMyLDkxNzc1OSw0LDkxODAwMCw5MjE1OTksNCwwLDksNCwxMSwxMiw0LDE0LDMxLDQsMTY5LDE2OSwxNCwxNzQsMTc0LDE0LDExNTUsMTE1OSw1LDE0MjUsMTQ2OSw1LDE0NzMsMTQ3NCw1LDE0NzksMTQ3OSw1LDE1NTIsMTU2Miw1LDE2MTEsMTYzMSw1LDE3NTAsMTc1Niw1LDE3NTksMTc2NCw1LDE3NzAsMTc3Myw1LDE4MDksMTgwOSw1LDE5NTgsMTk2OCw1LDIwNDUsMjA0NSw1LDIwNzUsMjA4Myw1LDIwODksMjA5Myw1LDIyNTksMjI3Myw1LDIyNzUsMjMwNiw1LDIzNjIsMjM2Miw1LDIzNjQsMjM2NCw1LDIzNjksMjM3Niw1LDIzODEsMjM4MSw1LDIzODUsMjM5MSw1LDI0MzMsMjQzMyw1LDI0OTIsMjQ5Miw1LDI0OTUsMjQ5Niw3LDI1MDMsMjUwNCw3LDI1MDksMjUwOSw1LDI1MzAsMjUzMSw1LDI1NjEsMjU2Miw1LDI2MjAsMjYyMCw1LDI2MjUsMjYyNiw1LDI2MzUsMjYzNyw1LDI2NzIsMjY3Myw1LDI2ODksMjY5MCw1LDI3NDgsMjc0OCw1LDI3NTMsMjc1Nyw1LDI3NjEsMjc2MSw3LDI3NjUsMjc2NSw1LDI4MTAsMjgxNSw1LDI4MTgsMjgxOSw3LDI4NzgsMjg3OCw1LDI4ODAsMjg4MCw3LDI4ODcsMjg4OCw3LDI4OTMsMjg5Myw1LDI5MDMsMjkwMyw1LDI5NDYsMjk0Niw1LDMwMDcsMzAwNyw3LDMwMDksMzAxMCw3LDMwMTgsMzAyMCw3LDMwMzEsMzAzMSw1LDMwNzMsMzA3NSw3LDMxMzQsMzEzNiw1LDMxNDIsMzE0NCw1LDMxNTcsMzE1OCw1LDMyMDEsMzIwMSw1LDMyNjAsMzI2MCw1LDMyNjMsMzI2Myw1LDMyNjYsMzI2Niw1LDMyNzAsMzI3MCw1LDMyNzQsMzI3NSw3LDMyODUsMzI4Niw1LDMzMjgsMzMyOSw1LDMzODcsMzM4OCw1LDMzOTEsMzM5Miw3LDMzOTgsMzQwMCw3LDM0MDUsMzQwNSw1LDM0MTUsMzQxNSw1LDM0NTcsMzQ1Nyw1LDM1MzAsMzUzMCw1LDM1MzYsMzUzNyw3LDM1NDIsMzU0Miw1LDM1NTEsMzU1MSw1LDM2MzMsMzYzMyw1LDM2MzYsMzY0Miw1LDM3NjEsMzc2MSw1LDM3NjQsMzc3Miw1LDM4NjQsMzg2NSw1LDM4OTUsMzg5NSw1LDM5MDIsMzkwMyw3LDM5NjcsMzk2Nyw3LDM5NzQsMzk3NSw1LDM5OTMsNDAyOCw1LDQxNDEsNDE0NCw1LDQxNDYsNDE1MSw1LDQxNTUsNDE1Niw3LDQxODIsNDE4Myw3LDQxOTAsNDE5Miw1LDQyMjYsNDIyNiw1LDQyMjksNDIzMCw1LDQyNTMsNDI1Myw1LDQ0NDgsNDUxOSw5LDQ5NTcsNDk1OSw1LDU5MzgsNTk0MCw1LDYwMDIsNjAwMyw1LDYwNzAsNjA3MCw3LDYwNzgsNjA4NSw3LDYwODcsNjA4OCw3LDYxMDksNjEwOSw1LDYxNTgsNjE1OCw0LDYzMTMsNjMxMyw1LDY0MzUsNjQzOCw3LDY0NDEsNjQ0Myw3LDY0NTAsNjQ1MCw1LDY0NTcsNjQ1OSw1LDY2ODEsNjY4Miw3LDY3NDEsNjc0MSw3LDY3NDMsNjc0Myw3LDY3NTIsNjc1Miw1LDY3NTcsNjc2NCw1LDY3NzEsNjc4MCw1LDY4MzIsNjg0NSw1LDY4NDcsNjg0OCw1LDY5MTYsNjkxNiw3LDY5NjUsNjk2NSw1LDY5NzEsNjk3MSw3LDY5NzMsNjk3Nyw3LDY5NzksNjk4MCw3LDcwNDAsNzA0MSw1LDcwNzMsNzA3Myw3LDcwNzgsNzA3OSw3LDcwODIsNzA4Miw3LDcxNDIsNzE0Miw1LDcxNDQsNzE0NSw1LDcxNDksNzE0OSw1LDcxNTEsNzE1Myw1LDcyMDQsNzIxMSw3LDcyMjAsNzIyMSw3LDczNzYsNzM3OCw1LDczOTMsNzM5Myw3LDc0MDUsNzQwNSw1LDc0MTUsNzQxNSw3LDc2MTYsNzY3Myw1LDgyMDMsODIwMyw0LDgyMDUsODIwNSwxMyw4MjMyLDgyMzIsNCw4MjM0LDgyMzgsNCw4MjY1LDgyNjUsMTQsODI5Myw4MjkzLDQsODQwMCw4NDEyLDUsODQxNyw4NDE3LDUsODQyMSw4NDMyLDUsODUwNSw4NTA1LDE0LDg2MTcsODYxOCwxNCw5MDAwLDkwMDAsMTQsOTE2Nyw5MTY3LDE0LDkyMDgsOTIxMCwxNCw5NjQyLDk2NDMsMTQsOTY2NCw5NjY0LDE0LDk3MjgsOTczMiwxNCw5NzM1LDk3NDEsMTQsOTc0Myw5NzQ0LDE0LDk3NDYsOTc0NiwxNCw5NzUwLDk3NTEsMTQsOTc1Myw5NzU2LDE0LDk3NTgsOTc1OSwxNCw5NzYxLDk3NjEsMTQsOTc2NCw5NzY1LDE0LDk3NjcsOTc2OSwxNCw5NzcxLDk3NzMsMTQsOTc3Niw5NzgzLDE0LDk3ODcsOTc5MSwxNCw5NzkzLDk3OTMsMTQsOTc5NSw5Nzk5LDE0LDk4MTIsOTgyMiwxNCw5ODI0LDk4MjQsMTQsOTgyNyw5ODI3LDE0LDk4MjksOTgzMCwxNCw5ODMyLDk4MzIsMTQsOTg1MSw5ODUxLDE0LDk4NTQsOTg1NCwxNCw5ODU2LDk4NjEsMTQsOTg3NCw5ODc2LDE0LDk4NzgsOTg3OSwxNCw5ODgxLDk4ODEsMTQsOTg4Myw5ODg0LDE0LDk4ODgsOTg4OSwxNCw5ODk1LDk4OTUsMTQsOTg5OCw5ODk5LDE0LDk5MDQsOTkwNSwxNCw5OTE3LDk5MTgsMTQsOTkyNCw5OTI1LDE0LDk5MjgsOTkyOCwxNCw5OTM0LDk5MzUsMTQsOTkzNyw5OTM3LDE0LDk5MzksOTk0MCwxNCw5OTYxLDk5NjIsMTQsOTk2OCw5OTczLDE0LDk5NzUsOTk3OCwxNCw5OTgxLDk5ODEsMTQsOTk4Niw5OTg2LDE0LDk5ODksOTk4OSwxNCw5OTk4LDk5OTgsMTQsMTAwMDAsMTAwMDEsMTQsMTAwMDQsMTAwMDQsMTQsMTAwMTMsMTAwMTMsMTQsMTAwMjQsMTAwMjQsMTQsMTAwNTIsMTAwNTIsMTQsMTAwNjAsMTAwNjAsMTQsMTAwNjcsMTAwNjksMTQsMTAwODMsMTAwODQsMTQsMTAxMzMsMTAxMzUsMTQsMTAxNjAsMTAxNjAsMTQsMTA1NDgsMTA1NDksMTQsMTEwMzUsMTEwMzYsMTQsMTEwOTMsMTEwOTMsMTQsMTE2NDcsMTE2NDcsNSwxMjMzMCwxMjMzMyw1LDEyMzM2LDEyMzM2LDE0LDEyNDQxLDEyNDQyLDUsMTI5NTMsMTI5NTMsMTQsNDI2MDgsNDI2MTAsNSw0MjY1NCw0MjY1NSw1LDQzMDEwLDQzMDEwLDUsNDMwMTksNDMwMTksNSw0MzA0NSw0MzA0Niw1LDQzMDUyLDQzMDUyLDUsNDMxODgsNDMyMDMsNyw0MzIzMiw0MzI0OSw1LDQzMzAyLDQzMzA5LDUsNDMzNDYsNDMzNDcsNyw0MzM5Miw0MzM5NCw1LDQzNDQzLDQzNDQzLDUsNDM0NDYsNDM0NDksNSw0MzQ1Miw0MzQ1Myw1LDQzNDkzLDQzNDkzLDUsNDM1NjcsNDM1NjgsNyw0MzU3MSw0MzU3Miw3LDQzNTg3LDQzNTg3LDUsNDM1OTcsNDM1OTcsNyw0MzY5Niw0MzY5Niw1LDQzNzAzLDQzNzA0LDUsNDM3MTMsNDM3MTMsNSw0Mzc1Niw0Mzc1Nyw1LDQzNzY1LDQzNzY1LDcsNDQwMDMsNDQwMDQsNyw0NDAwNiw0NDAwNyw3LDQ0MDA5LDQ0MDEwLDcsNDQwMTMsNDQwMTMsNSw0NDAzMyw0NDA1OSwxMiw0NDA2MSw0NDA4NywxMiw0NDA4OSw0NDExNSwxMiw0NDExNyw0NDE0MywxMiw0NDE0NSw0NDE3MSwxMiw0NDE3Myw0NDE5OSwxMiw0NDIwMSw0NDIyNywxMiw0NDIyOSw0NDI1NSwxMiw0NDI1Nyw0NDI4MywxMiw0NDI4NSw0NDMxMSwxMiw0NDMxMyw0NDMzOSwxMiw0NDM0MSw0NDM2NywxMiw0NDM2OSw0NDM5NSwxMiw0NDM5Nyw0NDQyMywxMiw0NDQyNSw0NDQ1MSwxMiw0NDQ1Myw0NDQ3OSwxMiw0NDQ4MSw0NDUwNywxMiw0NDUwOSw0NDUzNSwxMiw0NDUzNyw0NDU2MywxMiw0NDU2NSw0NDU5MSwxMiw0NDU5Myw0NDYxOSwxMiw0NDYyMSw0NDY0NywxMiw0NDY0OSw0NDY3NSwxMiw0NDY3Nyw0NDcwMywxMiw0NDcwNSw0NDczMSwxMiw0NDczMyw0NDc1OSwxMiw0NDc2MSw0NDc4NywxMiw0NDc4OSw0NDgxNSwxMiw0NDgxNyw0NDg0MywxMiw0NDg0NSw0NDg3MSwxMiw0NDg3Myw0NDg5OSwxMiw0NDkwMSw0NDkyNywxMiw0NDkyOSw0NDk1NSwxMiw0NDk1Nyw0NDk4MywxMiw0NDk4NSw0NTAxMSwxMiw0NTAxMyw0NTAzOSwxMiw0NTA0MSw0NTA2NywxMiw0NTA2OSw0NTA5NSwxMiw0NTA5Nyw0NTEyMywxMiw0NTEyNSw0NTE1MSwxMiw0NTE1Myw0NTE3OSwxMiw0NTE4MSw0NTIwNywxMiw0NTIwOSw0NTIzNSwxMiw0NTIzNyw0NTI2MywxMiw0NTI2NSw0NTI5MSwxMiw0NTI5Myw0NTMxOSwxMiw0NTMyMSw0NTM0NywxMiw0NTM0OSw0NTM3NSwxMiw0NTM3Nyw0NTQwMywxMiw0NTQwNSw0NTQzMSwxMiw0NTQzMyw0NTQ1OSwxMiw0NTQ2MSw0NTQ4NywxMiw0NTQ4OSw0NTUxNSwxMiw0NTUxNyw0NTU0MywxMiw0NTU0NSw0NTU3MSwxMiw0NTU3Myw0NTU5OSwxMiw0NTYwMSw0NTYyNywxMiw0NTYyOSw0NTY1NSwxMiw0NTY1Nyw0NTY4MywxMiw0NTY4NSw0NTcxMSwxMiw0NTcxMyw0NTczOSwxMiw0NTc0MSw0NTc2NywxMiw0NTc2OSw0NTc5NSwxMiw0NTc5Nyw0NTgyMywxMiw0NTgyNSw0NTg1MSwxMiw0NTg1Myw0NTg3OSwxMiw0NTg4MSw0NTkwNywxMiw0NTkwOSw0NTkzNSwxMiw0NTkzNyw0NTk2MywxMiw0NTk2NSw0NTk5MSwxMiw0NTk5Myw0NjAxOSwxMiw0NjAyMSw0NjA0NywxMiw0NjA0OSw0NjA3NSwxMiw0NjA3Nyw0NjEwMywxMiw0NjEwNSw0NjEzMSwxMiw0NjEzMyw0NjE1OSwxMiw0NjE2MSw0NjE4NywxMiw0NjE4OSw0NjIxNSwxMiw0NjIxNyw0NjI0MywxMiw0NjI0NSw0NjI3MSwxMiw0NjI3Myw0NjI5OSwxMiw0NjMwMSw0NjMyNywxMiw0NjMyOSw0NjM1NSwxMiw0NjM1Nyw0NjM4MywxMiw0NjM4NSw0NjQxMSwxMiw0NjQxMyw0NjQzOSwxMiw0NjQ0MSw0NjQ2NywxMiw0NjQ2OSw0NjQ5NSwxMiw0NjQ5Nyw0NjUyMywxMiw0NjUyNSw0NjU1MSwxMiw0NjU1Myw0NjU3OSwxMiw0NjU4MSw0NjYwNywxMiw0NjYwOSw0NjYzNSwxMiw0NjYzNyw0NjY2MywxMiw0NjY2NSw0NjY5MSwxMiw0NjY5Myw0NjcxOSwxMiw0NjcyMSw0Njc0NywxMiw0Njc0OSw0Njc3NSwxMiw0Njc3Nyw0NjgwMywxMiw0NjgwNSw0NjgzMSwxMiw0NjgzMyw0Njg1OSwxMiw0Njg2MSw0Njg4NywxMiw0Njg4OSw0NjkxNSwxMiw0NjkxNyw0Njk0MywxMiw0Njk0NSw0Njk3MSwxMiw0Njk3Myw0Njk5OSwxMiw0NzAwMSw0NzAyNywxMiw0NzAyOSw0NzA1NSwxMiw0NzA1Nyw0NzA4MywxMiw0NzA4NSw0NzExMSwxMiw0NzExMyw0NzEzOSwxMiw0NzE0MSw0NzE2NywxMiw0NzE2OSw0NzE5NSwxMiw0NzE5Nyw0NzIyMywxMiw0NzIyNSw0NzI1MSwxMiw0NzI1Myw0NzI3OSwxMiw0NzI4MSw0NzMwNywxMiw0NzMwOSw0NzMzNSwxMiw0NzMzNyw0NzM2MywxMiw0NzM2NSw0NzM5MSwxMiw0NzM5Myw0NzQxOSwxMiw0NzQyMSw0NzQ0NywxMiw0NzQ0OSw0NzQ3NSwxMiw0NzQ3Nyw0NzUwMywxMiw0NzUwNSw0NzUzMSwxMiw0NzUzMyw0NzU1OSwxMiw0NzU2MSw0NzU4NywxMiw0NzU4OSw0NzYxNSwxMiw0NzYxNyw0NzY0MywxMiw0NzY0NSw0NzY3MSwxMiw0NzY3Myw0NzY5OSwxMiw0NzcwMSw0NzcyNywxMiw0NzcyOSw0Nzc1NSwxMiw0Nzc1Nyw0Nzc4MywxMiw0Nzc4NSw0NzgxMSwxMiw0NzgxMyw0NzgzOSwxMiw0Nzg0MSw0Nzg2NywxMiw0Nzg2OSw0Nzg5NSwxMiw0Nzg5Nyw0NzkyMywxMiw0NzkyNSw0Nzk1MSwxMiw0Nzk1Myw0Nzk3OSwxMiw0Nzk4MSw0ODAwNywxMiw0ODAwOSw0ODAzNSwxMiw0ODAzNyw0ODA2MywxMiw0ODA2NSw0ODA5MSwxMiw0ODA5Myw0ODExOSwxMiw0ODEyMSw0ODE0NywxMiw0ODE0OSw0ODE3NSwxMiw0ODE3Nyw0ODIwMywxMiw0ODIwNSw0ODIzMSwxMiw0ODIzMyw0ODI1OSwxMiw0ODI2MSw0ODI4NywxMiw0ODI4OSw0ODMxNSwxMiw0ODMxNyw0ODM0MywxMiw0ODM0NSw0ODM3MSwxMiw0ODM3Myw0ODM5OSwxMiw0ODQwMSw0ODQyNywxMiw0ODQyOSw0ODQ1NSwxMiw0ODQ1Nyw0ODQ4MywxMiw0ODQ4NSw0ODUxMSwxMiw0ODUxMyw0ODUzOSwxMiw0ODU0MSw0ODU2NywxMiw0ODU2OSw0ODU5NSwxMiw0ODU5Nyw0ODYyMywxMiw0ODYyNSw0ODY1MSwxMiw0ODY1Myw0ODY3OSwxMiw0ODY4MSw0ODcwNywxMiw0ODcwOSw0ODczNSwxMiw0ODczNyw0ODc2MywxMiw0ODc2NSw0ODc5MSwxMiw0ODc5Myw0ODgxOSwxMiw0ODgyMSw0ODg0NywxMiw0ODg0OSw0ODg3NSwxMiw0ODg3Nyw0ODkwMywxMiw0ODkwNSw0ODkzMSwxMiw0ODkzMyw0ODk1OSwxMiw0ODk2MSw0ODk4NywxMiw0ODk4OSw0OTAxNSwxMiw0OTAxNyw0OTA0MywxMiw0OTA0NSw0OTA3MSwxMiw0OTA3Myw0OTA5OSwxMiw0OTEwMSw0OTEyNywxMiw0OTEyOSw0OTE1NSwxMiw0OTE1Nyw0OTE4MywxMiw0OTE4NSw0OTIxMSwxMiw0OTIxMyw0OTIzOSwxMiw0OTI0MSw0OTI2NywxMiw0OTI2OSw0OTI5NSwxMiw0OTI5Nyw0OTMyMywxMiw0OTMyNSw0OTM1MSwxMiw0OTM1Myw0OTM3OSwxMiw0OTM4MSw0OTQwNywxMiw0OTQwOSw0OTQzNSwxMiw0OTQzNyw0OTQ2MywxMiw0OTQ2NSw0OTQ5MSwxMiw0OTQ5Myw0OTUxOSwxMiw0OTUyMSw0OTU0NywxMiw0OTU0OSw0OTU3NSwxMiw0OTU3Nyw0OTYwMywxMiw0OTYwNSw0OTYzMSwxMiw0OTYzMyw0OTY1OSwxMiw0OTY2MSw0OTY4NywxMiw0OTY4OSw0OTcxNSwxMiw0OTcxNyw0OTc0MywxMiw0OTc0NSw0OTc3MSwxMiw0OTc3Myw0OTc5OSwxMiw0OTgwMSw0OTgyNywxMiw0OTgyOSw0OTg1NSwxMiw0OTg1Nyw0OTg4MywxMiw0OTg4NSw0OTkxMSwxMiw0OTkxMyw0OTkzOSwxMiw0OTk0MSw0OTk2NywxMiw0OTk2OSw0OTk5NSwxMiw0OTk5Nyw1MDAyMywxMiw1MDAyNSw1MDA1MSwxMiw1MDA1Myw1MDA3OSwxMiw1MDA4MSw1MDEwNywxMiw1MDEwOSw1MDEzNSwxMiw1MDEzNyw1MDE2MywxMiw1MDE2NSw1MDE5MSwxMiw1MDE5Myw1MDIxOSwxMiw1MDIyMSw1MDI0NywxMiw1MDI0OSw1MDI3NSwxMiw1MDI3Nyw1MDMwMywxMiw1MDMwNSw1MDMzMSwxMiw1MDMzMyw1MDM1OSwxMiw1MDM2MSw1MDM4NywxMiw1MDM4OSw1MDQxNSwxMiw1MDQxNyw1MDQ0MywxMiw1MDQ0NSw1MDQ3MSwxMiw1MDQ3Myw1MDQ5OSwxMiw1MDUwMSw1MDUyNywxMiw1MDUyOSw1MDU1NSwxMiw1MDU1Nyw1MDU4MywxMiw1MDU4NSw1MDYxMSwxMiw1MDYxMyw1MDYzOSwxMiw1MDY0MSw1MDY2NywxMiw1MDY2OSw1MDY5NSwxMiw1MDY5Nyw1MDcyMywxMiw1MDcyNSw1MDc1MSwxMiw1MDc1Myw1MDc3OSwxMiw1MDc4MSw1MDgwNywxMiw1MDgwOSw1MDgzNSwxMiw1MDgzNyw1MDg2MywxMiw1MDg2NSw1MDg5MSwxMiw1MDg5Myw1MDkxOSwxMiw1MDkyMSw1MDk0NywxMiw1MDk0OSw1MDk3NSwxMiw1MDk3Nyw1MTAwMywxMiw1MTAwNSw1MTAzMSwxMiw1MTAzMyw1MTA1OSwxMiw1MTA2MSw1MTA4NywxMiw1MTA4OSw1MTExNSwxMiw1MTExNyw1MTE0MywxMiw1MTE0NSw1MTE3MSwxMiw1MTE3Myw1MTE5OSwxMiw1MTIwMSw1MTIyNywxMiw1MTIyOSw1MTI1NSwxMiw1MTI1Nyw1MTI4MywxMiw1MTI4NSw1MTMxMSwxMiw1MTMxMyw1MTMzOSwxMiw1MTM0MSw1MTM2NywxMiw1MTM2OSw1MTM5NSwxMiw1MTM5Nyw1MTQyMywxMiw1MTQyNSw1MTQ1MSwxMiw1MTQ1Myw1MTQ3OSwxMiw1MTQ4MSw1MTUwNywxMiw1MTUwOSw1MTUzNSwxMiw1MTUzNyw1MTU2MywxMiw1MTU2NSw1MTU5MSwxMiw1MTU5Myw1MTYxOSwxMiw1MTYyMSw1MTY0NywxMiw1MTY0OSw1MTY3NSwxMiw1MTY3Nyw1MTcwMywxMiw1MTcwNSw1MTczMSwxMiw1MTczMyw1MTc1OSwxMiw1MTc2MSw1MTc4NywxMiw1MTc4OSw1MTgxNSwxMiw1MTgxNyw1MTg0MywxMiw1MTg0NSw1MTg3MSwxMiw1MTg3Myw1MTg5OSwxMiw1MTkwMSw1MTkyNywxMiw1MTkyOSw1MTk1NSwxMiw1MTk1Nyw1MTk4MywxMiw1MTk4NSw1MjAxMSwxMiw1MjAxMyw1MjAzOSwxMiw1MjA0MSw1MjA2NywxMiw1MjA2OSw1MjA5NSwxMiw1MjA5Nyw1MjEyMywxMiw1MjEyNSw1MjE1MSwxMiw1MjE1Myw1MjE3OSwxMiw1MjE4MSw1MjIwNywxMiw1MjIwOSw1MjIzNSwxMiw1MjIzNyw1MjI2MywxMiw1MjI2NSw1MjI5MSwxMiw1MjI5Myw1MjMxOSwxMiw1MjMyMSw1MjM0NywxMiw1MjM0OSw1MjM3NSwxMiw1MjM3Nyw1MjQwMywxMiw1MjQwNSw1MjQzMSwxMiw1MjQzMyw1MjQ1OSwxMiw1MjQ2MSw1MjQ4NywxMiw1MjQ4OSw1MjUxNSwxMiw1MjUxNyw1MjU0MywxMiw1MjU0NSw1MjU3MSwxMiw1MjU3Myw1MjU5OSwxMiw1MjYwMSw1MjYyNywxMiw1MjYyOSw1MjY1NSwxMiw1MjY1Nyw1MjY4MywxMiw1MjY4NSw1MjcxMSwxMiw1MjcxMyw1MjczOSwxMiw1Mjc0MSw1Mjc2NywxMiw1Mjc2OSw1Mjc5NSwxMiw1Mjc5Nyw1MjgyMywxMiw1MjgyNSw1Mjg1MSwxMiw1Mjg1Myw1Mjg3OSwxMiw1Mjg4MSw1MjkwNywxMiw1MjkwOSw1MjkzNSwxMiw1MjkzNyw1Mjk2MywxMiw1Mjk2NSw1Mjk5MSwxMiw1Mjk5Myw1MzAxOSwxMiw1MzAyMSw1MzA0NywxMiw1MzA0OSw1MzA3NSwxMiw1MzA3Nyw1MzEwMywxMiw1MzEwNSw1MzEzMSwxMiw1MzEzMyw1MzE1OSwxMiw1MzE2MSw1MzE4NywxMiw1MzE4OSw1MzIxNSwxMiw1MzIxNyw1MzI0MywxMiw1MzI0NSw1MzI3MSwxMiw1MzI3Myw1MzI5OSwxMiw1MzMwMSw1MzMyNywxMiw1MzMyOSw1MzM1NSwxMiw1MzM1Nyw1MzM4MywxMiw1MzM4NSw1MzQxMSwxMiw1MzQxMyw1MzQzOSwxMiw1MzQ0MSw1MzQ2NywxMiw1MzQ2OSw1MzQ5NSwxMiw1MzQ5Nyw1MzUyMywxMiw1MzUyNSw1MzU1MSwxMiw1MzU1Myw1MzU3OSwxMiw1MzU4MSw1MzYwNywxMiw1MzYwOSw1MzYzNSwxMiw1MzYzNyw1MzY2MywxMiw1MzY2NSw1MzY5MSwxMiw1MzY5Myw1MzcxOSwxMiw1MzcyMSw1Mzc0NywxMiw1Mzc0OSw1Mzc3NSwxMiw1Mzc3Nyw1MzgwMywxMiw1MzgwNSw1MzgzMSwxMiw1MzgzMyw1Mzg1OSwxMiw1Mzg2MSw1Mzg4NywxMiw1Mzg4OSw1MzkxNSwxMiw1MzkxNyw1Mzk0MywxMiw1Mzk0NSw1Mzk3MSwxMiw1Mzk3Myw1Mzk5OSwxMiw1NDAwMSw1NDAyNywxMiw1NDAyOSw1NDA1NSwxMiw1NDA1Nyw1NDA4MywxMiw1NDA4NSw1NDExMSwxMiw1NDExMyw1NDEzOSwxMiw1NDE0MSw1NDE2NywxMiw1NDE2OSw1NDE5NSwxMiw1NDE5Nyw1NDIyMywxMiw1NDIyNSw1NDI1MSwxMiw1NDI1Myw1NDI3OSwxMiw1NDI4MSw1NDMwNywxMiw1NDMwOSw1NDMzNSwxMiw1NDMzNyw1NDM2MywxMiw1NDM2NSw1NDM5MSwxMiw1NDM5Myw1NDQxOSwxMiw1NDQyMSw1NDQ0NywxMiw1NDQ0OSw1NDQ3NSwxMiw1NDQ3Nyw1NDUwMywxMiw1NDUwNSw1NDUzMSwxMiw1NDUzMyw1NDU1OSwxMiw1NDU2MSw1NDU4NywxMiw1NDU4OSw1NDYxNSwxMiw1NDYxNyw1NDY0MywxMiw1NDY0NSw1NDY3MSwxMiw1NDY3Myw1NDY5OSwxMiw1NDcwMSw1NDcyNywxMiw1NDcyOSw1NDc1NSwxMiw1NDc1Nyw1NDc4MywxMiw1NDc4NSw1NDgxMSwxMiw1NDgxMyw1NDgzOSwxMiw1NDg0MSw1NDg2NywxMiw1NDg2OSw1NDg5NSwxMiw1NDg5Nyw1NDkyMywxMiw1NDkyNSw1NDk1MSwxMiw1NDk1Myw1NDk3OSwxMiw1NDk4MSw1NTAwNywxMiw1NTAwOSw1NTAzNSwxMiw1NTAzNyw1NTA2MywxMiw1NTA2NSw1NTA5MSwxMiw1NTA5Myw1NTExOSwxMiw1NTEyMSw1NTE0NywxMiw1NTE0OSw1NTE3NSwxMiw1NTE3Nyw1NTIwMywxMiw1NTI0Myw1NTI5MSwxMCw2NTAyNCw2NTAzOSw1LDY1Mjc5LDY1Mjc5LDQsNjU1MjAsNjU1MjgsNCw2NjA0NSw2NjA0NSw1LDY2NDIyLDY2NDI2LDUsNjgxMDEsNjgxMDIsNSw2ODE1Miw2ODE1NCw1LDY4MzI1LDY4MzI2LDUsNjkyOTEsNjkyOTIsNSw2OTYzMiw2OTYzMiw3LDY5NjM0LDY5NjM0LDcsNjk3NTksNjk3NjEsNV0nKTtcclxufVxyXG4vLyNlbmRyZWdpb25cclxuLyoqXHJcbiAqIENvbXB1dGVzIHRoZSBvZmZzZXQgYWZ0ZXIgcGVyZm9ybWluZyBhIGxlZnQgZGVsZXRlIG9uIHRoZSBnaXZlbiBzdHJpbmcsXHJcbiAqIHdoaWxlIGNvbnNpZGVyaW5nIHVuaWNvZGUgZ3JhcGhlbWUvZW1vamkgcnVsZXMuXHJcbiovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRMZWZ0RGVsZXRlT2Zmc2V0KG9mZnNldCwgc3RyKSB7XHJcbiAgICBpZiAob2Zmc2V0ID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICAvLyBUcnkgdG8gZGVsZXRlIGVtb2ppIHBhcnQuXHJcbiAgICBjb25zdCBlbW9qaU9mZnNldCA9IGdldE9mZnNldEJlZm9yZUxhc3RFbW9qaUNvbXBvbmVudChvZmZzZXQsIHN0cik7XHJcbiAgICBpZiAoZW1vamlPZmZzZXQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiBlbW9qaU9mZnNldDtcclxuICAgIH1cclxuICAgIC8vIE90aGVyd2lzZSwganVzdCBza2lwIGEgc2luZ2xlIGNvZGUgcG9pbnQuXHJcbiAgICBjb25zdCBjb2RlUG9pbnQgPSBnZXRQcmV2Q29kZVBvaW50KHN0ciwgb2Zmc2V0KTtcclxuICAgIG9mZnNldCAtPSBnZXRVVEYxNkxlbmd0aChjb2RlUG9pbnQpO1xyXG4gICAgcmV0dXJuIG9mZnNldDtcclxufVxyXG5mdW5jdGlvbiBnZXRPZmZzZXRCZWZvcmVMYXN0RW1vamlDb21wb25lbnQob2Zmc2V0LCBzdHIpIHtcclxuICAgIC8vIFNlZSBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyNTEvdHI1MS0xNC5odG1sI0VCTkZfYW5kX1JlZ2V4IGZvciB0aGVcclxuICAgIC8vIHN0cnVjdHVyZSBvZiBlbW9qaXMuXHJcbiAgICBsZXQgY29kZVBvaW50ID0gZ2V0UHJldkNvZGVQb2ludChzdHIsIG9mZnNldCk7XHJcbiAgICBvZmZzZXQgLT0gZ2V0VVRGMTZMZW5ndGgoY29kZVBvaW50KTtcclxuICAgIC8vIFNraXAgbW9kaWZpZXJzXHJcbiAgICB3aGlsZSAoKGlzRW1vamlNb2RpZmllcihjb2RlUG9pbnQpIHx8IGNvZGVQb2ludCA9PT0gNjUwMzkgLyogZW1vamlWYXJpYW50U2VsZWN0b3IgKi8gfHwgY29kZVBvaW50ID09PSA4NDE5IC8qIGVuY2xvc2luZ0tleUNhcCAqLykpIHtcclxuICAgICAgICBpZiAob2Zmc2V0ID09PSAwKSB7XHJcbiAgICAgICAgICAgIC8vIENhbm5vdCBza2lwIG1vZGlmaWVyLCBubyBwcmVjZWRpbmcgZW1vamkgYmFzZS5cclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29kZVBvaW50ID0gZ2V0UHJldkNvZGVQb2ludChzdHIsIG9mZnNldCk7XHJcbiAgICAgICAgb2Zmc2V0IC09IGdldFVURjE2TGVuZ3RoKGNvZGVQb2ludCk7XHJcbiAgICB9XHJcbiAgICAvLyBFeHBlY3QgYmFzZSBlbW9qaVxyXG4gICAgaWYgKCFpc0Vtb2ppSW1wcmVjaXNlKGNvZGVQb2ludCkpIHtcclxuICAgICAgICAvLyBVbmV4cGVjdGVkIGNvZGUgcG9pbnQsIG5vdCBhIHZhbGlkIGVtb2ppLlxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICBpZiAob2Zmc2V0ID49IDApIHtcclxuICAgICAgICAvLyBTa2lwIG9wdGlvbmFsIFpXSiBjb2RlIHBvaW50cyB0aGF0IGNvbWJpbmUgbXVsdGlwbGUgZW1vamlzLlxyXG4gICAgICAgIC8vIEluIHRoZW9yeSwgd2Ugc2hvdWxkIGNoZWNrIGlmIHRoYXQgWldKIGFjdHVhbGx5IGNvbWJpbmVzIG11bHRpcGxlIGVtb2ppc1xyXG4gICAgICAgIC8vIHRvIHByZXZlbnQgZGVsZXRpbmcgWldKcyBpbiBzaXR1YXRpb25zIHdlIGRpZG4ndCBhY2NvdW50IGZvci5cclxuICAgICAgICBjb25zdCBvcHRpb25hbFp3akNvZGVQb2ludCA9IGdldFByZXZDb2RlUG9pbnQoc3RyLCBvZmZzZXQpO1xyXG4gICAgICAgIGlmIChvcHRpb25hbFp3akNvZGVQb2ludCA9PT0gODIwNSAvKiB6d2ogKi8pIHtcclxuICAgICAgICAgICAgb2Zmc2V0IC09IGdldFVURjE2TGVuZ3RoKG9wdGlvbmFsWndqQ29kZVBvaW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2Zmc2V0O1xyXG59XHJcbmZ1bmN0aW9uIGdldFVURjE2TGVuZ3RoKGNvZGVQb2ludCkge1xyXG4gICAgcmV0dXJuIGNvZGVQb2ludCA+PSA2NTUzNiAvKiBVTklDT0RFX1NVUFBMRU1FTlRBUllfUExBTkVfQkVHSU4gKi8gPyAyIDogMTtcclxufVxyXG5mdW5jdGlvbiBpc0Vtb2ppTW9kaWZpZXIoY29kZVBvaW50KSB7XHJcbiAgICByZXR1cm4gMHgxRjNGQiA8PSBjb2RlUG9pbnQgJiYgY29kZVBvaW50IDw9IDB4MUYzRkY7XHJcbn1cclxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbmltcG9ydCAqIGFzIHN0cmluZ3MgZnJvbSAnLi9zdHJpbmdzLmpzJztcclxuLyoqXHJcbiAqIFJldHVybiBhIGhhc2ggdmFsdWUgZm9yIGFuIG9iamVjdC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBoYXNoKG9iaikge1xyXG4gICAgcmV0dXJuIGRvSGFzaChvYmosIDApO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBkb0hhc2gob2JqLCBoYXNoVmFsKSB7XHJcbiAgICBzd2l0Y2ggKHR5cGVvZiBvYmopIHtcclxuICAgICAgICBjYXNlICdvYmplY3QnOlxyXG4gICAgICAgICAgICBpZiAob2JqID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVySGFzaCgzNDksIGhhc2hWYWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5SGFzaChvYmosIGhhc2hWYWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBvYmplY3RIYXNoKG9iaiwgaGFzaFZhbCk7XHJcbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcclxuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ0hhc2gob2JqLCBoYXNoVmFsKTtcclxuICAgICAgICBjYXNlICdib29sZWFuJzpcclxuICAgICAgICAgICAgcmV0dXJuIGJvb2xlYW5IYXNoKG9iaiwgaGFzaFZhbCk7XHJcbiAgICAgICAgY2FzZSAnbnVtYmVyJzpcclxuICAgICAgICAgICAgcmV0dXJuIG51bWJlckhhc2gob2JqLCBoYXNoVmFsKTtcclxuICAgICAgICBjYXNlICd1bmRlZmluZWQnOlxyXG4gICAgICAgICAgICByZXR1cm4gbnVtYmVySGFzaCg5MzcsIGhhc2hWYWwpO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJIYXNoKDYxNywgaGFzaFZhbCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gbnVtYmVySGFzaCh2YWwsIGluaXRpYWxIYXNoVmFsKSB7XHJcbiAgICByZXR1cm4gKCgoaW5pdGlhbEhhc2hWYWwgPDwgNSkgLSBpbml0aWFsSGFzaFZhbCkgKyB2YWwpIHwgMDsgLy8gaGFzaFZhbCAqIDMxICsgY2gsIGtlZXAgYXMgaW50MzJcclxufVxyXG5mdW5jdGlvbiBib29sZWFuSGFzaChiLCBpbml0aWFsSGFzaFZhbCkge1xyXG4gICAgcmV0dXJuIG51bWJlckhhc2goYiA/IDQzMyA6IDg2MywgaW5pdGlhbEhhc2hWYWwpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdIYXNoKHMsIGhhc2hWYWwpIHtcclxuICAgIGhhc2hWYWwgPSBudW1iZXJIYXNoKDE0OTQxNywgaGFzaFZhbCk7XHJcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGhhc2hWYWwgPSBudW1iZXJIYXNoKHMuY2hhckNvZGVBdChpKSwgaGFzaFZhbCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaGFzaFZhbDtcclxufVxyXG5mdW5jdGlvbiBhcnJheUhhc2goYXJyLCBpbml0aWFsSGFzaFZhbCkge1xyXG4gICAgaW5pdGlhbEhhc2hWYWwgPSBudW1iZXJIYXNoKDEwNDU3OSwgaW5pdGlhbEhhc2hWYWwpO1xyXG4gICAgcmV0dXJuIGFyci5yZWR1Y2UoKGhhc2hWYWwsIGl0ZW0pID0+IGRvSGFzaChpdGVtLCBoYXNoVmFsKSwgaW5pdGlhbEhhc2hWYWwpO1xyXG59XHJcbmZ1bmN0aW9uIG9iamVjdEhhc2gob2JqLCBpbml0aWFsSGFzaFZhbCkge1xyXG4gICAgaW5pdGlhbEhhc2hWYWwgPSBudW1iZXJIYXNoKDE4MTM4NywgaW5pdGlhbEhhc2hWYWwpO1xyXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikuc29ydCgpLnJlZHVjZSgoaGFzaFZhbCwga2V5KSA9PiB7XHJcbiAgICAgICAgaGFzaFZhbCA9IHN0cmluZ0hhc2goa2V5LCBoYXNoVmFsKTtcclxuICAgICAgICByZXR1cm4gZG9IYXNoKG9ialtrZXldLCBoYXNoVmFsKTtcclxuICAgIH0sIGluaXRpYWxIYXNoVmFsKTtcclxufVxyXG5mdW5jdGlvbiBsZWZ0Um90YXRlKHZhbHVlLCBiaXRzLCB0b3RhbEJpdHMgPSAzMikge1xyXG4gICAgLy8gZGVsdGEgKyBiaXRzID0gdG90YWxCaXRzXHJcbiAgICBjb25zdCBkZWx0YSA9IHRvdGFsQml0cyAtIGJpdHM7XHJcbiAgICAvLyBBbGwgb25lcywgZXhwZWN0IGBkZWx0YWAgemVyb3MgYWxpZ25lZCB0byB0aGUgcmlnaHRcclxuICAgIGNvbnN0IG1hc2sgPSB+KCgxIDw8IGRlbHRhKSAtIDEpO1xyXG4gICAgLy8gSm9pbiAodmFsdWUgbGVmdC1zaGlmdGVkIGBiaXRzYCBiaXRzKSB3aXRoIChtYXNrZWQgdmFsdWUgcmlnaHQtc2hpZnRlZCBgZGVsdGFgIGJpdHMpXHJcbiAgICByZXR1cm4gKCh2YWx1ZSA8PCBiaXRzKSB8ICgobWFzayAmIHZhbHVlKSA+Pj4gZGVsdGEpKSA+Pj4gMDtcclxufVxyXG5mdW5jdGlvbiBmaWxsKGRlc3QsIGluZGV4ID0gMCwgY291bnQgPSBkZXN0LmJ5dGVMZW5ndGgsIHZhbHVlID0gMCkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgZGVzdFtpbmRleCArIGldID0gdmFsdWU7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gbGVmdFBhZCh2YWx1ZSwgbGVuZ3RoLCBjaGFyID0gJzAnKSB7XHJcbiAgICB3aGlsZSAodmFsdWUubGVuZ3RoIDwgbGVuZ3RoKSB7XHJcbiAgICAgICAgdmFsdWUgPSBjaGFyICsgdmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIHRvSGV4U3RyaW5nKGJ1ZmZlck9yVmFsdWUsIGJpdHNpemUgPSAzMikge1xyXG4gICAgaWYgKGJ1ZmZlck9yVmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKG5ldyBVaW50OEFycmF5KGJ1ZmZlck9yVmFsdWUpKS5tYXAoYiA9PiBiLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpKS5qb2luKCcnKTtcclxuICAgIH1cclxuICAgIHJldHVybiBsZWZ0UGFkKChidWZmZXJPclZhbHVlID4+PiAwKS50b1N0cmluZygxNiksIGJpdHNpemUgLyA0KTtcclxufVxyXG4vKipcclxuICogQSBTSEExIGltcGxlbWVudGF0aW9uIHRoYXQgd29ya3Mgd2l0aCBzdHJpbmdzIGFuZCBkb2VzIG5vdCBhbGxvY2F0ZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdHJpbmdTSEExIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuX2gwID0gMHg2NzQ1MjMwMTtcclxuICAgICAgICB0aGlzLl9oMSA9IDB4RUZDREFCODk7XHJcbiAgICAgICAgdGhpcy5faDIgPSAweDk4QkFEQ0ZFO1xyXG4gICAgICAgIHRoaXMuX2gzID0gMHgxMDMyNTQ3NjtcclxuICAgICAgICB0aGlzLl9oNCA9IDB4QzNEMkUxRjA7XHJcbiAgICAgICAgdGhpcy5fYnVmZiA9IG5ldyBVaW50OEFycmF5KDY0IC8qIEJMT0NLX1NJWkUgKi8gKyAzIC8qIHRvIGZpdCBhbnkgdXRmLTggKi8pO1xyXG4gICAgICAgIHRoaXMuX2J1ZmZEViA9IG5ldyBEYXRhVmlldyh0aGlzLl9idWZmLmJ1ZmZlcik7XHJcbiAgICAgICAgdGhpcy5fYnVmZkxlbiA9IDA7XHJcbiAgICAgICAgdGhpcy5fdG90YWxMZW4gPSAwO1xyXG4gICAgICAgIHRoaXMuX2xlZnRvdmVySGlnaFN1cnJvZ2F0ZSA9IDA7XHJcbiAgICAgICAgdGhpcy5fZmluaXNoZWQgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHVwZGF0ZShzdHIpIHtcclxuICAgICAgICBjb25zdCBzdHJMZW4gPSBzdHIubGVuZ3RoO1xyXG4gICAgICAgIGlmIChzdHJMZW4gPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBidWZmID0gdGhpcy5fYnVmZjtcclxuICAgICAgICBsZXQgYnVmZkxlbiA9IHRoaXMuX2J1ZmZMZW47XHJcbiAgICAgICAgbGV0IGxlZnRvdmVySGlnaFN1cnJvZ2F0ZSA9IHRoaXMuX2xlZnRvdmVySGlnaFN1cnJvZ2F0ZTtcclxuICAgICAgICBsZXQgY2hhckNvZGU7XHJcbiAgICAgICAgbGV0IG9mZnNldDtcclxuICAgICAgICBpZiAobGVmdG92ZXJIaWdoU3Vycm9nYXRlICE9PSAwKSB7XHJcbiAgICAgICAgICAgIGNoYXJDb2RlID0gbGVmdG92ZXJIaWdoU3Vycm9nYXRlO1xyXG4gICAgICAgICAgICBvZmZzZXQgPSAtMTtcclxuICAgICAgICAgICAgbGVmdG92ZXJIaWdoU3Vycm9nYXRlID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNoYXJDb2RlID0gc3RyLmNoYXJDb2RlQXQoMCk7XHJcbiAgICAgICAgICAgIG9mZnNldCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgIGxldCBjb2RlUG9pbnQgPSBjaGFyQ29kZTtcclxuICAgICAgICAgICAgaWYgKHN0cmluZ3MuaXNIaWdoU3Vycm9nYXRlKGNoYXJDb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldCArIDEgPCBzdHJMZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0Q2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChvZmZzZXQgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RyaW5ncy5pc0xvd1N1cnJvZ2F0ZShuZXh0Q2hhckNvZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlUG9pbnQgPSBzdHJpbmdzLmNvbXB1dGVDb2RlUG9pbnQoY2hhckNvZGUsIG5leHRDaGFyQ29kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpbGxlZ2FsID0+IHVuaWNvZGUgcmVwbGFjZW1lbnQgY2hhcmFjdGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVQb2ludCA9IDY1NTMzIC8qIFVOSUNPREVfUkVQTEFDRU1FTlQgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbGFzdCBjaGFyYWN0ZXIgaXMgYSBzdXJyb2dhdGUgcGFpclxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnRvdmVySGlnaFN1cnJvZ2F0ZSA9IGNoYXJDb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHN0cmluZ3MuaXNMb3dTdXJyb2dhdGUoY2hhckNvZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpbGxlZ2FsID0+IHVuaWNvZGUgcmVwbGFjZW1lbnQgY2hhcmFjdGVyXHJcbiAgICAgICAgICAgICAgICBjb2RlUG9pbnQgPSA2NTUzMyAvKiBVTklDT0RFX1JFUExBQ0VNRU5UICovO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJ1ZmZMZW4gPSB0aGlzLl9wdXNoKGJ1ZmYsIGJ1ZmZMZW4sIGNvZGVQb2ludCk7XHJcbiAgICAgICAgICAgIG9mZnNldCsrO1xyXG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgc3RyTGVuKSB7XHJcbiAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KG9mZnNldCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9idWZmTGVuID0gYnVmZkxlbjtcclxuICAgICAgICB0aGlzLl9sZWZ0b3ZlckhpZ2hTdXJyb2dhdGUgPSBsZWZ0b3ZlckhpZ2hTdXJyb2dhdGU7XHJcbiAgICB9XHJcbiAgICBfcHVzaChidWZmLCBidWZmTGVuLCBjb2RlUG9pbnQpIHtcclxuICAgICAgICBpZiAoY29kZVBvaW50IDwgMHgwMDgwKSB7XHJcbiAgICAgICAgICAgIGJ1ZmZbYnVmZkxlbisrXSA9IGNvZGVQb2ludDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoY29kZVBvaW50IDwgMHgwODAwKSB7XHJcbiAgICAgICAgICAgIGJ1ZmZbYnVmZkxlbisrXSA9IDBiMTEwMDAwMDAgfCAoKGNvZGVQb2ludCAmIDBiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTExMTEwMDAwMDApID4+PiA2KTtcclxuICAgICAgICAgICAgYnVmZltidWZmTGVuKytdID0gMGIxMDAwMDAwMCB8ICgoY29kZVBvaW50ICYgMGIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMTExMSkgPj4+IDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XHJcbiAgICAgICAgICAgIGJ1ZmZbYnVmZkxlbisrXSA9IDBiMTExMDAwMDAgfCAoKGNvZGVQb2ludCAmIDBiMDAwMDAwMDAwMDAwMDAwMDExMTEwMDAwMDAwMDAwMDApID4+PiAxMik7XHJcbiAgICAgICAgICAgIGJ1ZmZbYnVmZkxlbisrXSA9IDBiMTAwMDAwMDAgfCAoKGNvZGVQb2ludCAmIDBiMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTExMTEwMDAwMDApID4+PiA2KTtcclxuICAgICAgICAgICAgYnVmZltidWZmTGVuKytdID0gMGIxMDAwMDAwMCB8ICgoY29kZVBvaW50ICYgMGIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMTExMSkgPj4+IDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYnVmZltidWZmTGVuKytdID0gMGIxMTExMDAwMCB8ICgoY29kZVBvaW50ICYgMGIwMDAwMDAwMDAwMDExMTAwMDAwMDAwMDAwMDAwMDAwMCkgPj4+IDE4KTtcclxuICAgICAgICAgICAgYnVmZltidWZmTGVuKytdID0gMGIxMDAwMDAwMCB8ICgoY29kZVBvaW50ICYgMGIwMDAwMDAwMDAwMDAwMDExMTExMTAwMDAwMDAwMDAwMCkgPj4+IDEyKTtcclxuICAgICAgICAgICAgYnVmZltidWZmTGVuKytdID0gMGIxMDAwMDAwMCB8ICgoY29kZVBvaW50ICYgMGIwMDAwMDAwMDAwMDAwMDAwMDAwMDExMTExMTAwMDAwMCkgPj4+IDYpO1xyXG4gICAgICAgICAgICBidWZmW2J1ZmZMZW4rK10gPSAwYjEwMDAwMDAwIHwgKChjb2RlUG9pbnQgJiAwYjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTExMTExKSA+Pj4gMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChidWZmTGVuID49IDY0IC8qIEJMT0NLX1NJWkUgKi8pIHtcclxuICAgICAgICAgICAgdGhpcy5fc3RlcCgpO1xyXG4gICAgICAgICAgICBidWZmTGVuIC09IDY0IC8qIEJMT0NLX1NJWkUgKi87XHJcbiAgICAgICAgICAgIHRoaXMuX3RvdGFsTGVuICs9IDY0IC8qIEJMT0NLX1NJWkUgKi87XHJcbiAgICAgICAgICAgIC8vIHRha2UgbGFzdCAzIGluIGNhc2Ugb2YgVVRGOCBvdmVyZmxvd1xyXG4gICAgICAgICAgICBidWZmWzBdID0gYnVmZls2NCAvKiBCTE9DS19TSVpFICovICsgMF07XHJcbiAgICAgICAgICAgIGJ1ZmZbMV0gPSBidWZmWzY0IC8qIEJMT0NLX1NJWkUgKi8gKyAxXTtcclxuICAgICAgICAgICAgYnVmZlsyXSA9IGJ1ZmZbNjQgLyogQkxPQ0tfU0laRSAqLyArIDJdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYnVmZkxlbjtcclxuICAgIH1cclxuICAgIGRpZ2VzdCgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2ZpbmlzaGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2xlZnRvdmVySGlnaFN1cnJvZ2F0ZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gaWxsZWdhbCA9PiB1bmljb2RlIHJlcGxhY2VtZW50IGNoYXJhY3RlclxyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGVmdG92ZXJIaWdoU3Vycm9nYXRlID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2J1ZmZMZW4gPSB0aGlzLl9wdXNoKHRoaXMuX2J1ZmYsIHRoaXMuX2J1ZmZMZW4sIDY1NTMzIC8qIFVOSUNPREVfUkVQTEFDRU1FTlQgKi8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3RvdGFsTGVuICs9IHRoaXMuX2J1ZmZMZW47XHJcbiAgICAgICAgICAgIHRoaXMuX3dyYXBVcCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdG9IZXhTdHJpbmcodGhpcy5faDApICsgdG9IZXhTdHJpbmcodGhpcy5faDEpICsgdG9IZXhTdHJpbmcodGhpcy5faDIpICsgdG9IZXhTdHJpbmcodGhpcy5faDMpICsgdG9IZXhTdHJpbmcodGhpcy5faDQpO1xyXG4gICAgfVxyXG4gICAgX3dyYXBVcCgpIHtcclxuICAgICAgICB0aGlzLl9idWZmW3RoaXMuX2J1ZmZMZW4rK10gPSAweDgwO1xyXG4gICAgICAgIGZpbGwodGhpcy5fYnVmZiwgdGhpcy5fYnVmZkxlbik7XHJcbiAgICAgICAgaWYgKHRoaXMuX2J1ZmZMZW4gPiA1Nikge1xyXG4gICAgICAgICAgICB0aGlzLl9zdGVwKCk7XHJcbiAgICAgICAgICAgIGZpbGwodGhpcy5fYnVmZik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRoaXMgd2lsbCBmaXQgYmVjYXVzZSB0aGUgbWFudGlzc2EgY2FuIGNvdmVyIHVwIHRvIDUyIGJpdHNcclxuICAgICAgICBjb25zdCBtbCA9IDggKiB0aGlzLl90b3RhbExlbjtcclxuICAgICAgICB0aGlzLl9idWZmRFYuc2V0VWludDMyKDU2LCBNYXRoLmZsb29yKG1sIC8gNDI5NDk2NzI5NiksIGZhbHNlKTtcclxuICAgICAgICB0aGlzLl9idWZmRFYuc2V0VWludDMyKDYwLCBtbCAlIDQyOTQ5NjcyOTYsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLl9zdGVwKCk7XHJcbiAgICB9XHJcbiAgICBfc3RlcCgpIHtcclxuICAgICAgICBjb25zdCBiaWdCbG9jazMyID0gU3RyaW5nU0hBMS5fYmlnQmxvY2szMjtcclxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5fYnVmZkRWO1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgNjQgLyogMTYqNCAqLzsgaiArPSA0KSB7XHJcbiAgICAgICAgICAgIGJpZ0Jsb2NrMzIuc2V0VWludDMyKGosIGRhdGEuZ2V0VWludDMyKGosIGZhbHNlKSwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBqID0gNjQ7IGogPCAzMjAgLyogODAqNCAqLzsgaiArPSA0KSB7XHJcbiAgICAgICAgICAgIGJpZ0Jsb2NrMzIuc2V0VWludDMyKGosIGxlZnRSb3RhdGUoKGJpZ0Jsb2NrMzIuZ2V0VWludDMyKGogLSAxMiwgZmFsc2UpIF4gYmlnQmxvY2szMi5nZXRVaW50MzIoaiAtIDMyLCBmYWxzZSkgXiBiaWdCbG9jazMyLmdldFVpbnQzMihqIC0gNTYsIGZhbHNlKSBeIGJpZ0Jsb2NrMzIuZ2V0VWludDMyKGogLSA2NCwgZmFsc2UpKSwgMSksIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGEgPSB0aGlzLl9oMDtcclxuICAgICAgICBsZXQgYiA9IHRoaXMuX2gxO1xyXG4gICAgICAgIGxldCBjID0gdGhpcy5faDI7XHJcbiAgICAgICAgbGV0IGQgPSB0aGlzLl9oMztcclxuICAgICAgICBsZXQgZSA9IHRoaXMuX2g0O1xyXG4gICAgICAgIGxldCBmLCBrO1xyXG4gICAgICAgIGxldCB0ZW1wO1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgODA7IGorKykge1xyXG4gICAgICAgICAgICBpZiAoaiA8IDIwKSB7XHJcbiAgICAgICAgICAgICAgICBmID0gKGIgJiBjKSB8ICgofmIpICYgZCk7XHJcbiAgICAgICAgICAgICAgICBrID0gMHg1QTgyNzk5OTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChqIDwgNDApIHtcclxuICAgICAgICAgICAgICAgIGYgPSBiIF4gYyBeIGQ7XHJcbiAgICAgICAgICAgICAgICBrID0gMHg2RUQ5RUJBMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChqIDwgNjApIHtcclxuICAgICAgICAgICAgICAgIGYgPSAoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZCk7XHJcbiAgICAgICAgICAgICAgICBrID0gMHg4RjFCQkNEQztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGYgPSBiIF4gYyBeIGQ7XHJcbiAgICAgICAgICAgICAgICBrID0gMHhDQTYyQzFENjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0ZW1wID0gKGxlZnRSb3RhdGUoYSwgNSkgKyBmICsgZSArIGsgKyBiaWdCbG9jazMyLmdldFVpbnQzMihqICogNCwgZmFsc2UpKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgICAgIGUgPSBkO1xyXG4gICAgICAgICAgICBkID0gYztcclxuICAgICAgICAgICAgYyA9IGxlZnRSb3RhdGUoYiwgMzApO1xyXG4gICAgICAgICAgICBiID0gYTtcclxuICAgICAgICAgICAgYSA9IHRlbXA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2gwID0gKHRoaXMuX2gwICsgYSkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIHRoaXMuX2gxID0gKHRoaXMuX2gxICsgYikgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIHRoaXMuX2gyID0gKHRoaXMuX2gyICsgYykgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIHRoaXMuX2gzID0gKHRoaXMuX2gzICsgZCkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIHRoaXMuX2g0ID0gKHRoaXMuX2g0ICsgZSkgJiAweGZmZmZmZmZmO1xyXG4gICAgfVxyXG59XHJcblN0cmluZ1NIQTEuX2JpZ0Jsb2NrMzIgPSBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDMyMCkpOyAvLyA4MCAqIDQgPSAzMjBcclxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbmltcG9ydCB7IERpZmZDaGFuZ2UgfSBmcm9tICcuL2RpZmZDaGFuZ2UuanMnO1xyXG5pbXBvcnQgeyBzdHJpbmdIYXNoIH0gZnJvbSAnLi4vaGFzaC5qcyc7XHJcbmV4cG9ydCBjbGFzcyBTdHJpbmdEaWZmU2VxdWVuY2Uge1xyXG4gICAgY29uc3RydWN0b3Ioc291cmNlKSB7XHJcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XHJcbiAgICB9XHJcbiAgICBnZXRFbGVtZW50cygpIHtcclxuICAgICAgICBjb25zdCBzb3VyY2UgPSB0aGlzLnNvdXJjZTtcclxuICAgICAgICBjb25zdCBjaGFyYWN0ZXJzID0gbmV3IEludDMyQXJyYXkoc291cmNlLmxlbmd0aCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNvdXJjZS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBjaGFyYWN0ZXJzW2ldID0gc291cmNlLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjaGFyYWN0ZXJzO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdEaWZmKG9yaWdpbmFsLCBtb2RpZmllZCwgcHJldHR5KSB7XHJcbiAgICByZXR1cm4gbmV3IExjc0RpZmYobmV3IFN0cmluZ0RpZmZTZXF1ZW5jZShvcmlnaW5hbCksIG5ldyBTdHJpbmdEaWZmU2VxdWVuY2UobW9kaWZpZWQpKS5Db21wdXRlRGlmZihwcmV0dHkpLmNoYW5nZXM7XHJcbn1cclxuLy9cclxuLy8gVGhlIGNvZGUgYmVsb3cgaGFzIGJlZW4gcG9ydGVkIGZyb20gYSBDIyBpbXBsZW1lbnRhdGlvbiBpbiBWU1xyXG4vL1xyXG5leHBvcnQgY2xhc3MgRGVidWcge1xyXG4gICAgc3RhdGljIEFzc2VydChjb25kaXRpb24sIG1lc3NhZ2UpIHtcclxuICAgICAgICBpZiAoIWNvbmRpdGlvbikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBNeUFycmF5IHtcclxuICAgIC8qKlxyXG4gICAgICogQ29waWVzIGEgcmFuZ2Ugb2YgZWxlbWVudHMgZnJvbSBhbiBBcnJheSBzdGFydGluZyBhdCB0aGUgc3BlY2lmaWVkIHNvdXJjZSBpbmRleCBhbmQgcGFzdGVzXHJcbiAgICAgKiB0aGVtIHRvIGFub3RoZXIgQXJyYXkgc3RhcnRpbmcgYXQgdGhlIHNwZWNpZmllZCBkZXN0aW5hdGlvbiBpbmRleC4gVGhlIGxlbmd0aCBhbmQgdGhlIGluZGV4ZXNcclxuICAgICAqIGFyZSBzcGVjaWZpZWQgYXMgNjQtYml0IGludGVnZXJzLlxyXG4gICAgICogc291cmNlQXJyYXk6XHJcbiAgICAgKlx0XHRUaGUgQXJyYXkgdGhhdCBjb250YWlucyB0aGUgZGF0YSB0byBjb3B5LlxyXG4gICAgICogc291cmNlSW5kZXg6XHJcbiAgICAgKlx0XHRBIDY0LWJpdCBpbnRlZ2VyIHRoYXQgcmVwcmVzZW50cyB0aGUgaW5kZXggaW4gdGhlIHNvdXJjZUFycmF5IGF0IHdoaWNoIGNvcHlpbmcgYmVnaW5zLlxyXG4gICAgICogZGVzdGluYXRpb25BcnJheTpcclxuICAgICAqXHRcdFRoZSBBcnJheSB0aGF0IHJlY2VpdmVzIHRoZSBkYXRhLlxyXG4gICAgICogZGVzdGluYXRpb25JbmRleDpcclxuICAgICAqXHRcdEEgNjQtYml0IGludGVnZXIgdGhhdCByZXByZXNlbnRzIHRoZSBpbmRleCBpbiB0aGUgZGVzdGluYXRpb25BcnJheSBhdCB3aGljaCBzdG9yaW5nIGJlZ2lucy5cclxuICAgICAqIGxlbmd0aDpcclxuICAgICAqXHRcdEEgNjQtYml0IGludGVnZXIgdGhhdCByZXByZXNlbnRzIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gY29weS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIENvcHkoc291cmNlQXJyYXksIHNvdXJjZUluZGV4LCBkZXN0aW5hdGlvbkFycmF5LCBkZXN0aW5hdGlvbkluZGV4LCBsZW5ndGgpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uQXJyYXlbZGVzdGluYXRpb25JbmRleCArIGldID0gc291cmNlQXJyYXlbc291cmNlSW5kZXggKyBpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgQ29weTIoc291cmNlQXJyYXksIHNvdXJjZUluZGV4LCBkZXN0aW5hdGlvbkFycmF5LCBkZXN0aW5hdGlvbkluZGV4LCBsZW5ndGgpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uQXJyYXlbZGVzdGluYXRpb25JbmRleCArIGldID0gc291cmNlQXJyYXlbc291cmNlSW5kZXggKyBpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEEgdXRpbGl0eSBjbGFzcyB3aGljaCBoZWxwcyB0byBjcmVhdGUgdGhlIHNldCBvZiBEaWZmQ2hhbmdlcyBmcm9tXHJcbiAqIGEgZGlmZmVyZW5jZSBvcGVyYXRpb24uIFRoaXMgY2xhc3MgYWNjZXB0cyBvcmlnaW5hbCBEaWZmRWxlbWVudHMgYW5kXHJcbiAqIG1vZGlmaWVkIERpZmZFbGVtZW50cyB0aGF0IGFyZSBpbnZvbHZlZCBpbiBhIHBhcnRpY3VsYXIgY2hhbmdlLiBUaGVcclxuICogTWFya3ROZXh0Q2hhbmdlKCkgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gbWFyayB0aGUgc2VwYXJhdGlvbiBiZXR3ZWVuXHJcbiAqIGRpc3RpbmN0IGNoYW5nZXMuIEF0IHRoZSBlbmQsIHRoZSBDaGFuZ2VzIHByb3BlcnR5IGNhbiBiZSBjYWxsZWQgdG8gcmV0cmlldmVcclxuICogdGhlIGNvbnN0cnVjdGVkIGNoYW5nZXMuXHJcbiAqL1xyXG5jbGFzcyBEaWZmQ2hhbmdlSGVscGVyIHtcclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0cyBhIG5ldyBEaWZmQ2hhbmdlSGVscGVyIGZvciB0aGUgZ2l2ZW4gRGlmZlNlcXVlbmNlcy5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5tX2NoYW5nZXMgPSBbXTtcclxuICAgICAgICB0aGlzLm1fb3JpZ2luYWxTdGFydCA9IDEwNzM3NDE4MjQgLyogTUFYX1NBRkVfU01BTExfSU5URUdFUiAqLztcclxuICAgICAgICB0aGlzLm1fbW9kaWZpZWRTdGFydCA9IDEwNzM3NDE4MjQgLyogTUFYX1NBRkVfU01BTExfSU5URUdFUiAqLztcclxuICAgICAgICB0aGlzLm1fb3JpZ2luYWxDb3VudCA9IDA7XHJcbiAgICAgICAgdGhpcy5tX21vZGlmaWVkQ291bnQgPSAwO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXJrcyB0aGUgYmVnaW5uaW5nIG9mIHRoZSBuZXh0IGNoYW5nZSBpbiB0aGUgc2V0IG9mIGRpZmZlcmVuY2VzLlxyXG4gICAgICovXHJcbiAgICBNYXJrTmV4dENoYW5nZSgpIHtcclxuICAgICAgICAvLyBPbmx5IGFkZCB0byB0aGUgbGlzdCBpZiB0aGVyZSBpcyBzb21ldGhpbmcgdG8gYWRkXHJcbiAgICAgICAgaWYgKHRoaXMubV9vcmlnaW5hbENvdW50ID4gMCB8fCB0aGlzLm1fbW9kaWZpZWRDb3VudCA+IDApIHtcclxuICAgICAgICAgICAgLy8gQWRkIHRoZSBuZXcgY2hhbmdlIHRvIG91ciBsaXN0XHJcbiAgICAgICAgICAgIHRoaXMubV9jaGFuZ2VzLnB1c2gobmV3IERpZmZDaGFuZ2UodGhpcy5tX29yaWdpbmFsU3RhcnQsIHRoaXMubV9vcmlnaW5hbENvdW50LCB0aGlzLm1fbW9kaWZpZWRTdGFydCwgdGhpcy5tX21vZGlmaWVkQ291bnQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUmVzZXQgZm9yIHRoZSBuZXh0IGNoYW5nZVxyXG4gICAgICAgIHRoaXMubV9vcmlnaW5hbENvdW50ID0gMDtcclxuICAgICAgICB0aGlzLm1fbW9kaWZpZWRDb3VudCA9IDA7XHJcbiAgICAgICAgdGhpcy5tX29yaWdpbmFsU3RhcnQgPSAxMDczNzQxODI0IC8qIE1BWF9TQUZFX1NNQUxMX0lOVEVHRVIgKi87XHJcbiAgICAgICAgdGhpcy5tX21vZGlmaWVkU3RhcnQgPSAxMDczNzQxODI0IC8qIE1BWF9TQUZFX1NNQUxMX0lOVEVHRVIgKi87XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgdGhlIG9yaWdpbmFsIGVsZW1lbnQgYXQgdGhlIGdpdmVuIHBvc2l0aW9uIHRvIHRoZSBlbGVtZW50c1xyXG4gICAgICogYWZmZWN0ZWQgYnkgdGhlIGN1cnJlbnQgY2hhbmdlLiBUaGUgbW9kaWZpZWQgaW5kZXggZ2l2ZXMgY29udGV4dFxyXG4gICAgICogdG8gdGhlIGNoYW5nZSBwb3NpdGlvbiB3aXRoIHJlc3BlY3QgdG8gdGhlIG9yaWdpbmFsIHNlcXVlbmNlLlxyXG4gICAgICogQHBhcmFtIG9yaWdpbmFsSW5kZXggVGhlIGluZGV4IG9mIHRoZSBvcmlnaW5hbCBlbGVtZW50IHRvIGFkZC5cclxuICAgICAqIEBwYXJhbSBtb2RpZmllZEluZGV4IFRoZSBpbmRleCBvZiB0aGUgbW9kaWZpZWQgZWxlbWVudCB0aGF0IHByb3ZpZGVzIGNvcnJlc3BvbmRpbmcgcG9zaXRpb24gaW4gdGhlIG1vZGlmaWVkIHNlcXVlbmNlLlxyXG4gICAgICovXHJcbiAgICBBZGRPcmlnaW5hbEVsZW1lbnQob3JpZ2luYWxJbmRleCwgbW9kaWZpZWRJbmRleCkge1xyXG4gICAgICAgIC8vIFRoZSAndHJ1ZScgc3RhcnQgaW5kZXggaXMgdGhlIHNtYWxsZXN0IG9mIHRoZSBvbmVzIHdlJ3ZlIHNlZW5cclxuICAgICAgICB0aGlzLm1fb3JpZ2luYWxTdGFydCA9IE1hdGgubWluKHRoaXMubV9vcmlnaW5hbFN0YXJ0LCBvcmlnaW5hbEluZGV4KTtcclxuICAgICAgICB0aGlzLm1fbW9kaWZpZWRTdGFydCA9IE1hdGgubWluKHRoaXMubV9tb2RpZmllZFN0YXJ0LCBtb2RpZmllZEluZGV4KTtcclxuICAgICAgICB0aGlzLm1fb3JpZ2luYWxDb3VudCsrO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIHRoZSBtb2RpZmllZCBlbGVtZW50IGF0IHRoZSBnaXZlbiBwb3NpdGlvbiB0byB0aGUgZWxlbWVudHNcclxuICAgICAqIGFmZmVjdGVkIGJ5IHRoZSBjdXJyZW50IGNoYW5nZS4gVGhlIG9yaWdpbmFsIGluZGV4IGdpdmVzIGNvbnRleHRcclxuICAgICAqIHRvIHRoZSBjaGFuZ2UgcG9zaXRpb24gd2l0aCByZXNwZWN0IHRvIHRoZSBtb2RpZmllZCBzZXF1ZW5jZS5cclxuICAgICAqIEBwYXJhbSBvcmlnaW5hbEluZGV4IFRoZSBpbmRleCBvZiB0aGUgb3JpZ2luYWwgZWxlbWVudCB0aGF0IHByb3ZpZGVzIGNvcnJlc3BvbmRpbmcgcG9zaXRpb24gaW4gdGhlIG9yaWdpbmFsIHNlcXVlbmNlLlxyXG4gICAgICogQHBhcmFtIG1vZGlmaWVkSW5kZXggVGhlIGluZGV4IG9mIHRoZSBtb2RpZmllZCBlbGVtZW50IHRvIGFkZC5cclxuICAgICAqL1xyXG4gICAgQWRkTW9kaWZpZWRFbGVtZW50KG9yaWdpbmFsSW5kZXgsIG1vZGlmaWVkSW5kZXgpIHtcclxuICAgICAgICAvLyBUaGUgJ3RydWUnIHN0YXJ0IGluZGV4IGlzIHRoZSBzbWFsbGVzdCBvZiB0aGUgb25lcyB3ZSd2ZSBzZWVuXHJcbiAgICAgICAgdGhpcy5tX29yaWdpbmFsU3RhcnQgPSBNYXRoLm1pbih0aGlzLm1fb3JpZ2luYWxTdGFydCwgb3JpZ2luYWxJbmRleCk7XHJcbiAgICAgICAgdGhpcy5tX21vZGlmaWVkU3RhcnQgPSBNYXRoLm1pbih0aGlzLm1fbW9kaWZpZWRTdGFydCwgbW9kaWZpZWRJbmRleCk7XHJcbiAgICAgICAgdGhpcy5tX21vZGlmaWVkQ291bnQrKztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0cmlldmVzIGFsbCBvZiB0aGUgY2hhbmdlcyBtYXJrZWQgYnkgdGhlIGNsYXNzLlxyXG4gICAgICovXHJcbiAgICBnZXRDaGFuZ2VzKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm1fb3JpZ2luYWxDb3VudCA+IDAgfHwgdGhpcy5tX21vZGlmaWVkQ291bnQgPiAwKSB7XHJcbiAgICAgICAgICAgIC8vIEZpbmlzaCB1cCBvbiB3aGF0ZXZlciBpcyBsZWZ0XHJcbiAgICAgICAgICAgIHRoaXMuTWFya05leHRDaGFuZ2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubV9jaGFuZ2VzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXRyaWV2ZXMgYWxsIG9mIHRoZSBjaGFuZ2VzIG1hcmtlZCBieSB0aGUgY2xhc3MgaW4gdGhlIHJldmVyc2Ugb3JkZXJcclxuICAgICAqL1xyXG4gICAgZ2V0UmV2ZXJzZUNoYW5nZXMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubV9vcmlnaW5hbENvdW50ID4gMCB8fCB0aGlzLm1fbW9kaWZpZWRDb3VudCA+IDApIHtcclxuICAgICAgICAgICAgLy8gRmluaXNoIHVwIG9uIHdoYXRldmVyIGlzIGxlZnRcclxuICAgICAgICAgICAgdGhpcy5NYXJrTmV4dENoYW5nZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1fY2hhbmdlcy5yZXZlcnNlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubV9jaGFuZ2VzO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgZGlmZmVyZW5jZSBhbGdvcml0aG0gZGVzY3JpYmVkIGluXHJcbiAqIFwiQW4gTyhORCkgRGlmZmVyZW5jZSBBbGdvcml0aG0gYW5kIGl0cyB2YXJpYXRpb25zXCIgYnkgRXVnZW5lIFcuIE15ZXJzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTGNzRGlmZiB7XHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdHMgdGhlIERpZmZGaW5kZXJcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Iob3JpZ2luYWxTZXF1ZW5jZSwgbW9kaWZpZWRTZXF1ZW5jZSwgY29udGludWVQcm9jZXNzaW5nUHJlZGljYXRlID0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuQ29udGludWVQcm9jZXNzaW5nUHJlZGljYXRlID0gY29udGludWVQcm9jZXNzaW5nUHJlZGljYXRlO1xyXG4gICAgICAgIGNvbnN0IFtvcmlnaW5hbFN0cmluZ0VsZW1lbnRzLCBvcmlnaW5hbEVsZW1lbnRzT3JIYXNoLCBvcmlnaW5hbEhhc1N0cmluZ3NdID0gTGNzRGlmZi5fZ2V0RWxlbWVudHMob3JpZ2luYWxTZXF1ZW5jZSk7XHJcbiAgICAgICAgY29uc3QgW21vZGlmaWVkU3RyaW5nRWxlbWVudHMsIG1vZGlmaWVkRWxlbWVudHNPckhhc2gsIG1vZGlmaWVkSGFzU3RyaW5nc10gPSBMY3NEaWZmLl9nZXRFbGVtZW50cyhtb2RpZmllZFNlcXVlbmNlKTtcclxuICAgICAgICB0aGlzLl9oYXNTdHJpbmdzID0gKG9yaWdpbmFsSGFzU3RyaW5ncyAmJiBtb2RpZmllZEhhc1N0cmluZ3MpO1xyXG4gICAgICAgIHRoaXMuX29yaWdpbmFsU3RyaW5nRWxlbWVudHMgPSBvcmlnaW5hbFN0cmluZ0VsZW1lbnRzO1xyXG4gICAgICAgIHRoaXMuX29yaWdpbmFsRWxlbWVudHNPckhhc2ggPSBvcmlnaW5hbEVsZW1lbnRzT3JIYXNoO1xyXG4gICAgICAgIHRoaXMuX21vZGlmaWVkU3RyaW5nRWxlbWVudHMgPSBtb2RpZmllZFN0cmluZ0VsZW1lbnRzO1xyXG4gICAgICAgIHRoaXMuX21vZGlmaWVkRWxlbWVudHNPckhhc2ggPSBtb2RpZmllZEVsZW1lbnRzT3JIYXNoO1xyXG4gICAgICAgIHRoaXMubV9mb3J3YXJkSGlzdG9yeSA9IFtdO1xyXG4gICAgICAgIHRoaXMubV9yZXZlcnNlSGlzdG9yeSA9IFtdO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIF9pc1N0cmluZ0FycmF5KGFycikge1xyXG4gICAgICAgIHJldHVybiAoYXJyLmxlbmd0aCA+IDAgJiYgdHlwZW9mIGFyclswXSA9PT0gJ3N0cmluZycpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIF9nZXRFbGVtZW50cyhzZXF1ZW5jZSkge1xyXG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gc2VxdWVuY2UuZ2V0RWxlbWVudHMoKTtcclxuICAgICAgICBpZiAoTGNzRGlmZi5faXNTdHJpbmdBcnJheShlbGVtZW50cykpIHtcclxuICAgICAgICAgICAgY29uc3QgaGFzaGVzID0gbmV3IEludDMyQXJyYXkoZWxlbWVudHMubGVuZ3RoKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGVsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBoYXNoZXNbaV0gPSBzdHJpbmdIYXNoKGVsZW1lbnRzW2ldLCAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gW2VsZW1lbnRzLCBoYXNoZXMsIHRydWVdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZWxlbWVudHMgaW5zdGFuY2VvZiBJbnQzMkFycmF5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbW10sIGVsZW1lbnRzLCBmYWxzZV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbW10sIG5ldyBJbnQzMkFycmF5KGVsZW1lbnRzKSwgZmFsc2VdO1xyXG4gICAgfVxyXG4gICAgRWxlbWVudHNBcmVFcXVhbChvcmlnaW5hbEluZGV4LCBuZXdJbmRleCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9vcmlnaW5hbEVsZW1lbnRzT3JIYXNoW29yaWdpbmFsSW5kZXhdICE9PSB0aGlzLl9tb2RpZmllZEVsZW1lbnRzT3JIYXNoW25ld0luZGV4XSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAodGhpcy5faGFzU3RyaW5ncyA/IHRoaXMuX29yaWdpbmFsU3RyaW5nRWxlbWVudHNbb3JpZ2luYWxJbmRleF0gPT09IHRoaXMuX21vZGlmaWVkU3RyaW5nRWxlbWVudHNbbmV3SW5kZXhdIDogdHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBPcmlnaW5hbEVsZW1lbnRzQXJlRXF1YWwoaW5kZXgxLCBpbmRleDIpIHtcclxuICAgICAgICBpZiAodGhpcy5fb3JpZ2luYWxFbGVtZW50c09ySGFzaFtpbmRleDFdICE9PSB0aGlzLl9vcmlnaW5hbEVsZW1lbnRzT3JIYXNoW2luZGV4Ml0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKHRoaXMuX2hhc1N0cmluZ3MgPyB0aGlzLl9vcmlnaW5hbFN0cmluZ0VsZW1lbnRzW2luZGV4MV0gPT09IHRoaXMuX29yaWdpbmFsU3RyaW5nRWxlbWVudHNbaW5kZXgyXSA6IHRydWUpO1xyXG4gICAgfVxyXG4gICAgTW9kaWZpZWRFbGVtZW50c0FyZUVxdWFsKGluZGV4MSwgaW5kZXgyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX21vZGlmaWVkRWxlbWVudHNPckhhc2hbaW5kZXgxXSAhPT0gdGhpcy5fbW9kaWZpZWRFbGVtZW50c09ySGFzaFtpbmRleDJdKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLl9oYXNTdHJpbmdzID8gdGhpcy5fbW9kaWZpZWRTdHJpbmdFbGVtZW50c1tpbmRleDFdID09PSB0aGlzLl9tb2RpZmllZFN0cmluZ0VsZW1lbnRzW2luZGV4Ml0gOiB0cnVlKTtcclxuICAgIH1cclxuICAgIENvbXB1dGVEaWZmKHByZXR0eSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9Db21wdXRlRGlmZigwLCB0aGlzLl9vcmlnaW5hbEVsZW1lbnRzT3JIYXNoLmxlbmd0aCAtIDEsIDAsIHRoaXMuX21vZGlmaWVkRWxlbWVudHNPckhhc2gubGVuZ3RoIC0gMSwgcHJldHR5KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ29tcHV0ZXMgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gdGhlIG9yaWdpbmFsIGFuZCBtb2RpZmllZCBpbnB1dFxyXG4gICAgICogc2VxdWVuY2VzIG9uIHRoZSBib3VuZGVkIHJhbmdlLlxyXG4gICAgICogQHJldHVybnMgQW4gYXJyYXkgb2YgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gdGhlIHR3byBpbnB1dCBzZXF1ZW5jZXMuXHJcbiAgICAgKi9cclxuICAgIF9Db21wdXRlRGlmZihvcmlnaW5hbFN0YXJ0LCBvcmlnaW5hbEVuZCwgbW9kaWZpZWRTdGFydCwgbW9kaWZpZWRFbmQsIHByZXR0eSkge1xyXG4gICAgICAgIGNvbnN0IHF1aXRFYXJseUFyciA9IFtmYWxzZV07XHJcbiAgICAgICAgbGV0IGNoYW5nZXMgPSB0aGlzLkNvbXB1dGVEaWZmUmVjdXJzaXZlKG9yaWdpbmFsU3RhcnQsIG9yaWdpbmFsRW5kLCBtb2RpZmllZFN0YXJ0LCBtb2RpZmllZEVuZCwgcXVpdEVhcmx5QXJyKTtcclxuICAgICAgICBpZiAocHJldHR5KSB7XHJcbiAgICAgICAgICAgIC8vIFdlIGhhdmUgdG8gY2xlYW4gdXAgdGhlIGNvbXB1dGVkIGRpZmYgdG8gYmUgbW9yZSBpbnR1aXRpdmVcclxuICAgICAgICAgICAgLy8gYnV0IGl0IHR1cm5zIG91dCB0aGlzIGNhbm5vdCBiZSBkb25lIGNvcnJlY3RseSB1bnRpbCB0aGUgZW50aXJlIHNldFxyXG4gICAgICAgICAgICAvLyBvZiBkaWZmcyBoYXZlIGJlZW4gY29tcHV0ZWRcclxuICAgICAgICAgICAgY2hhbmdlcyA9IHRoaXMuUHJldHRpZnlDaGFuZ2VzKGNoYW5nZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBxdWl0RWFybHk6IHF1aXRFYXJseUFyclswXSxcclxuICAgICAgICAgICAgY2hhbmdlczogY2hhbmdlc1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFByaXZhdGUgaGVscGVyIG1ldGhvZCB3aGljaCBjb21wdXRlcyB0aGUgZGlmZmVyZW5jZXMgb24gdGhlIGJvdW5kZWQgcmFuZ2VcclxuICAgICAqIHJlY3Vyc2l2ZWx5LlxyXG4gICAgICogQHJldHVybnMgQW4gYXJyYXkgb2YgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gdGhlIHR3byBpbnB1dCBzZXF1ZW5jZXMuXHJcbiAgICAgKi9cclxuICAgIENvbXB1dGVEaWZmUmVjdXJzaXZlKG9yaWdpbmFsU3RhcnQsIG9yaWdpbmFsRW5kLCBtb2RpZmllZFN0YXJ0LCBtb2RpZmllZEVuZCwgcXVpdEVhcmx5QXJyKSB7XHJcbiAgICAgICAgcXVpdEVhcmx5QXJyWzBdID0gZmFsc2U7XHJcbiAgICAgICAgLy8gRmluZCB0aGUgc3RhcnQgb2YgdGhlIGRpZmZlcmVuY2VzXHJcbiAgICAgICAgd2hpbGUgKG9yaWdpbmFsU3RhcnQgPD0gb3JpZ2luYWxFbmQgJiYgbW9kaWZpZWRTdGFydCA8PSBtb2RpZmllZEVuZCAmJiB0aGlzLkVsZW1lbnRzQXJlRXF1YWwob3JpZ2luYWxTdGFydCwgbW9kaWZpZWRTdGFydCkpIHtcclxuICAgICAgICAgICAgb3JpZ2luYWxTdGFydCsrO1xyXG4gICAgICAgICAgICBtb2RpZmllZFN0YXJ0Kys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEZpbmQgdGhlIGVuZCBvZiB0aGUgZGlmZmVyZW5jZXNcclxuICAgICAgICB3aGlsZSAob3JpZ2luYWxFbmQgPj0gb3JpZ2luYWxTdGFydCAmJiBtb2RpZmllZEVuZCA+PSBtb2RpZmllZFN0YXJ0ICYmIHRoaXMuRWxlbWVudHNBcmVFcXVhbChvcmlnaW5hbEVuZCwgbW9kaWZpZWRFbmQpKSB7XHJcbiAgICAgICAgICAgIG9yaWdpbmFsRW5kLS07XHJcbiAgICAgICAgICAgIG1vZGlmaWVkRW5kLS07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEluIHRoZSBzcGVjaWFsIGNhc2Ugd2hlcmUgd2UgZWl0aGVyIGhhdmUgYWxsIGluc2VydGlvbnMgb3IgYWxsIGRlbGV0aW9ucyBvciB0aGUgc2VxdWVuY2VzIGFyZSBpZGVudGljYWxcclxuICAgICAgICBpZiAob3JpZ2luYWxTdGFydCA+IG9yaWdpbmFsRW5kIHx8IG1vZGlmaWVkU3RhcnQgPiBtb2RpZmllZEVuZCkge1xyXG4gICAgICAgICAgICBsZXQgY2hhbmdlcztcclxuICAgICAgICAgICAgaWYgKG1vZGlmaWVkU3RhcnQgPD0gbW9kaWZpZWRFbmQpIHtcclxuICAgICAgICAgICAgICAgIERlYnVnLkFzc2VydChvcmlnaW5hbFN0YXJ0ID09PSBvcmlnaW5hbEVuZCArIDEsICdvcmlnaW5hbFN0YXJ0IHNob3VsZCBvbmx5IGJlIG9uZSBtb3JlIHRoYW4gb3JpZ2luYWxFbmQnKTtcclxuICAgICAgICAgICAgICAgIC8vIEFsbCBpbnNlcnRpb25zXHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VzID0gW1xyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBEaWZmQ2hhbmdlKG9yaWdpbmFsU3RhcnQsIDAsIG1vZGlmaWVkU3RhcnQsIG1vZGlmaWVkRW5kIC0gbW9kaWZpZWRTdGFydCArIDEpXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG9yaWdpbmFsU3RhcnQgPD0gb3JpZ2luYWxFbmQpIHtcclxuICAgICAgICAgICAgICAgIERlYnVnLkFzc2VydChtb2RpZmllZFN0YXJ0ID09PSBtb2RpZmllZEVuZCArIDEsICdtb2RpZmllZFN0YXJ0IHNob3VsZCBvbmx5IGJlIG9uZSBtb3JlIHRoYW4gbW9kaWZpZWRFbmQnKTtcclxuICAgICAgICAgICAgICAgIC8vIEFsbCBkZWxldGlvbnNcclxuICAgICAgICAgICAgICAgIGNoYW5nZXMgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IERpZmZDaGFuZ2Uob3JpZ2luYWxTdGFydCwgb3JpZ2luYWxFbmQgLSBvcmlnaW5hbFN0YXJ0ICsgMSwgbW9kaWZpZWRTdGFydCwgMClcclxuICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBEZWJ1Zy5Bc3NlcnQob3JpZ2luYWxTdGFydCA9PT0gb3JpZ2luYWxFbmQgKyAxLCAnb3JpZ2luYWxTdGFydCBzaG91bGQgb25seSBiZSBvbmUgbW9yZSB0aGFuIG9yaWdpbmFsRW5kJyk7XHJcbiAgICAgICAgICAgICAgICBEZWJ1Zy5Bc3NlcnQobW9kaWZpZWRTdGFydCA9PT0gbW9kaWZpZWRFbmQgKyAxLCAnbW9kaWZpZWRTdGFydCBzaG91bGQgb25seSBiZSBvbmUgbW9yZSB0aGFuIG1vZGlmaWVkRW5kJyk7XHJcbiAgICAgICAgICAgICAgICAvLyBJZGVudGljYWwgc2VxdWVuY2VzIC0gTm8gZGlmZmVyZW5jZXNcclxuICAgICAgICAgICAgICAgIGNoYW5nZXMgPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY2hhbmdlcztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVGhpcyBwcm9ibGVtIGNhbiBiZSBzb2x2ZWQgdXNpbmcgdGhlIERpdmlkZS1BbmQtQ29ucXVlciB0ZWNobmlxdWUuXHJcbiAgICAgICAgY29uc3QgbWlkT3JpZ2luYWxBcnIgPSBbMF07XHJcbiAgICAgICAgY29uc3QgbWlkTW9kaWZpZWRBcnIgPSBbMF07XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5Db21wdXRlUmVjdXJzaW9uUG9pbnQob3JpZ2luYWxTdGFydCwgb3JpZ2luYWxFbmQsIG1vZGlmaWVkU3RhcnQsIG1vZGlmaWVkRW5kLCBtaWRPcmlnaW5hbEFyciwgbWlkTW9kaWZpZWRBcnIsIHF1aXRFYXJseUFycik7XHJcbiAgICAgICAgY29uc3QgbWlkT3JpZ2luYWwgPSBtaWRPcmlnaW5hbEFyclswXTtcclxuICAgICAgICBjb25zdCBtaWRNb2RpZmllZCA9IG1pZE1vZGlmaWVkQXJyWzBdO1xyXG4gICAgICAgIGlmIChyZXN1bHQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgLy8gUmVzdWx0IGlzIG5vdC1udWxsIHdoZW4gdGhlcmUgd2FzIGVub3VnaCBtZW1vcnkgdG8gY29tcHV0ZSB0aGUgY2hhbmdlcyB3aGlsZVxyXG4gICAgICAgICAgICAvLyBzZWFyY2hpbmcgZm9yIHRoZSByZWN1cnNpb24gcG9pbnRcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIXF1aXRFYXJseUFyclswXSkge1xyXG4gICAgICAgICAgICAvLyBXZSBjYW4gYnJlYWsgdGhlIHByb2JsZW0gZG93biByZWN1cnNpdmVseSBieSBmaW5kaW5nIHRoZSBjaGFuZ2VzIGluIHRoZVxyXG4gICAgICAgICAgICAvLyBGaXJzdCBIYWxmOiAgIChvcmlnaW5hbFN0YXJ0LCBtb2RpZmllZFN0YXJ0KSB0byAobWlkT3JpZ2luYWwsIG1pZE1vZGlmaWVkKVxyXG4gICAgICAgICAgICAvLyBTZWNvbmQgSGFsZjogIChtaWRPcmlnaW5hbCArIDEsIG1pbk1vZGlmaWVkICsgMSkgdG8gKG9yaWdpbmFsRW5kLCBtb2RpZmllZEVuZClcclxuICAgICAgICAgICAgLy8gTk9URTogQ29tcHV0ZURpZmYoKSBpcyBpbmNsdXNpdmUsIHRoZXJlZm9yZSB0aGUgc2Vjb25kIHJhbmdlIHN0YXJ0cyBvbiB0aGUgbmV4dCBwb2ludFxyXG4gICAgICAgICAgICBjb25zdCBsZWZ0Q2hhbmdlcyA9IHRoaXMuQ29tcHV0ZURpZmZSZWN1cnNpdmUob3JpZ2luYWxTdGFydCwgbWlkT3JpZ2luYWwsIG1vZGlmaWVkU3RhcnQsIG1pZE1vZGlmaWVkLCBxdWl0RWFybHlBcnIpO1xyXG4gICAgICAgICAgICBsZXQgcmlnaHRDaGFuZ2VzID0gW107XHJcbiAgICAgICAgICAgIGlmICghcXVpdEVhcmx5QXJyWzBdKSB7XHJcbiAgICAgICAgICAgICAgICByaWdodENoYW5nZXMgPSB0aGlzLkNvbXB1dGVEaWZmUmVjdXJzaXZlKG1pZE9yaWdpbmFsICsgMSwgb3JpZ2luYWxFbmQsIG1pZE1vZGlmaWVkICsgMSwgbW9kaWZpZWRFbmQsIHF1aXRFYXJseUFycik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBkaWQndCBoYXZlIHRpbWUgdG8gZmluaXNoIHRoZSBmaXJzdCBoYWxmLCBzbyB3ZSBkb24ndCBoYXZlIHRpbWUgdG8gY29tcHV0ZSB0aGlzIGhhbGYuXHJcbiAgICAgICAgICAgICAgICAvLyBDb25zaWRlciB0aGUgZW50aXJlIHJlc3Qgb2YgdGhlIHNlcXVlbmNlIGRpZmZlcmVudC5cclxuICAgICAgICAgICAgICAgIHJpZ2h0Q2hhbmdlcyA9IFtcclxuICAgICAgICAgICAgICAgICAgICBuZXcgRGlmZkNoYW5nZShtaWRPcmlnaW5hbCArIDEsIG9yaWdpbmFsRW5kIC0gKG1pZE9yaWdpbmFsICsgMSkgKyAxLCBtaWRNb2RpZmllZCArIDEsIG1vZGlmaWVkRW5kIC0gKG1pZE1vZGlmaWVkICsgMSkgKyAxKVxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5Db25jYXRlbmF0ZUNoYW5nZXMobGVmdENoYW5nZXMsIHJpZ2h0Q2hhbmdlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIElmIHdlIGhpdCBoZXJlLCB3ZSBxdWl0IGVhcmx5LCBhbmQgc28gY2FuJ3QgcmV0dXJuIGFueXRoaW5nIG1lYW5pbmdmdWxcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBuZXcgRGlmZkNoYW5nZShvcmlnaW5hbFN0YXJ0LCBvcmlnaW5hbEVuZCAtIG9yaWdpbmFsU3RhcnQgKyAxLCBtb2RpZmllZFN0YXJ0LCBtb2RpZmllZEVuZCAtIG1vZGlmaWVkU3RhcnQgKyAxKVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbiAgICBXQUxLVFJBQ0UoZGlhZ29uYWxGb3J3YXJkQmFzZSwgZGlhZ29uYWxGb3J3YXJkU3RhcnQsIGRpYWdvbmFsRm9yd2FyZEVuZCwgZGlhZ29uYWxGb3J3YXJkT2Zmc2V0LCBkaWFnb25hbFJldmVyc2VCYXNlLCBkaWFnb25hbFJldmVyc2VTdGFydCwgZGlhZ29uYWxSZXZlcnNlRW5kLCBkaWFnb25hbFJldmVyc2VPZmZzZXQsIGZvcndhcmRQb2ludHMsIHJldmVyc2VQb2ludHMsIG9yaWdpbmFsSW5kZXgsIG9yaWdpbmFsRW5kLCBtaWRPcmlnaW5hbEFyciwgbW9kaWZpZWRJbmRleCwgbW9kaWZpZWRFbmQsIG1pZE1vZGlmaWVkQXJyLCBkZWx0YUlzRXZlbiwgcXVpdEVhcmx5QXJyKSB7XHJcbiAgICAgICAgbGV0IGZvcndhcmRDaGFuZ2VzID0gbnVsbDtcclxuICAgICAgICBsZXQgcmV2ZXJzZUNoYW5nZXMgPSBudWxsO1xyXG4gICAgICAgIC8vIEZpcnN0LCB3YWxrIGJhY2t3YXJkIHRocm91Z2ggdGhlIGZvcndhcmQgZGlhZ29uYWxzIGhpc3RvcnlcclxuICAgICAgICBsZXQgY2hhbmdlSGVscGVyID0gbmV3IERpZmZDaGFuZ2VIZWxwZXIoKTtcclxuICAgICAgICBsZXQgZGlhZ29uYWxNaW4gPSBkaWFnb25hbEZvcndhcmRTdGFydDtcclxuICAgICAgICBsZXQgZGlhZ29uYWxNYXggPSBkaWFnb25hbEZvcndhcmRFbmQ7XHJcbiAgICAgICAgbGV0IGRpYWdvbmFsUmVsYXRpdmUgPSAobWlkT3JpZ2luYWxBcnJbMF0gLSBtaWRNb2RpZmllZEFyclswXSkgLSBkaWFnb25hbEZvcndhcmRPZmZzZXQ7XHJcbiAgICAgICAgbGV0IGxhc3RPcmlnaW5hbEluZGV4ID0gLTEwNzM3NDE4MjQgLyogTUlOX1NBRkVfU01BTExfSU5URUdFUiAqLztcclxuICAgICAgICBsZXQgaGlzdG9yeUluZGV4ID0gdGhpcy5tX2ZvcndhcmRIaXN0b3J5Lmxlbmd0aCAtIDE7XHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAvLyBHZXQgdGhlIGRpYWdvbmFsIGluZGV4IGZyb20gdGhlIHJlbGF0aXZlIGRpYWdvbmFsIG51bWJlclxyXG4gICAgICAgICAgICBjb25zdCBkaWFnb25hbCA9IGRpYWdvbmFsUmVsYXRpdmUgKyBkaWFnb25hbEZvcndhcmRCYXNlO1xyXG4gICAgICAgICAgICAvLyBGaWd1cmUgb3V0IHdoZXJlIHdlIGNhbWUgZnJvbVxyXG4gICAgICAgICAgICBpZiAoZGlhZ29uYWwgPT09IGRpYWdvbmFsTWluIHx8IChkaWFnb25hbCA8IGRpYWdvbmFsTWF4ICYmIGZvcndhcmRQb2ludHNbZGlhZ29uYWwgLSAxXSA8IGZvcndhcmRQb2ludHNbZGlhZ29uYWwgKyAxXSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIFZlcnRpY2FsIGxpbmUgKHRoZSBlbGVtZW50IGlzIGFuIGluc2VydClcclxuICAgICAgICAgICAgICAgIG9yaWdpbmFsSW5kZXggPSBmb3J3YXJkUG9pbnRzW2RpYWdvbmFsICsgMV07XHJcbiAgICAgICAgICAgICAgICBtb2RpZmllZEluZGV4ID0gb3JpZ2luYWxJbmRleCAtIGRpYWdvbmFsUmVsYXRpdmUgLSBkaWFnb25hbEZvcndhcmRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxJbmRleCA8IGxhc3RPcmlnaW5hbEluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlSGVscGVyLk1hcmtOZXh0Q2hhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsYXN0T3JpZ2luYWxJbmRleCA9IG9yaWdpbmFsSW5kZXg7XHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VIZWxwZXIuQWRkTW9kaWZpZWRFbGVtZW50KG9yaWdpbmFsSW5kZXggKyAxLCBtb2RpZmllZEluZGV4KTtcclxuICAgICAgICAgICAgICAgIGRpYWdvbmFsUmVsYXRpdmUgPSAoZGlhZ29uYWwgKyAxKSAtIGRpYWdvbmFsRm9yd2FyZEJhc2U7IC8vU2V0dXAgZm9yIHRoZSBuZXh0IGl0ZXJhdGlvblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gSG9yaXpvbnRhbCBsaW5lICh0aGUgZWxlbWVudCBpcyBhIGRlbGV0aW9uKVxyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxJbmRleCA9IGZvcndhcmRQb2ludHNbZGlhZ29uYWwgLSAxXSArIDE7XHJcbiAgICAgICAgICAgICAgICBtb2RpZmllZEluZGV4ID0gb3JpZ2luYWxJbmRleCAtIGRpYWdvbmFsUmVsYXRpdmUgLSBkaWFnb25hbEZvcndhcmRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxJbmRleCA8IGxhc3RPcmlnaW5hbEluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlSGVscGVyLk1hcmtOZXh0Q2hhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsYXN0T3JpZ2luYWxJbmRleCA9IG9yaWdpbmFsSW5kZXggLSAxO1xyXG4gICAgICAgICAgICAgICAgY2hhbmdlSGVscGVyLkFkZE9yaWdpbmFsRWxlbWVudChvcmlnaW5hbEluZGV4LCBtb2RpZmllZEluZGV4ICsgMSk7XHJcbiAgICAgICAgICAgICAgICBkaWFnb25hbFJlbGF0aXZlID0gKGRpYWdvbmFsIC0gMSkgLSBkaWFnb25hbEZvcndhcmRCYXNlOyAvL1NldHVwIGZvciB0aGUgbmV4dCBpdGVyYXRpb25cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaGlzdG9yeUluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgICAgIGZvcndhcmRQb2ludHMgPSB0aGlzLm1fZm9yd2FyZEhpc3RvcnlbaGlzdG9yeUluZGV4XTtcclxuICAgICAgICAgICAgICAgIGRpYWdvbmFsRm9yd2FyZEJhc2UgPSBmb3J3YXJkUG9pbnRzWzBdOyAvL1dlIHN0b3JlZCB0aGlzIGluIHRoZSBmaXJzdCBzcG90XHJcbiAgICAgICAgICAgICAgICBkaWFnb25hbE1pbiA9IDE7XHJcbiAgICAgICAgICAgICAgICBkaWFnb25hbE1heCA9IGZvcndhcmRQb2ludHMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gd2hpbGUgKC0taGlzdG9yeUluZGV4ID49IC0xKTtcclxuICAgICAgICAvLyBJcm9uaWNhbGx5LCB3ZSBnZXQgdGhlIGZvcndhcmQgY2hhbmdlcyBhcyB0aGUgcmV2ZXJzZSBvZiB0aGVcclxuICAgICAgICAvLyBvcmRlciB3ZSBhZGRlZCB0aGVtIHNpbmNlIHdlIHRlY2huaWNhbGx5IGFkZGVkIHRoZW0gYmFja3dhcmRzXHJcbiAgICAgICAgZm9yd2FyZENoYW5nZXMgPSBjaGFuZ2VIZWxwZXIuZ2V0UmV2ZXJzZUNoYW5nZXMoKTtcclxuICAgICAgICBpZiAocXVpdEVhcmx5QXJyWzBdKSB7XHJcbiAgICAgICAgICAgIC8vIFRPRE86IENhbGN1bGF0ZSBhIHBhcnRpYWwgZnJvbSB0aGUgcmV2ZXJzZSBkaWFnb25hbHMuXHJcbiAgICAgICAgICAgIC8vICAgICAgIEZvciBub3csIGp1c3QgYXNzdW1lIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIG1pZE9yaWdpbmFsL21pZE1vZGlmaWVkIHBvaW50IGlzIGEgZGlmZlxyXG4gICAgICAgICAgICBsZXQgb3JpZ2luYWxTdGFydFBvaW50ID0gbWlkT3JpZ2luYWxBcnJbMF0gKyAxO1xyXG4gICAgICAgICAgICBsZXQgbW9kaWZpZWRTdGFydFBvaW50ID0gbWlkTW9kaWZpZWRBcnJbMF0gKyAxO1xyXG4gICAgICAgICAgICBpZiAoZm9yd2FyZENoYW5nZXMgIT09IG51bGwgJiYgZm9yd2FyZENoYW5nZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdEZvcndhcmRDaGFuZ2UgPSBmb3J3YXJkQ2hhbmdlc1tmb3J3YXJkQ2hhbmdlcy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgIG9yaWdpbmFsU3RhcnRQb2ludCA9IE1hdGgubWF4KG9yaWdpbmFsU3RhcnRQb2ludCwgbGFzdEZvcndhcmRDaGFuZ2UuZ2V0T3JpZ2luYWxFbmQoKSk7XHJcbiAgICAgICAgICAgICAgICBtb2RpZmllZFN0YXJ0UG9pbnQgPSBNYXRoLm1heChtb2RpZmllZFN0YXJ0UG9pbnQsIGxhc3RGb3J3YXJkQ2hhbmdlLmdldE1vZGlmaWVkRW5kKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldmVyc2VDaGFuZ2VzID0gW1xyXG4gICAgICAgICAgICAgICAgbmV3IERpZmZDaGFuZ2Uob3JpZ2luYWxTdGFydFBvaW50LCBvcmlnaW5hbEVuZCAtIG9yaWdpbmFsU3RhcnRQb2ludCArIDEsIG1vZGlmaWVkU3RhcnRQb2ludCwgbW9kaWZpZWRFbmQgLSBtb2RpZmllZFN0YXJ0UG9pbnQgKyAxKVxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gTm93IHdhbGsgYmFja3dhcmQgdGhyb3VnaCB0aGUgcmV2ZXJzZSBkaWFnb25hbHMgaGlzdG9yeVxyXG4gICAgICAgICAgICBjaGFuZ2VIZWxwZXIgPSBuZXcgRGlmZkNoYW5nZUhlbHBlcigpO1xyXG4gICAgICAgICAgICBkaWFnb25hbE1pbiA9IGRpYWdvbmFsUmV2ZXJzZVN0YXJ0O1xyXG4gICAgICAgICAgICBkaWFnb25hbE1heCA9IGRpYWdvbmFsUmV2ZXJzZUVuZDtcclxuICAgICAgICAgICAgZGlhZ29uYWxSZWxhdGl2ZSA9IChtaWRPcmlnaW5hbEFyclswXSAtIG1pZE1vZGlmaWVkQXJyWzBdKSAtIGRpYWdvbmFsUmV2ZXJzZU9mZnNldDtcclxuICAgICAgICAgICAgbGFzdE9yaWdpbmFsSW5kZXggPSAxMDczNzQxODI0IC8qIE1BWF9TQUZFX1NNQUxMX0lOVEVHRVIgKi87XHJcbiAgICAgICAgICAgIGhpc3RvcnlJbmRleCA9IChkZWx0YUlzRXZlbikgPyB0aGlzLm1fcmV2ZXJzZUhpc3RvcnkubGVuZ3RoIC0gMSA6IHRoaXMubV9yZXZlcnNlSGlzdG9yeS5sZW5ndGggLSAyO1xyXG4gICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGRpYWdvbmFsIGluZGV4IGZyb20gdGhlIHJlbGF0aXZlIGRpYWdvbmFsIG51bWJlclxyXG4gICAgICAgICAgICAgICAgY29uc3QgZGlhZ29uYWwgPSBkaWFnb25hbFJlbGF0aXZlICsgZGlhZ29uYWxSZXZlcnNlQmFzZTtcclxuICAgICAgICAgICAgICAgIC8vIEZpZ3VyZSBvdXQgd2hlcmUgd2UgY2FtZSBmcm9tXHJcbiAgICAgICAgICAgICAgICBpZiAoZGlhZ29uYWwgPT09IGRpYWdvbmFsTWluIHx8IChkaWFnb25hbCA8IGRpYWdvbmFsTWF4ICYmIHJldmVyc2VQb2ludHNbZGlhZ29uYWwgLSAxXSA+PSByZXZlcnNlUG9pbnRzW2RpYWdvbmFsICsgMV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSG9yaXpvbnRhbCBsaW5lICh0aGUgZWxlbWVudCBpcyBhIGRlbGV0aW9uKSlcclxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEluZGV4ID0gcmV2ZXJzZVBvaW50c1tkaWFnb25hbCArIDFdIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RpZmllZEluZGV4ID0gb3JpZ2luYWxJbmRleCAtIGRpYWdvbmFsUmVsYXRpdmUgLSBkaWFnb25hbFJldmVyc2VPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsSW5kZXggPiBsYXN0T3JpZ2luYWxJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VIZWxwZXIuTWFya05leHRDaGFuZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdE9yaWdpbmFsSW5kZXggPSBvcmlnaW5hbEluZGV4ICsgMTtcclxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VIZWxwZXIuQWRkT3JpZ2luYWxFbGVtZW50KG9yaWdpbmFsSW5kZXggKyAxLCBtb2RpZmllZEluZGV4ICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlhZ29uYWxSZWxhdGl2ZSA9IChkaWFnb25hbCArIDEpIC0gZGlhZ29uYWxSZXZlcnNlQmFzZTsgLy9TZXR1cCBmb3IgdGhlIG5leHQgaXRlcmF0aW9uXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBWZXJ0aWNhbCBsaW5lICh0aGUgZWxlbWVudCBpcyBhbiBpbnNlcnRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxJbmRleCA9IHJldmVyc2VQb2ludHNbZGlhZ29uYWwgLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RpZmllZEluZGV4ID0gb3JpZ2luYWxJbmRleCAtIGRpYWdvbmFsUmVsYXRpdmUgLSBkaWFnb25hbFJldmVyc2VPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsSW5kZXggPiBsYXN0T3JpZ2luYWxJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VIZWxwZXIuTWFya05leHRDaGFuZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdE9yaWdpbmFsSW5kZXggPSBvcmlnaW5hbEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZUhlbHBlci5BZGRNb2RpZmllZEVsZW1lbnQob3JpZ2luYWxJbmRleCArIDEsIG1vZGlmaWVkSW5kZXggKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICBkaWFnb25hbFJlbGF0aXZlID0gKGRpYWdvbmFsIC0gMSkgLSBkaWFnb25hbFJldmVyc2VCYXNlOyAvL1NldHVwIGZvciB0aGUgbmV4dCBpdGVyYXRpb25cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChoaXN0b3J5SW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldmVyc2VQb2ludHMgPSB0aGlzLm1fcmV2ZXJzZUhpc3RvcnlbaGlzdG9yeUluZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICBkaWFnb25hbFJldmVyc2VCYXNlID0gcmV2ZXJzZVBvaW50c1swXTsgLy9XZSBzdG9yZWQgdGhpcyBpbiB0aGUgZmlyc3Qgc3BvdFxyXG4gICAgICAgICAgICAgICAgICAgIGRpYWdvbmFsTWluID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBkaWFnb25hbE1heCA9IHJldmVyc2VQb2ludHMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSB3aGlsZSAoLS1oaXN0b3J5SW5kZXggPj0gLTEpO1xyXG4gICAgICAgICAgICAvLyBUaGVyZSBhcmUgY2FzZXMgd2hlcmUgdGhlIHJldmVyc2UgaGlzdG9yeSB3aWxsIGZpbmQgZGlmZnMgdGhhdFxyXG4gICAgICAgICAgICAvLyBhcmUgY29ycmVjdCwgYnV0IG5vdCBpbnR1aXRpdmUsIHNvIHdlIG5lZWQgc2hpZnQgdGhlbS5cclxuICAgICAgICAgICAgcmV2ZXJzZUNoYW5nZXMgPSBjaGFuZ2VIZWxwZXIuZ2V0Q2hhbmdlcygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5Db25jYXRlbmF0ZUNoYW5nZXMoZm9yd2FyZENoYW5nZXMsIHJldmVyc2VDaGFuZ2VzKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2l2ZW4gdGhlIHJhbmdlIHRvIGNvbXB1dGUgdGhlIGRpZmYgb24sIHRoaXMgbWV0aG9kIGZpbmRzIHRoZSBwb2ludDpcclxuICAgICAqIChtaWRPcmlnaW5hbCwgbWlkTW9kaWZpZWQpXHJcbiAgICAgKiB0aGF0IGV4aXN0cyBpbiB0aGUgbWlkZGxlIG9mIHRoZSBMQ1Mgb2YgdGhlIHR3byBzZXF1ZW5jZXMgYW5kXHJcbiAgICAgKiBpcyB0aGUgcG9pbnQgYXQgd2hpY2ggdGhlIExDUyBwcm9ibGVtIG1heSBiZSBicm9rZW4gZG93biByZWN1cnNpdmVseS5cclxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgdHJ5IHRvIGtlZXAgdGhlIExDUyB0cmFjZSBpbiBtZW1vcnkuIElmIHRoZSBMQ1MgcmVjdXJzaW9uXHJcbiAgICAgKiBwb2ludCBpcyBjYWxjdWxhdGVkIGFuZCB0aGUgZnVsbCB0cmFjZSBpcyBhdmFpbGFibGUgaW4gbWVtb3J5LCB0aGVuIHRoaXMgbWV0aG9kXHJcbiAgICAgKiB3aWxsIHJldHVybiB0aGUgY2hhbmdlIGxpc3QuXHJcbiAgICAgKiBAcGFyYW0gb3JpZ2luYWxTdGFydCBUaGUgc3RhcnQgYm91bmQgb2YgdGhlIG9yaWdpbmFsIHNlcXVlbmNlIHJhbmdlXHJcbiAgICAgKiBAcGFyYW0gb3JpZ2luYWxFbmQgVGhlIGVuZCBib3VuZCBvZiB0aGUgb3JpZ2luYWwgc2VxdWVuY2UgcmFuZ2VcclxuICAgICAqIEBwYXJhbSBtb2RpZmllZFN0YXJ0IFRoZSBzdGFydCBib3VuZCBvZiB0aGUgbW9kaWZpZWQgc2VxdWVuY2UgcmFuZ2VcclxuICAgICAqIEBwYXJhbSBtb2RpZmllZEVuZCBUaGUgZW5kIGJvdW5kIG9mIHRoZSBtb2RpZmllZCBzZXF1ZW5jZSByYW5nZVxyXG4gICAgICogQHBhcmFtIG1pZE9yaWdpbmFsIFRoZSBtaWRkbGUgcG9pbnQgb2YgdGhlIG9yaWdpbmFsIHNlcXVlbmNlIHJhbmdlXHJcbiAgICAgKiBAcGFyYW0gbWlkTW9kaWZpZWQgVGhlIG1pZGRsZSBwb2ludCBvZiB0aGUgbW9kaWZpZWQgc2VxdWVuY2UgcmFuZ2VcclxuICAgICAqIEByZXR1cm5zIFRoZSBkaWZmIGNoYW5nZXMsIGlmIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIG51bGxcclxuICAgICAqL1xyXG4gICAgQ29tcHV0ZVJlY3Vyc2lvblBvaW50KG9yaWdpbmFsU3RhcnQsIG9yaWdpbmFsRW5kLCBtb2RpZmllZFN0YXJ0LCBtb2RpZmllZEVuZCwgbWlkT3JpZ2luYWxBcnIsIG1pZE1vZGlmaWVkQXJyLCBxdWl0RWFybHlBcnIpIHtcclxuICAgICAgICBsZXQgb3JpZ2luYWxJbmRleCA9IDAsIG1vZGlmaWVkSW5kZXggPSAwO1xyXG4gICAgICAgIGxldCBkaWFnb25hbEZvcndhcmRTdGFydCA9IDAsIGRpYWdvbmFsRm9yd2FyZEVuZCA9IDA7XHJcbiAgICAgICAgbGV0IGRpYWdvbmFsUmV2ZXJzZVN0YXJ0ID0gMCwgZGlhZ29uYWxSZXZlcnNlRW5kID0gMDtcclxuICAgICAgICAvLyBUbyB0cmF2ZXJzZSB0aGUgZWRpdCBncmFwaCBhbmQgcHJvZHVjZSB0aGUgcHJvcGVyIExDUywgb3VyIGFjdHVhbFxyXG4gICAgICAgIC8vIHN0YXJ0IHBvc2l0aW9uIGlzIGp1c3Qgb3V0c2lkZSB0aGUgZ2l2ZW4gYm91bmRhcnlcclxuICAgICAgICBvcmlnaW5hbFN0YXJ0LS07XHJcbiAgICAgICAgbW9kaWZpZWRTdGFydC0tO1xyXG4gICAgICAgIC8vIFdlIHNldCB0aGVzZSB1cCB0byBtYWtlIHRoZSBjb21waWxlciBoYXBweSwgYnV0IHRoZXkgd2lsbFxyXG4gICAgICAgIC8vIGJlIHJlcGxhY2VkIGJlZm9yZSB3ZSByZXR1cm4gd2l0aCB0aGUgYWN0dWFsIHJlY3Vyc2lvbiBwb2ludFxyXG4gICAgICAgIG1pZE9yaWdpbmFsQXJyWzBdID0gMDtcclxuICAgICAgICBtaWRNb2RpZmllZEFyclswXSA9IDA7XHJcbiAgICAgICAgLy8gQ2xlYXIgb3V0IHRoZSBoaXN0b3J5XHJcbiAgICAgICAgdGhpcy5tX2ZvcndhcmRIaXN0b3J5ID0gW107XHJcbiAgICAgICAgdGhpcy5tX3JldmVyc2VIaXN0b3J5ID0gW107XHJcbiAgICAgICAgLy8gRWFjaCBjZWxsIGluIHRoZSB0d28gYXJyYXlzIGNvcnJlc3BvbmRzIHRvIGEgZGlhZ29uYWwgaW4gdGhlIGVkaXQgZ3JhcGguXHJcbiAgICAgICAgLy8gVGhlIGludGVnZXIgdmFsdWUgaW4gdGhlIGNlbGwgcmVwcmVzZW50cyB0aGUgb3JpZ2luYWxJbmRleCBvZiB0aGUgZnVydGhlc3RcclxuICAgICAgICAvLyByZWFjaGluZyBwb2ludCBmb3VuZCBzbyBmYXIgdGhhdCBlbmRzIGluIHRoYXQgZGlhZ29uYWwuXHJcbiAgICAgICAgLy8gVGhlIG1vZGlmaWVkSW5kZXggY2FuIGJlIGNvbXB1dGVkIG1hdGhlbWF0aWNhbGx5IGZyb20gdGhlIG9yaWdpbmFsSW5kZXggYW5kIHRoZSBkaWFnb25hbCBudW1iZXIuXHJcbiAgICAgICAgY29uc3QgbWF4RGlmZmVyZW5jZXMgPSAob3JpZ2luYWxFbmQgLSBvcmlnaW5hbFN0YXJ0KSArIChtb2RpZmllZEVuZCAtIG1vZGlmaWVkU3RhcnQpO1xyXG4gICAgICAgIGNvbnN0IG51bURpYWdvbmFscyA9IG1heERpZmZlcmVuY2VzICsgMTtcclxuICAgICAgICBjb25zdCBmb3J3YXJkUG9pbnRzID0gbmV3IEludDMyQXJyYXkobnVtRGlhZ29uYWxzKTtcclxuICAgICAgICBjb25zdCByZXZlcnNlUG9pbnRzID0gbmV3IEludDMyQXJyYXkobnVtRGlhZ29uYWxzKTtcclxuICAgICAgICAvLyBkaWFnb25hbEZvcndhcmRCYXNlOiBJbmRleCBpbnRvIGZvcndhcmRQb2ludHMgb2YgdGhlIGRpYWdvbmFsIHdoaWNoIHBhc3NlcyB0aHJvdWdoIChvcmlnaW5hbFN0YXJ0LCBtb2RpZmllZFN0YXJ0KVxyXG4gICAgICAgIC8vIGRpYWdvbmFsUmV2ZXJzZUJhc2U6IEluZGV4IGludG8gcmV2ZXJzZVBvaW50cyBvZiB0aGUgZGlhZ29uYWwgd2hpY2ggcGFzc2VzIHRocm91Z2ggKG9yaWdpbmFsRW5kLCBtb2RpZmllZEVuZClcclxuICAgICAgICBjb25zdCBkaWFnb25hbEZvcndhcmRCYXNlID0gKG1vZGlmaWVkRW5kIC0gbW9kaWZpZWRTdGFydCk7XHJcbiAgICAgICAgY29uc3QgZGlhZ29uYWxSZXZlcnNlQmFzZSA9IChvcmlnaW5hbEVuZCAtIG9yaWdpbmFsU3RhcnQpO1xyXG4gICAgICAgIC8vIGRpYWdvbmFsRm9yd2FyZE9mZnNldDogR2VvbWV0cmljIG9mZnNldCB3aGljaCBhbGxvd3MgbW9kaWZpZWRJbmRleCB0byBiZSBjb21wdXRlZCBmcm9tIG9yaWdpbmFsSW5kZXggYW5kIHRoZVxyXG4gICAgICAgIC8vICAgIGRpYWdvbmFsIG51bWJlciAocmVsYXRpdmUgdG8gZGlhZ29uYWxGb3J3YXJkQmFzZSlcclxuICAgICAgICAvLyBkaWFnb25hbFJldmVyc2VPZmZzZXQ6IEdlb21ldHJpYyBvZmZzZXQgd2hpY2ggYWxsb3dzIG1vZGlmaWVkSW5kZXggdG8gYmUgY29tcHV0ZWQgZnJvbSBvcmlnaW5hbEluZGV4IGFuZCB0aGVcclxuICAgICAgICAvLyAgICBkaWFnb25hbCBudW1iZXIgKHJlbGF0aXZlIHRvIGRpYWdvbmFsUmV2ZXJzZUJhc2UpXHJcbiAgICAgICAgY29uc3QgZGlhZ29uYWxGb3J3YXJkT2Zmc2V0ID0gKG9yaWdpbmFsU3RhcnQgLSBtb2RpZmllZFN0YXJ0KTtcclxuICAgICAgICBjb25zdCBkaWFnb25hbFJldmVyc2VPZmZzZXQgPSAob3JpZ2luYWxFbmQgLSBtb2RpZmllZEVuZCk7XHJcbiAgICAgICAgLy8gZGVsdGE6IFRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIGVuZCBkaWFnb25hbCBhbmQgdGhlIHN0YXJ0IGRpYWdvbmFsLiBUaGlzIGlzIHVzZWQgdG8gcmVsYXRlIGRpYWdvbmFsIG51bWJlcnNcclxuICAgICAgICAvLyAgIHJlbGF0aXZlIHRvIHRoZSBzdGFydCBkaWFnb25hbCB3aXRoIGRpYWdvbmFsIG51bWJlcnMgcmVsYXRpdmUgdG8gdGhlIGVuZCBkaWFnb25hbC5cclxuICAgICAgICAvLyBUaGUgRXZlbi9PZGRuLW5lc3Mgb2YgdGhpcyBkZWx0YSBpcyBpbXBvcnRhbnQgZm9yIGRldGVybWluaW5nIHdoZW4gd2Ugc2hvdWxkIGNoZWNrIGZvciBvdmVybGFwXHJcbiAgICAgICAgY29uc3QgZGVsdGEgPSBkaWFnb25hbFJldmVyc2VCYXNlIC0gZGlhZ29uYWxGb3J3YXJkQmFzZTtcclxuICAgICAgICBjb25zdCBkZWx0YUlzRXZlbiA9IChkZWx0YSAlIDIgPT09IDApO1xyXG4gICAgICAgIC8vIEhlcmUgd2Ugc2V0IHVwIHRoZSBzdGFydCBhbmQgZW5kIHBvaW50cyBhcyB0aGUgZnVydGhlc3QgcG9pbnRzIGZvdW5kIHNvIGZhclxyXG4gICAgICAgIC8vIGluIGJvdGggdGhlIGZvcndhcmQgYW5kIHJldmVyc2UgZGlyZWN0aW9ucywgcmVzcGVjdGl2ZWx5XHJcbiAgICAgICAgZm9yd2FyZFBvaW50c1tkaWFnb25hbEZvcndhcmRCYXNlXSA9IG9yaWdpbmFsU3RhcnQ7XHJcbiAgICAgICAgcmV2ZXJzZVBvaW50c1tkaWFnb25hbFJldmVyc2VCYXNlXSA9IG9yaWdpbmFsRW5kO1xyXG4gICAgICAgIC8vIFJlbWVtYmVyIGlmIHdlIHF1aXQgZWFybHksIGFuZCB0aHVzIG5lZWQgdG8gZG8gYSBiZXN0LWVmZm9ydCByZXN1bHQgaW5zdGVhZCBvZiBhIHJlYWwgcmVzdWx0LlxyXG4gICAgICAgIHF1aXRFYXJseUFyclswXSA9IGZhbHNlO1xyXG4gICAgICAgIC8vIEEgY291cGxlIG9mIHBvaW50czpcclxuICAgICAgICAvLyAtLVdpdGggdGhpcyBtZXRob2QsIHdlIGl0ZXJhdGUgb24gdGhlIG51bWJlciBvZiBkaWZmZXJlbmNlcyBiZXR3ZWVuIHRoZSB0d28gc2VxdWVuY2VzLlxyXG4gICAgICAgIC8vICAgVGhlIG1vcmUgZGlmZmVyZW5jZXMgdGhlcmUgYWN0dWFsbHkgYXJlLCB0aGUgbG9uZ2VyIHRoaXMgd2lsbCB0YWtlLlxyXG4gICAgICAgIC8vIC0tQWxzbywgYXMgdGhlIG51bWJlciBvZiBkaWZmZXJlbmNlcyBpbmNyZWFzZXMsIHdlIGhhdmUgdG8gc2VhcmNoIG9uIGRpYWdvbmFscyBmdXJ0aGVyXHJcbiAgICAgICAgLy8gICBhd2F5IGZyb20gdGhlIHJlZmVyZW5jZSBkaWFnb25hbCAod2hpY2ggaXMgZGlhZ29uYWxGb3J3YXJkQmFzZSBmb3IgZm9yd2FyZCwgZGlhZ29uYWxSZXZlcnNlQmFzZSBmb3IgcmV2ZXJzZSkuXHJcbiAgICAgICAgLy8gLS1XZSBleHRlbmQgb24gZXZlbiBkaWFnb25hbHMgKHJlbGF0aXZlIHRvIHRoZSByZWZlcmVuY2UgZGlhZ29uYWwpIG9ubHkgd2hlbiBudW1EaWZmZXJlbmNlc1xyXG4gICAgICAgIC8vICAgaXMgZXZlbiBhbmQgb2RkIGRpYWdvbmFscyBvbmx5IHdoZW4gbnVtRGlmZmVyZW5jZXMgaXMgb2RkLlxyXG4gICAgICAgIGZvciAobGV0IG51bURpZmZlcmVuY2VzID0gMTsgbnVtRGlmZmVyZW5jZXMgPD0gKG1heERpZmZlcmVuY2VzIC8gMikgKyAxOyBudW1EaWZmZXJlbmNlcysrKSB7XHJcbiAgICAgICAgICAgIGxldCBmdXJ0aGVzdE9yaWdpbmFsSW5kZXggPSAwO1xyXG4gICAgICAgICAgICBsZXQgZnVydGhlc3RNb2RpZmllZEluZGV4ID0gMDtcclxuICAgICAgICAgICAgLy8gUnVuIHRoZSBhbGdvcml0aG0gaW4gdGhlIGZvcndhcmQgZGlyZWN0aW9uXHJcbiAgICAgICAgICAgIGRpYWdvbmFsRm9yd2FyZFN0YXJ0ID0gdGhpcy5DbGlwRGlhZ29uYWxCb3VuZChkaWFnb25hbEZvcndhcmRCYXNlIC0gbnVtRGlmZmVyZW5jZXMsIG51bURpZmZlcmVuY2VzLCBkaWFnb25hbEZvcndhcmRCYXNlLCBudW1EaWFnb25hbHMpO1xyXG4gICAgICAgICAgICBkaWFnb25hbEZvcndhcmRFbmQgPSB0aGlzLkNsaXBEaWFnb25hbEJvdW5kKGRpYWdvbmFsRm9yd2FyZEJhc2UgKyBudW1EaWZmZXJlbmNlcywgbnVtRGlmZmVyZW5jZXMsIGRpYWdvbmFsRm9yd2FyZEJhc2UsIG51bURpYWdvbmFscyk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGRpYWdvbmFsID0gZGlhZ29uYWxGb3J3YXJkU3RhcnQ7IGRpYWdvbmFsIDw9IGRpYWdvbmFsRm9yd2FyZEVuZDsgZGlhZ29uYWwgKz0gMikge1xyXG4gICAgICAgICAgICAgICAgLy8gU1RFUCAxOiBXZSBleHRlbmQgdGhlIGZ1cnRoZXN0IHJlYWNoaW5nIHBvaW50IGluIHRoZSBwcmVzZW50IGRpYWdvbmFsXHJcbiAgICAgICAgICAgICAgICAvLyBieSBsb29raW5nIGF0IHRoZSBkaWFnb25hbHMgYWJvdmUgYW5kIGJlbG93IGFuZCBwaWNraW5nIHRoZSBvbmUgd2hvc2UgcG9pbnRcclxuICAgICAgICAgICAgICAgIC8vIGlzIGZ1cnRoZXIgYXdheSBmcm9tIHRoZSBzdGFydCBwb2ludCAob3JpZ2luYWxTdGFydCwgbW9kaWZpZWRTdGFydClcclxuICAgICAgICAgICAgICAgIGlmIChkaWFnb25hbCA9PT0gZGlhZ29uYWxGb3J3YXJkU3RhcnQgfHwgKGRpYWdvbmFsIDwgZGlhZ29uYWxGb3J3YXJkRW5kICYmIGZvcndhcmRQb2ludHNbZGlhZ29uYWwgLSAxXSA8IGZvcndhcmRQb2ludHNbZGlhZ29uYWwgKyAxXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEluZGV4ID0gZm9yd2FyZFBvaW50c1tkaWFnb25hbCArIDFdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxJbmRleCA9IGZvcndhcmRQb2ludHNbZGlhZ29uYWwgLSAxXSArIDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBtb2RpZmllZEluZGV4ID0gb3JpZ2luYWxJbmRleCAtIChkaWFnb25hbCAtIGRpYWdvbmFsRm9yd2FyZEJhc2UpIC0gZGlhZ29uYWxGb3J3YXJkT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgLy8gU2F2ZSB0aGUgY3VycmVudCBvcmlnaW5hbEluZGV4IHNvIHdlIGNhbiB0ZXN0IGZvciBmYWxzZSBvdmVybGFwIGluIHN0ZXAgM1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcE9yaWdpbmFsSW5kZXggPSBvcmlnaW5hbEluZGV4O1xyXG4gICAgICAgICAgICAgICAgLy8gU1RFUCAyOiBXZSBjYW4gY29udGludWUgdG8gZXh0ZW5kIHRoZSBmdXJ0aGVzdCByZWFjaGluZyBwb2ludCBpbiB0aGUgcHJlc2VudCBkaWFnb25hbFxyXG4gICAgICAgICAgICAgICAgLy8gc28gbG9uZyBhcyB0aGUgZWxlbWVudHMgYXJlIGVxdWFsLlxyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG9yaWdpbmFsSW5kZXggPCBvcmlnaW5hbEVuZCAmJiBtb2RpZmllZEluZGV4IDwgbW9kaWZpZWRFbmQgJiYgdGhpcy5FbGVtZW50c0FyZUVxdWFsKG9yaWdpbmFsSW5kZXggKyAxLCBtb2RpZmllZEluZGV4ICsgMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWRJbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yd2FyZFBvaW50c1tkaWFnb25hbF0gPSBvcmlnaW5hbEluZGV4O1xyXG4gICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsSW5kZXggKyBtb2RpZmllZEluZGV4ID4gZnVydGhlc3RPcmlnaW5hbEluZGV4ICsgZnVydGhlc3RNb2RpZmllZEluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVydGhlc3RPcmlnaW5hbEluZGV4ID0gb3JpZ2luYWxJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICBmdXJ0aGVzdE1vZGlmaWVkSW5kZXggPSBtb2RpZmllZEluZGV4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gU1RFUCAzOiBJZiBkZWx0YSBpcyBvZGQgKG92ZXJsYXAgZmlyc3QgaGFwcGVucyBvbiBmb3J3YXJkIHdoZW4gZGVsdGEgaXMgb2RkKVxyXG4gICAgICAgICAgICAgICAgLy8gYW5kIGRpYWdvbmFsIGlzIGluIHRoZSByYW5nZSBvZiByZXZlcnNlIGRpYWdvbmFscyBjb21wdXRlZCBmb3IgbnVtRGlmZmVyZW5jZXMtMVxyXG4gICAgICAgICAgICAgICAgLy8gKHRoZSBwcmV2aW91cyBpdGVyYXRpb247IHdlIGhhdmVuJ3QgY29tcHV0ZWQgcmV2ZXJzZSBkaWFnb25hbHMgZm9yIG51bURpZmZlcmVuY2VzIHlldClcclxuICAgICAgICAgICAgICAgIC8vIHRoZW4gY2hlY2sgZm9yIG92ZXJsYXAuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWRlbHRhSXNFdmVuICYmIE1hdGguYWJzKGRpYWdvbmFsIC0gZGlhZ29uYWxSZXZlcnNlQmFzZSkgPD0gKG51bURpZmZlcmVuY2VzIC0gMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxJbmRleCA+PSByZXZlcnNlUG9pbnRzW2RpYWdvbmFsXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaWRPcmlnaW5hbEFyclswXSA9IG9yaWdpbmFsSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pZE1vZGlmaWVkQXJyWzBdID0gbW9kaWZpZWRJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBPcmlnaW5hbEluZGV4IDw9IHJldmVyc2VQb2ludHNbZGlhZ29uYWxdICYmIDE0NDcgLyogTWF4RGlmZmVyZW5jZXNIaXN0b3J5ICovID4gMCAmJiBudW1EaWZmZXJlbmNlcyA8PSAoMTQ0NyAvKiBNYXhEaWZmZXJlbmNlc0hpc3RvcnkgKi8gKyAxKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQklOR08hIFdlIG92ZXJsYXBwZWQsIGFuZCB3ZSBoYXZlIHRoZSBmdWxsIHRyYWNlIGluIG1lbW9yeSFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLldBTEtUUkFDRShkaWFnb25hbEZvcndhcmRCYXNlLCBkaWFnb25hbEZvcndhcmRTdGFydCwgZGlhZ29uYWxGb3J3YXJkRW5kLCBkaWFnb25hbEZvcndhcmRPZmZzZXQsIGRpYWdvbmFsUmV2ZXJzZUJhc2UsIGRpYWdvbmFsUmV2ZXJzZVN0YXJ0LCBkaWFnb25hbFJldmVyc2VFbmQsIGRpYWdvbmFsUmV2ZXJzZU9mZnNldCwgZm9yd2FyZFBvaW50cywgcmV2ZXJzZVBvaW50cywgb3JpZ2luYWxJbmRleCwgb3JpZ2luYWxFbmQsIG1pZE9yaWdpbmFsQXJyLCBtb2RpZmllZEluZGV4LCBtb2RpZmllZEVuZCwgbWlkTW9kaWZpZWRBcnIsIGRlbHRhSXNFdmVuLCBxdWl0RWFybHlBcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRWl0aGVyIGZhbHNlIG92ZXJsYXAsIG9yIHdlIGRpZG4ndCBoYXZlIGVub3VnaCBtZW1vcnkgZm9yIHRoZSBmdWxsIHRyYWNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBKdXN0IHJldHVybiB0aGUgcmVjdXJzaW9uIHBvaW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBDaGVjayB0byBzZWUgaWYgd2Ugc2hvdWxkIGJlIHF1aXR0aW5nIGVhcmx5LCBiZWZvcmUgbW92aW5nIG9uIHRvIHRoZSBuZXh0IGl0ZXJhdGlvbi5cclxuICAgICAgICAgICAgY29uc3QgbWF0Y2hMZW5ndGhPZkxvbmdlc3QgPSAoKGZ1cnRoZXN0T3JpZ2luYWxJbmRleCAtIG9yaWdpbmFsU3RhcnQpICsgKGZ1cnRoZXN0TW9kaWZpZWRJbmRleCAtIG1vZGlmaWVkU3RhcnQpIC0gbnVtRGlmZmVyZW5jZXMpIC8gMjtcclxuICAgICAgICAgICAgaWYgKHRoaXMuQ29udGludWVQcm9jZXNzaW5nUHJlZGljYXRlICE9PSBudWxsICYmICF0aGlzLkNvbnRpbnVlUHJvY2Vzc2luZ1ByZWRpY2F0ZShmdXJ0aGVzdE9yaWdpbmFsSW5kZXgsIG1hdGNoTGVuZ3RoT2ZMb25nZXN0KSkge1xyXG4gICAgICAgICAgICAgICAgLy8gV2UgY2FuJ3QgZmluaXNoLCBzbyBza2lwIGFoZWFkIHRvIGdlbmVyYXRpbmcgYSByZXN1bHQgZnJvbSB3aGF0IHdlIGhhdmUuXHJcbiAgICAgICAgICAgICAgICBxdWl0RWFybHlBcnJbMF0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgLy8gVXNlIHRoZSBmdXJ0aGVzdCBkaXN0YW5jZSB3ZSBnb3QgaW4gdGhlIGZvcndhcmQgZGlyZWN0aW9uLlxyXG4gICAgICAgICAgICAgICAgbWlkT3JpZ2luYWxBcnJbMF0gPSBmdXJ0aGVzdE9yaWdpbmFsSW5kZXg7XHJcbiAgICAgICAgICAgICAgICBtaWRNb2RpZmllZEFyclswXSA9IGZ1cnRoZXN0TW9kaWZpZWRJbmRleDtcclxuICAgICAgICAgICAgICAgIGlmIChtYXRjaExlbmd0aE9mTG9uZ2VzdCA+IDAgJiYgMTQ0NyAvKiBNYXhEaWZmZXJlbmNlc0hpc3RvcnkgKi8gPiAwICYmIG51bURpZmZlcmVuY2VzIDw9ICgxNDQ3IC8qIE1heERpZmZlcmVuY2VzSGlzdG9yeSAqLyArIDEpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRW5vdWdoIG9mIHRoZSBoaXN0b3J5IGlzIGluIG1lbW9yeSB0byB3YWxrIGl0IGJhY2t3YXJkc1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLldBTEtUUkFDRShkaWFnb25hbEZvcndhcmRCYXNlLCBkaWFnb25hbEZvcndhcmRTdGFydCwgZGlhZ29uYWxGb3J3YXJkRW5kLCBkaWFnb25hbEZvcndhcmRPZmZzZXQsIGRpYWdvbmFsUmV2ZXJzZUJhc2UsIGRpYWdvbmFsUmV2ZXJzZVN0YXJ0LCBkaWFnb25hbFJldmVyc2VFbmQsIGRpYWdvbmFsUmV2ZXJzZU9mZnNldCwgZm9yd2FyZFBvaW50cywgcmV2ZXJzZVBvaW50cywgb3JpZ2luYWxJbmRleCwgb3JpZ2luYWxFbmQsIG1pZE9yaWdpbmFsQXJyLCBtb2RpZmllZEluZGV4LCBtb2RpZmllZEVuZCwgbWlkTW9kaWZpZWRBcnIsIGRlbHRhSXNFdmVuLCBxdWl0RWFybHlBcnIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZGlkbid0IGFjdHVhbGx5IHJlbWVtYmVyIGVub3VnaCBvZiB0aGUgaGlzdG9yeS5cclxuICAgICAgICAgICAgICAgICAgICAvL1NpbmNlIHdlIGFyZSBxdWl0aW5nIHRoZSBkaWZmIGVhcmx5LCB3ZSBuZWVkIHRvIHNoaWZ0IGJhY2sgdGhlIG9yaWdpbmFsU3RhcnQgYW5kIG1vZGlmaWVkIHN0YXJ0XHJcbiAgICAgICAgICAgICAgICAgICAgLy9iYWNrIGludG8gdGhlIGJvdW5kYXJ5IGxpbWl0cyBzaW5jZSB3ZSBkZWNyZW1lbnRlZCB0aGVpciB2YWx1ZSBhYm92ZSBiZXlvbmQgdGhlIGJvdW5kYXJ5IGxpbWl0LlxyXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsU3RhcnQrKztcclxuICAgICAgICAgICAgICAgICAgICBtb2RpZmllZFN0YXJ0Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERpZmZDaGFuZ2Uob3JpZ2luYWxTdGFydCwgb3JpZ2luYWxFbmQgLSBvcmlnaW5hbFN0YXJ0ICsgMSwgbW9kaWZpZWRTdGFydCwgbW9kaWZpZWRFbmQgLSBtb2RpZmllZFN0YXJ0ICsgMSlcclxuICAgICAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFJ1biB0aGUgYWxnb3JpdGhtIGluIHRoZSByZXZlcnNlIGRpcmVjdGlvblxyXG4gICAgICAgICAgICBkaWFnb25hbFJldmVyc2VTdGFydCA9IHRoaXMuQ2xpcERpYWdvbmFsQm91bmQoZGlhZ29uYWxSZXZlcnNlQmFzZSAtIG51bURpZmZlcmVuY2VzLCBudW1EaWZmZXJlbmNlcywgZGlhZ29uYWxSZXZlcnNlQmFzZSwgbnVtRGlhZ29uYWxzKTtcclxuICAgICAgICAgICAgZGlhZ29uYWxSZXZlcnNlRW5kID0gdGhpcy5DbGlwRGlhZ29uYWxCb3VuZChkaWFnb25hbFJldmVyc2VCYXNlICsgbnVtRGlmZmVyZW5jZXMsIG51bURpZmZlcmVuY2VzLCBkaWFnb25hbFJldmVyc2VCYXNlLCBudW1EaWFnb25hbHMpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBkaWFnb25hbCA9IGRpYWdvbmFsUmV2ZXJzZVN0YXJ0OyBkaWFnb25hbCA8PSBkaWFnb25hbFJldmVyc2VFbmQ7IGRpYWdvbmFsICs9IDIpIHtcclxuICAgICAgICAgICAgICAgIC8vIFNURVAgMTogV2UgZXh0ZW5kIHRoZSBmdXJ0aGVzdCByZWFjaGluZyBwb2ludCBpbiB0aGUgcHJlc2VudCBkaWFnb25hbFxyXG4gICAgICAgICAgICAgICAgLy8gYnkgbG9va2luZyBhdCB0aGUgZGlhZ29uYWxzIGFib3ZlIGFuZCBiZWxvdyBhbmQgcGlja2luZyB0aGUgb25lIHdob3NlIHBvaW50XHJcbiAgICAgICAgICAgICAgICAvLyBpcyBmdXJ0aGVyIGF3YXkgZnJvbSB0aGUgc3RhcnQgcG9pbnQgKG9yaWdpbmFsRW5kLCBtb2RpZmllZEVuZClcclxuICAgICAgICAgICAgICAgIGlmIChkaWFnb25hbCA9PT0gZGlhZ29uYWxSZXZlcnNlU3RhcnQgfHwgKGRpYWdvbmFsIDwgZGlhZ29uYWxSZXZlcnNlRW5kICYmIHJldmVyc2VQb2ludHNbZGlhZ29uYWwgLSAxXSA+PSByZXZlcnNlUG9pbnRzW2RpYWdvbmFsICsgMV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxJbmRleCA9IHJldmVyc2VQb2ludHNbZGlhZ29uYWwgKyAxXSAtIDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEluZGV4ID0gcmV2ZXJzZVBvaW50c1tkaWFnb25hbCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbW9kaWZpZWRJbmRleCA9IG9yaWdpbmFsSW5kZXggLSAoZGlhZ29uYWwgLSBkaWFnb25hbFJldmVyc2VCYXNlKSAtIGRpYWdvbmFsUmV2ZXJzZU9mZnNldDtcclxuICAgICAgICAgICAgICAgIC8vIFNhdmUgdGhlIGN1cnJlbnQgb3JpZ2luYWxJbmRleCBzbyB3ZSBjYW4gdGVzdCBmb3IgZmFsc2Ugb3ZlcmxhcFxyXG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcE9yaWdpbmFsSW5kZXggPSBvcmlnaW5hbEluZGV4O1xyXG4gICAgICAgICAgICAgICAgLy8gU1RFUCAyOiBXZSBjYW4gY29udGludWUgdG8gZXh0ZW5kIHRoZSBmdXJ0aGVzdCByZWFjaGluZyBwb2ludCBpbiB0aGUgcHJlc2VudCBkaWFnb25hbFxyXG4gICAgICAgICAgICAgICAgLy8gYXMgbG9uZyBhcyB0aGUgZWxlbWVudHMgYXJlIGVxdWFsLlxyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG9yaWdpbmFsSW5kZXggPiBvcmlnaW5hbFN0YXJ0ICYmIG1vZGlmaWVkSW5kZXggPiBtb2RpZmllZFN0YXJ0ICYmIHRoaXMuRWxlbWVudHNBcmVFcXVhbChvcmlnaW5hbEluZGV4LCBtb2RpZmllZEluZGV4KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsSW5kZXgtLTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RpZmllZEluZGV4LS07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXZlcnNlUG9pbnRzW2RpYWdvbmFsXSA9IG9yaWdpbmFsSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAvLyBTVEVQIDQ6IElmIGRlbHRhIGlzIGV2ZW4gKG92ZXJsYXAgZmlyc3QgaGFwcGVucyBvbiByZXZlcnNlIHdoZW4gZGVsdGEgaXMgZXZlbilcclxuICAgICAgICAgICAgICAgIC8vIGFuZCBkaWFnb25hbCBpcyBpbiB0aGUgcmFuZ2Ugb2YgZm9yd2FyZCBkaWFnb25hbHMgY29tcHV0ZWQgZm9yIG51bURpZmZlcmVuY2VzXHJcbiAgICAgICAgICAgICAgICAvLyB0aGVuIGNoZWNrIGZvciBvdmVybGFwLlxyXG4gICAgICAgICAgICAgICAgaWYgKGRlbHRhSXNFdmVuICYmIE1hdGguYWJzKGRpYWdvbmFsIC0gZGlhZ29uYWxGb3J3YXJkQmFzZSkgPD0gbnVtRGlmZmVyZW5jZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxJbmRleCA8PSBmb3J3YXJkUG9pbnRzW2RpYWdvbmFsXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaWRPcmlnaW5hbEFyclswXSA9IG9yaWdpbmFsSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pZE1vZGlmaWVkQXJyWzBdID0gbW9kaWZpZWRJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBPcmlnaW5hbEluZGV4ID49IGZvcndhcmRQb2ludHNbZGlhZ29uYWxdICYmIDE0NDcgLyogTWF4RGlmZmVyZW5jZXNIaXN0b3J5ICovID4gMCAmJiBudW1EaWZmZXJlbmNlcyA8PSAoMTQ0NyAvKiBNYXhEaWZmZXJlbmNlc0hpc3RvcnkgKi8gKyAxKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQklOR08hIFdlIG92ZXJsYXBwZWQsIGFuZCB3ZSBoYXZlIHRoZSBmdWxsIHRyYWNlIGluIG1lbW9yeSFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLldBTEtUUkFDRShkaWFnb25hbEZvcndhcmRCYXNlLCBkaWFnb25hbEZvcndhcmRTdGFydCwgZGlhZ29uYWxGb3J3YXJkRW5kLCBkaWFnb25hbEZvcndhcmRPZmZzZXQsIGRpYWdvbmFsUmV2ZXJzZUJhc2UsIGRpYWdvbmFsUmV2ZXJzZVN0YXJ0LCBkaWFnb25hbFJldmVyc2VFbmQsIGRpYWdvbmFsUmV2ZXJzZU9mZnNldCwgZm9yd2FyZFBvaW50cywgcmV2ZXJzZVBvaW50cywgb3JpZ2luYWxJbmRleCwgb3JpZ2luYWxFbmQsIG1pZE9yaWdpbmFsQXJyLCBtb2RpZmllZEluZGV4LCBtb2RpZmllZEVuZCwgbWlkTW9kaWZpZWRBcnIsIGRlbHRhSXNFdmVuLCBxdWl0RWFybHlBcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRWl0aGVyIGZhbHNlIG92ZXJsYXAsIG9yIHdlIGRpZG4ndCBoYXZlIGVub3VnaCBtZW1vcnkgZm9yIHRoZSBmdWxsIHRyYWNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBKdXN0IHJldHVybiB0aGUgcmVjdXJzaW9uIHBvaW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBTYXZlIGN1cnJlbnQgdmVjdG9ycyB0byBoaXN0b3J5IGJlZm9yZSB0aGUgbmV4dCBpdGVyYXRpb25cclxuICAgICAgICAgICAgaWYgKG51bURpZmZlcmVuY2VzIDw9IDE0NDcgLyogTWF4RGlmZmVyZW5jZXNIaXN0b3J5ICovKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBhcmUgYWxsb2NhdGluZyBzcGFjZSBmb3Igb25lIGV4dHJhIGludCwgd2hpY2ggd2UgZmlsbCB3aXRoXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgaW5kZXggb2YgdGhlIGRpYWdvbmFsIGJhc2UgaW5kZXhcclxuICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gbmV3IEludDMyQXJyYXkoZGlhZ29uYWxGb3J3YXJkRW5kIC0gZGlhZ29uYWxGb3J3YXJkU3RhcnQgKyAyKTtcclxuICAgICAgICAgICAgICAgIHRlbXBbMF0gPSBkaWFnb25hbEZvcndhcmRCYXNlIC0gZGlhZ29uYWxGb3J3YXJkU3RhcnQgKyAxO1xyXG4gICAgICAgICAgICAgICAgTXlBcnJheS5Db3B5Mihmb3J3YXJkUG9pbnRzLCBkaWFnb25hbEZvcndhcmRTdGFydCwgdGVtcCwgMSwgZGlhZ29uYWxGb3J3YXJkRW5kIC0gZGlhZ29uYWxGb3J3YXJkU3RhcnQgKyAxKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9mb3J3YXJkSGlzdG9yeS5wdXNoKHRlbXApO1xyXG4gICAgICAgICAgICAgICAgdGVtcCA9IG5ldyBJbnQzMkFycmF5KGRpYWdvbmFsUmV2ZXJzZUVuZCAtIGRpYWdvbmFsUmV2ZXJzZVN0YXJ0ICsgMik7XHJcbiAgICAgICAgICAgICAgICB0ZW1wWzBdID0gZGlhZ29uYWxSZXZlcnNlQmFzZSAtIGRpYWdvbmFsUmV2ZXJzZVN0YXJ0ICsgMTtcclxuICAgICAgICAgICAgICAgIE15QXJyYXkuQ29weTIocmV2ZXJzZVBvaW50cywgZGlhZ29uYWxSZXZlcnNlU3RhcnQsIHRlbXAsIDEsIGRpYWdvbmFsUmV2ZXJzZUVuZCAtIGRpYWdvbmFsUmV2ZXJzZVN0YXJ0ICsgMSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fcmV2ZXJzZUhpc3RvcnkucHVzaCh0ZW1wKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBJZiB3ZSBnb3QgaGVyZSwgdGhlbiB3ZSBoYXZlIHRoZSBmdWxsIHRyYWNlIGluIGhpc3RvcnkuIFdlIGp1c3QgaGF2ZSB0byBjb252ZXJ0IGl0IHRvIGEgY2hhbmdlIGxpc3RcclxuICAgICAgICAvLyBOT1RFOiBUaGlzIHBhcnQgaXMgYSBiaXQgbWVzc3lcclxuICAgICAgICByZXR1cm4gdGhpcy5XQUxLVFJBQ0UoZGlhZ29uYWxGb3J3YXJkQmFzZSwgZGlhZ29uYWxGb3J3YXJkU3RhcnQsIGRpYWdvbmFsRm9yd2FyZEVuZCwgZGlhZ29uYWxGb3J3YXJkT2Zmc2V0LCBkaWFnb25hbFJldmVyc2VCYXNlLCBkaWFnb25hbFJldmVyc2VTdGFydCwgZGlhZ29uYWxSZXZlcnNlRW5kLCBkaWFnb25hbFJldmVyc2VPZmZzZXQsIGZvcndhcmRQb2ludHMsIHJldmVyc2VQb2ludHMsIG9yaWdpbmFsSW5kZXgsIG9yaWdpbmFsRW5kLCBtaWRPcmlnaW5hbEFyciwgbW9kaWZpZWRJbmRleCwgbW9kaWZpZWRFbmQsIG1pZE1vZGlmaWVkQXJyLCBkZWx0YUlzRXZlbiwgcXVpdEVhcmx5QXJyKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2hpZnRzIHRoZSBnaXZlbiBjaGFuZ2VzIHRvIHByb3ZpZGUgYSBtb3JlIGludHVpdGl2ZSBkaWZmLlxyXG4gICAgICogV2hpbGUgdGhlIGZpcnN0IGVsZW1lbnQgaW4gYSBkaWZmIG1hdGNoZXMgdGhlIGZpcnN0IGVsZW1lbnQgYWZ0ZXIgdGhlIGRpZmYsXHJcbiAgICAgKiB3ZSBzaGlmdCB0aGUgZGlmZiBkb3duLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBjaGFuZ2VzIFRoZSBsaXN0IG9mIGNoYW5nZXMgdG8gc2hpZnRcclxuICAgICAqIEByZXR1cm5zIFRoZSBzaGlmdGVkIGNoYW5nZXNcclxuICAgICAqL1xyXG4gICAgUHJldHRpZnlDaGFuZ2VzKGNoYW5nZXMpIHtcclxuICAgICAgICAvLyBTaGlmdCBhbGwgdGhlIGNoYW5nZXMgZG93biBmaXJzdFxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhbmdlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSBjaGFuZ2VzW2ldO1xyXG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbFN0b3AgPSAoaSA8IGNoYW5nZXMubGVuZ3RoIC0gMSkgPyBjaGFuZ2VzW2kgKyAxXS5vcmlnaW5hbFN0YXJ0IDogdGhpcy5fb3JpZ2luYWxFbGVtZW50c09ySGFzaC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vZGlmaWVkU3RvcCA9IChpIDwgY2hhbmdlcy5sZW5ndGggLSAxKSA/IGNoYW5nZXNbaSArIDFdLm1vZGlmaWVkU3RhcnQgOiB0aGlzLl9tb2RpZmllZEVsZW1lbnRzT3JIYXNoLmxlbmd0aDtcclxuICAgICAgICAgICAgY29uc3QgY2hlY2tPcmlnaW5hbCA9IGNoYW5nZS5vcmlnaW5hbExlbmd0aCA+IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrTW9kaWZpZWQgPSBjaGFuZ2UubW9kaWZpZWRMZW5ndGggPiAwO1xyXG4gICAgICAgICAgICB3aGlsZSAoY2hhbmdlLm9yaWdpbmFsU3RhcnQgKyBjaGFuZ2Uub3JpZ2luYWxMZW5ndGggPCBvcmlnaW5hbFN0b3AgJiZcclxuICAgICAgICAgICAgICAgIGNoYW5nZS5tb2RpZmllZFN0YXJ0ICsgY2hhbmdlLm1vZGlmaWVkTGVuZ3RoIDwgbW9kaWZpZWRTdG9wICYmXHJcbiAgICAgICAgICAgICAgICAoIWNoZWNrT3JpZ2luYWwgfHwgdGhpcy5PcmlnaW5hbEVsZW1lbnRzQXJlRXF1YWwoY2hhbmdlLm9yaWdpbmFsU3RhcnQsIGNoYW5nZS5vcmlnaW5hbFN0YXJ0ICsgY2hhbmdlLm9yaWdpbmFsTGVuZ3RoKSkgJiZcclxuICAgICAgICAgICAgICAgICghY2hlY2tNb2RpZmllZCB8fCB0aGlzLk1vZGlmaWVkRWxlbWVudHNBcmVFcXVhbChjaGFuZ2UubW9kaWZpZWRTdGFydCwgY2hhbmdlLm1vZGlmaWVkU3RhcnQgKyBjaGFuZ2UubW9kaWZpZWRMZW5ndGgpKSkge1xyXG4gICAgICAgICAgICAgICAgY2hhbmdlLm9yaWdpbmFsU3RhcnQrKztcclxuICAgICAgICAgICAgICAgIGNoYW5nZS5tb2RpZmllZFN0YXJ0Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IG1lcmdlZENoYW5nZUFyciA9IFtudWxsXTtcclxuICAgICAgICAgICAgaWYgKGkgPCBjaGFuZ2VzLmxlbmd0aCAtIDEgJiYgdGhpcy5DaGFuZ2VzT3ZlcmxhcChjaGFuZ2VzW2ldLCBjaGFuZ2VzW2kgKyAxXSwgbWVyZ2VkQ2hhbmdlQXJyKSkge1xyXG4gICAgICAgICAgICAgICAgY2hhbmdlc1tpXSA9IG1lcmdlZENoYW5nZUFyclswXTtcclxuICAgICAgICAgICAgICAgIGNoYW5nZXMuc3BsaWNlKGkgKyAxLCAxKTtcclxuICAgICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFNoaWZ0IGNoYW5nZXMgYmFjayB1cCB1bnRpbCB3ZSBoaXQgZW1wdHkgb3Igd2hpdGVzcGFjZS1vbmx5IGxpbmVzXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IGNoYW5nZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gY2hhbmdlc1tpXTtcclxuICAgICAgICAgICAgbGV0IG9yaWdpbmFsU3RvcCA9IDA7XHJcbiAgICAgICAgICAgIGxldCBtb2RpZmllZFN0b3AgPSAwO1xyXG4gICAgICAgICAgICBpZiAoaSA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHByZXZDaGFuZ2UgPSBjaGFuZ2VzW2kgLSAxXTtcclxuICAgICAgICAgICAgICAgIG9yaWdpbmFsU3RvcCA9IHByZXZDaGFuZ2Uub3JpZ2luYWxTdGFydCArIHByZXZDaGFuZ2Uub3JpZ2luYWxMZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBtb2RpZmllZFN0b3AgPSBwcmV2Q2hhbmdlLm1vZGlmaWVkU3RhcnQgKyBwcmV2Q2hhbmdlLm1vZGlmaWVkTGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrT3JpZ2luYWwgPSBjaGFuZ2Uub3JpZ2luYWxMZW5ndGggPiAwO1xyXG4gICAgICAgICAgICBjb25zdCBjaGVja01vZGlmaWVkID0gY2hhbmdlLm1vZGlmaWVkTGVuZ3RoID4gMDtcclxuICAgICAgICAgICAgbGV0IGJlc3REZWx0YSA9IDA7XHJcbiAgICAgICAgICAgIGxldCBiZXN0U2NvcmUgPSB0aGlzLl9ib3VuZGFyeVNjb3JlKGNoYW5nZS5vcmlnaW5hbFN0YXJ0LCBjaGFuZ2Uub3JpZ2luYWxMZW5ndGgsIGNoYW5nZS5tb2RpZmllZFN0YXJ0LCBjaGFuZ2UubW9kaWZpZWRMZW5ndGgpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBkZWx0YSA9IDE7OyBkZWx0YSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvcmlnaW5hbFN0YXJ0ID0gY2hhbmdlLm9yaWdpbmFsU3RhcnQgLSBkZWx0YTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vZGlmaWVkU3RhcnQgPSBjaGFuZ2UubW9kaWZpZWRTdGFydCAtIGRlbHRhO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsU3RhcnQgPCBvcmlnaW5hbFN0b3AgfHwgbW9kaWZpZWRTdGFydCA8IG1vZGlmaWVkU3RvcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrT3JpZ2luYWwgJiYgIXRoaXMuT3JpZ2luYWxFbGVtZW50c0FyZUVxdWFsKG9yaWdpbmFsU3RhcnQsIG9yaWdpbmFsU3RhcnQgKyBjaGFuZ2Uub3JpZ2luYWxMZW5ndGgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tNb2RpZmllZCAmJiAhdGhpcy5Nb2RpZmllZEVsZW1lbnRzQXJlRXF1YWwobW9kaWZpZWRTdGFydCwgbW9kaWZpZWRTdGFydCArIGNoYW5nZS5tb2RpZmllZExlbmd0aCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHRvdWNoaW5nUHJldmlvdXNDaGFuZ2UgPSAob3JpZ2luYWxTdGFydCA9PT0gb3JpZ2luYWxTdG9wICYmIG1vZGlmaWVkU3RhcnQgPT09IG1vZGlmaWVkU3RvcCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzY29yZSA9ICgodG91Y2hpbmdQcmV2aW91c0NoYW5nZSA/IDUgOiAwKVxyXG4gICAgICAgICAgICAgICAgICAgICsgdGhpcy5fYm91bmRhcnlTY29yZShvcmlnaW5hbFN0YXJ0LCBjaGFuZ2Uub3JpZ2luYWxMZW5ndGgsIG1vZGlmaWVkU3RhcnQsIGNoYW5nZS5tb2RpZmllZExlbmd0aCkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNjb3JlID4gYmVzdFNjb3JlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmVzdFNjb3JlID0gc2NvcmU7XHJcbiAgICAgICAgICAgICAgICAgICAgYmVzdERlbHRhID0gZGVsdGE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2hhbmdlLm9yaWdpbmFsU3RhcnQgLT0gYmVzdERlbHRhO1xyXG4gICAgICAgICAgICBjaGFuZ2UubW9kaWZpZWRTdGFydCAtPSBiZXN0RGVsdGE7XHJcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlZENoYW5nZUFyciA9IFtudWxsXTtcclxuICAgICAgICAgICAgaWYgKGkgPiAwICYmIHRoaXMuQ2hhbmdlc092ZXJsYXAoY2hhbmdlc1tpIC0gMV0sIGNoYW5nZXNbaV0sIG1lcmdlZENoYW5nZUFycikpIHtcclxuICAgICAgICAgICAgICAgIGNoYW5nZXNbaSAtIDFdID0gbWVyZ2VkQ2hhbmdlQXJyWzBdO1xyXG4gICAgICAgICAgICAgICAgY2hhbmdlcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUaGVyZSBjb3VsZCBiZSBtdWx0aXBsZSBsb25nZXN0IGNvbW1vbiBzdWJzdHJpbmdzLlxyXG4gICAgICAgIC8vIEdpdmUgcHJlZmVyZW5jZSB0byB0aGUgb25lcyBjb250YWluaW5nIGxvbmdlciBsaW5lc1xyXG4gICAgICAgIGlmICh0aGlzLl9oYXNTdHJpbmdzKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAxLCBsZW4gPSBjaGFuZ2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhQ2hhbmdlID0gY2hhbmdlc1tpIC0gMV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBiQ2hhbmdlID0gY2hhbmdlc1tpXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoZWRMZW5ndGggPSBiQ2hhbmdlLm9yaWdpbmFsU3RhcnQgLSBhQ2hhbmdlLm9yaWdpbmFsU3RhcnQgLSBhQ2hhbmdlLm9yaWdpbmFsTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYU9yaWdpbmFsU3RhcnQgPSBhQ2hhbmdlLm9yaWdpbmFsU3RhcnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBiT3JpZ2luYWxFbmQgPSBiQ2hhbmdlLm9yaWdpbmFsU3RhcnQgKyBiQ2hhbmdlLm9yaWdpbmFsTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWJPcmlnaW5hbExlbmd0aCA9IGJPcmlnaW5hbEVuZCAtIGFPcmlnaW5hbFN0YXJ0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYU1vZGlmaWVkU3RhcnQgPSBhQ2hhbmdlLm1vZGlmaWVkU3RhcnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBiTW9kaWZpZWRFbmQgPSBiQ2hhbmdlLm1vZGlmaWVkU3RhcnQgKyBiQ2hhbmdlLm1vZGlmaWVkTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWJNb2RpZmllZExlbmd0aCA9IGJNb2RpZmllZEVuZCAtIGFNb2RpZmllZFN0YXJ0O1xyXG4gICAgICAgICAgICAgICAgLy8gQXZvaWQgd2FzdGluZyBhIGxvdCBvZiB0aW1lIHdpdGggdGhlc2Ugc2VhcmNoZXNcclxuICAgICAgICAgICAgICAgIGlmIChtYXRjaGVkTGVuZ3RoIDwgNSAmJiBhYk9yaWdpbmFsTGVuZ3RoIDwgMjAgJiYgYWJNb2RpZmllZExlbmd0aCA8IDIwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuX2ZpbmRCZXR0ZXJDb250aWd1b3VzU2VxdWVuY2UoYU9yaWdpbmFsU3RhcnQsIGFiT3JpZ2luYWxMZW5ndGgsIGFNb2RpZmllZFN0YXJ0LCBhYk1vZGlmaWVkTGVuZ3RoLCBtYXRjaGVkTGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBbb3JpZ2luYWxNYXRjaFN0YXJ0LCBtb2RpZmllZE1hdGNoU3RhcnRdID0gdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsTWF0Y2hTdGFydCAhPT0gYUNoYW5nZS5vcmlnaW5hbFN0YXJ0ICsgYUNoYW5nZS5vcmlnaW5hbExlbmd0aCB8fCBtb2RpZmllZE1hdGNoU3RhcnQgIT09IGFDaGFuZ2UubW9kaWZpZWRTdGFydCArIGFDaGFuZ2UubW9kaWZpZWRMZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN3aXRjaCB0byBhbm90aGVyIHNlcXVlbmNlIHRoYXQgaGFzIGEgYmV0dGVyIHNjb3JlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhQ2hhbmdlLm9yaWdpbmFsTGVuZ3RoID0gb3JpZ2luYWxNYXRjaFN0YXJ0IC0gYUNoYW5nZS5vcmlnaW5hbFN0YXJ0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYUNoYW5nZS5tb2RpZmllZExlbmd0aCA9IG1vZGlmaWVkTWF0Y2hTdGFydCAtIGFDaGFuZ2UubW9kaWZpZWRTdGFydDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJDaGFuZ2Uub3JpZ2luYWxTdGFydCA9IG9yaWdpbmFsTWF0Y2hTdGFydCArIG1hdGNoZWRMZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiQ2hhbmdlLm1vZGlmaWVkU3RhcnQgPSBtb2RpZmllZE1hdGNoU3RhcnQgKyBtYXRjaGVkTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYkNoYW5nZS5vcmlnaW5hbExlbmd0aCA9IGJPcmlnaW5hbEVuZCAtIGJDaGFuZ2Uub3JpZ2luYWxTdGFydDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJDaGFuZ2UubW9kaWZpZWRMZW5ndGggPSBiTW9kaWZpZWRFbmQgLSBiQ2hhbmdlLm1vZGlmaWVkU3RhcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNoYW5nZXM7XHJcbiAgICB9XHJcbiAgICBfZmluZEJldHRlckNvbnRpZ3VvdXNTZXF1ZW5jZShvcmlnaW5hbFN0YXJ0LCBvcmlnaW5hbExlbmd0aCwgbW9kaWZpZWRTdGFydCwgbW9kaWZpZWRMZW5ndGgsIGRlc2lyZWRMZW5ndGgpIHtcclxuICAgICAgICBpZiAob3JpZ2luYWxMZW5ndGggPCBkZXNpcmVkTGVuZ3RoIHx8IG1vZGlmaWVkTGVuZ3RoIDwgZGVzaXJlZExlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxNYXggPSBvcmlnaW5hbFN0YXJ0ICsgb3JpZ2luYWxMZW5ndGggLSBkZXNpcmVkTGVuZ3RoICsgMTtcclxuICAgICAgICBjb25zdCBtb2RpZmllZE1heCA9IG1vZGlmaWVkU3RhcnQgKyBtb2RpZmllZExlbmd0aCAtIGRlc2lyZWRMZW5ndGggKyAxO1xyXG4gICAgICAgIGxldCBiZXN0U2NvcmUgPSAwO1xyXG4gICAgICAgIGxldCBiZXN0T3JpZ2luYWxTdGFydCA9IDA7XHJcbiAgICAgICAgbGV0IGJlc3RNb2RpZmllZFN0YXJ0ID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpID0gb3JpZ2luYWxTdGFydDsgaSA8IG9yaWdpbmFsTWF4OyBpKyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IG1vZGlmaWVkU3RhcnQ7IGogPCBtb2RpZmllZE1heDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzY29yZSA9IHRoaXMuX2NvbnRpZ3VvdXNTZXF1ZW5jZVNjb3JlKGksIGosIGRlc2lyZWRMZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNjb3JlID4gMCAmJiBzY29yZSA+IGJlc3RTY29yZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJlc3RTY29yZSA9IHNjb3JlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJlc3RPcmlnaW5hbFN0YXJ0ID0gaTtcclxuICAgICAgICAgICAgICAgICAgICBiZXN0TW9kaWZpZWRTdGFydCA9IGo7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJlc3RTY29yZSA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtiZXN0T3JpZ2luYWxTdGFydCwgYmVzdE1vZGlmaWVkU3RhcnRdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIF9jb250aWd1b3VzU2VxdWVuY2VTY29yZShvcmlnaW5hbFN0YXJ0LCBtb2RpZmllZFN0YXJ0LCBsZW5ndGgpIHtcclxuICAgICAgICBsZXQgc2NvcmUgPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGwgPSAwOyBsIDwgbGVuZ3RoOyBsKyspIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLkVsZW1lbnRzQXJlRXF1YWwob3JpZ2luYWxTdGFydCArIGwsIG1vZGlmaWVkU3RhcnQgKyBsKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2NvcmUgKz0gdGhpcy5fb3JpZ2luYWxTdHJpbmdFbGVtZW50c1tvcmlnaW5hbFN0YXJ0ICsgbF0ubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2NvcmU7XHJcbiAgICB9XHJcbiAgICBfT3JpZ2luYWxJc0JvdW5kYXJ5KGluZGV4KSB7XHJcbiAgICAgICAgaWYgKGluZGV4IDw9IDAgfHwgaW5kZXggPj0gdGhpcy5fb3JpZ2luYWxFbGVtZW50c09ySGFzaC5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKHRoaXMuX2hhc1N0cmluZ3MgJiYgL15cXHMqJC8udGVzdCh0aGlzLl9vcmlnaW5hbFN0cmluZ0VsZW1lbnRzW2luZGV4XSkpO1xyXG4gICAgfVxyXG4gICAgX09yaWdpbmFsUmVnaW9uSXNCb3VuZGFyeShvcmlnaW5hbFN0YXJ0LCBvcmlnaW5hbExlbmd0aCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9PcmlnaW5hbElzQm91bmRhcnkob3JpZ2luYWxTdGFydCkgfHwgdGhpcy5fT3JpZ2luYWxJc0JvdW5kYXJ5KG9yaWdpbmFsU3RhcnQgLSAxKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9yaWdpbmFsTGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbEVuZCA9IG9yaWdpbmFsU3RhcnQgKyBvcmlnaW5hbExlbmd0aDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX09yaWdpbmFsSXNCb3VuZGFyeShvcmlnaW5hbEVuZCAtIDEpIHx8IHRoaXMuX09yaWdpbmFsSXNCb3VuZGFyeShvcmlnaW5hbEVuZCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIF9Nb2RpZmllZElzQm91bmRhcnkoaW5kZXgpIHtcclxuICAgICAgICBpZiAoaW5kZXggPD0gMCB8fCBpbmRleCA+PSB0aGlzLl9tb2RpZmllZEVsZW1lbnRzT3JIYXNoLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAodGhpcy5faGFzU3RyaW5ncyAmJiAvXlxccyokLy50ZXN0KHRoaXMuX21vZGlmaWVkU3RyaW5nRWxlbWVudHNbaW5kZXhdKSk7XHJcbiAgICB9XHJcbiAgICBfTW9kaWZpZWRSZWdpb25Jc0JvdW5kYXJ5KG1vZGlmaWVkU3RhcnQsIG1vZGlmaWVkTGVuZ3RoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX01vZGlmaWVkSXNCb3VuZGFyeShtb2RpZmllZFN0YXJ0KSB8fCB0aGlzLl9Nb2RpZmllZElzQm91bmRhcnkobW9kaWZpZWRTdGFydCAtIDEpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobW9kaWZpZWRMZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vZGlmaWVkRW5kID0gbW9kaWZpZWRTdGFydCArIG1vZGlmaWVkTGVuZ3RoO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fTW9kaWZpZWRJc0JvdW5kYXJ5KG1vZGlmaWVkRW5kIC0gMSkgfHwgdGhpcy5fTW9kaWZpZWRJc0JvdW5kYXJ5KG1vZGlmaWVkRW5kKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgX2JvdW5kYXJ5U2NvcmUob3JpZ2luYWxTdGFydCwgb3JpZ2luYWxMZW5ndGgsIG1vZGlmaWVkU3RhcnQsIG1vZGlmaWVkTGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxTY29yZSA9ICh0aGlzLl9PcmlnaW5hbFJlZ2lvbklzQm91bmRhcnkob3JpZ2luYWxTdGFydCwgb3JpZ2luYWxMZW5ndGgpID8gMSA6IDApO1xyXG4gICAgICAgIGNvbnN0IG1vZGlmaWVkU2NvcmUgPSAodGhpcy5fTW9kaWZpZWRSZWdpb25Jc0JvdW5kYXJ5KG1vZGlmaWVkU3RhcnQsIG1vZGlmaWVkTGVuZ3RoKSA/IDEgOiAwKTtcclxuICAgICAgICByZXR1cm4gKG9yaWdpbmFsU2NvcmUgKyBtb2RpZmllZFNjb3JlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ29uY2F0ZW5hdGVzIHRoZSB0d28gaW5wdXQgRGlmZkNoYW5nZSBsaXN0cyBhbmQgcmV0dXJucyB0aGUgcmVzdWx0aW5nXHJcbiAgICAgKiBsaXN0LlxyXG4gICAgICogQHBhcmFtIFRoZSBsZWZ0IGNoYW5nZXNcclxuICAgICAqIEBwYXJhbSBUaGUgcmlnaHQgY2hhbmdlc1xyXG4gICAgICogQHJldHVybnMgVGhlIGNvbmNhdGVuYXRlZCBsaXN0XHJcbiAgICAgKi9cclxuICAgIENvbmNhdGVuYXRlQ2hhbmdlcyhsZWZ0LCByaWdodCkge1xyXG4gICAgICAgIGxldCBtZXJnZWRDaGFuZ2VBcnIgPSBbXTtcclxuICAgICAgICBpZiAobGVmdC5sZW5ndGggPT09IDAgfHwgcmlnaHQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAocmlnaHQubGVuZ3RoID4gMCkgPyByaWdodCA6IGxlZnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuQ2hhbmdlc092ZXJsYXAobGVmdFtsZWZ0Lmxlbmd0aCAtIDFdLCByaWdodFswXSwgbWVyZ2VkQ2hhbmdlQXJyKSkge1xyXG4gICAgICAgICAgICAvLyBTaW5jZSB3ZSBicmVhayB0aGUgcHJvYmxlbSBkb3duIHJlY3Vyc2l2ZWx5LCBpdCBpcyBwb3NzaWJsZSB0aGF0IHdlXHJcbiAgICAgICAgICAgIC8vIG1pZ2h0IHJlY3Vyc2UgaW4gdGhlIG1pZGRsZSBvZiBhIGNoYW5nZSB0aGVyZWJ5IHNwbGl0dGluZyBpdCBpbnRvXHJcbiAgICAgICAgICAgIC8vIHR3byBjaGFuZ2VzLiBIZXJlIGluIHRoZSBjb21iaW5pbmcgc3RhZ2UsIHdlIGRldGVjdCBhbmQgZnVzZSB0aG9zZVxyXG4gICAgICAgICAgICAvLyBjaGFuZ2VzIGJhY2sgdG9nZXRoZXJcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5KGxlZnQubGVuZ3RoICsgcmlnaHQubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgIE15QXJyYXkuQ29weShsZWZ0LCAwLCByZXN1bHQsIDAsIGxlZnQubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgIHJlc3VsdFtsZWZ0Lmxlbmd0aCAtIDFdID0gbWVyZ2VkQ2hhbmdlQXJyWzBdO1xyXG4gICAgICAgICAgICBNeUFycmF5LkNvcHkocmlnaHQsIDEsIHJlc3VsdCwgbGVmdC5sZW5ndGgsIHJpZ2h0Lmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5KGxlZnQubGVuZ3RoICsgcmlnaHQubGVuZ3RoKTtcclxuICAgICAgICAgICAgTXlBcnJheS5Db3B5KGxlZnQsIDAsIHJlc3VsdCwgMCwgbGVmdC5sZW5ndGgpO1xyXG4gICAgICAgICAgICBNeUFycmF5LkNvcHkocmlnaHQsIDAsIHJlc3VsdCwgbGVmdC5sZW5ndGgsIHJpZ2h0Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHR3byBjaGFuZ2VzIG92ZXJsYXAgYW5kIGNhbiBiZSBtZXJnZWQgaW50byBhIHNpbmdsZVxyXG4gICAgICogY2hhbmdlXHJcbiAgICAgKiBAcGFyYW0gbGVmdCBUaGUgbGVmdCBjaGFuZ2VcclxuICAgICAqIEBwYXJhbSByaWdodCBUaGUgcmlnaHQgY2hhbmdlXHJcbiAgICAgKiBAcGFyYW0gbWVyZ2VkQ2hhbmdlIFRoZSBtZXJnZWQgY2hhbmdlIGlmIHRoZSB0d28gb3ZlcmxhcCwgbnVsbCBvdGhlcndpc2VcclxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHR3byBjaGFuZ2VzIG92ZXJsYXBcclxuICAgICAqL1xyXG4gICAgQ2hhbmdlc092ZXJsYXAobGVmdCwgcmlnaHQsIG1lcmdlZENoYW5nZUFycikge1xyXG4gICAgICAgIERlYnVnLkFzc2VydChsZWZ0Lm9yaWdpbmFsU3RhcnQgPD0gcmlnaHQub3JpZ2luYWxTdGFydCwgJ0xlZnQgY2hhbmdlIGlzIG5vdCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gcmlnaHQgY2hhbmdlJyk7XHJcbiAgICAgICAgRGVidWcuQXNzZXJ0KGxlZnQubW9kaWZpZWRTdGFydCA8PSByaWdodC5tb2RpZmllZFN0YXJ0LCAnTGVmdCBjaGFuZ2UgaXMgbm90IGxlc3MgdGhhbiBvciBlcXVhbCB0byByaWdodCBjaGFuZ2UnKTtcclxuICAgICAgICBpZiAobGVmdC5vcmlnaW5hbFN0YXJ0ICsgbGVmdC5vcmlnaW5hbExlbmd0aCA+PSByaWdodC5vcmlnaW5hbFN0YXJ0IHx8IGxlZnQubW9kaWZpZWRTdGFydCArIGxlZnQubW9kaWZpZWRMZW5ndGggPj0gcmlnaHQubW9kaWZpZWRTdGFydCkge1xyXG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbFN0YXJ0ID0gbGVmdC5vcmlnaW5hbFN0YXJ0O1xyXG4gICAgICAgICAgICBsZXQgb3JpZ2luYWxMZW5ndGggPSBsZWZ0Lm9yaWdpbmFsTGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBtb2RpZmllZFN0YXJ0ID0gbGVmdC5tb2RpZmllZFN0YXJ0O1xyXG4gICAgICAgICAgICBsZXQgbW9kaWZpZWRMZW5ndGggPSBsZWZ0Lm1vZGlmaWVkTGVuZ3RoO1xyXG4gICAgICAgICAgICBpZiAobGVmdC5vcmlnaW5hbFN0YXJ0ICsgbGVmdC5vcmlnaW5hbExlbmd0aCA+PSByaWdodC5vcmlnaW5hbFN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbExlbmd0aCA9IHJpZ2h0Lm9yaWdpbmFsU3RhcnQgKyByaWdodC5vcmlnaW5hbExlbmd0aCAtIGxlZnQub3JpZ2luYWxTdGFydDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobGVmdC5tb2RpZmllZFN0YXJ0ICsgbGVmdC5tb2RpZmllZExlbmd0aCA+PSByaWdodC5tb2RpZmllZFN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBtb2RpZmllZExlbmd0aCA9IHJpZ2h0Lm1vZGlmaWVkU3RhcnQgKyByaWdodC5tb2RpZmllZExlbmd0aCAtIGxlZnQubW9kaWZpZWRTdGFydDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtZXJnZWRDaGFuZ2VBcnJbMF0gPSBuZXcgRGlmZkNoYW5nZShvcmlnaW5hbFN0YXJ0LCBvcmlnaW5hbExlbmd0aCwgbW9kaWZpZWRTdGFydCwgbW9kaWZpZWRMZW5ndGgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG1lcmdlZENoYW5nZUFyclswXSA9IG51bGw7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBtZXRob2QgdXNlZCB0byBjbGlwIGEgZGlhZ29uYWwgaW5kZXggdG8gdGhlIHJhbmdlIG9mIHZhbGlkXHJcbiAgICAgKiBkaWFnb25hbHMuIFRoaXMgYWxzbyBkZWNpZGVzIHdoZXRoZXIgb3Igbm90IHRoZSBkaWFnb25hbCBpbmRleCxcclxuICAgICAqIGlmIGl0IGV4Y2VlZHMgdGhlIGJvdW5kYXJ5LCBzaG91bGQgYmUgY2xpcHBlZCB0byB0aGUgYm91bmRhcnkgb3IgY2xpcHBlZFxyXG4gICAgICogb25lIGluc2lkZSB0aGUgYm91bmRhcnkgZGVwZW5kaW5nIG9uIHRoZSBFdmVuL09kZCBzdGF0dXMgb2YgdGhlIGJvdW5kYXJ5XHJcbiAgICAgKiBhbmQgbnVtRGlmZmVyZW5jZXMuXHJcbiAgICAgKiBAcGFyYW0gZGlhZ29uYWwgVGhlIGluZGV4IG9mIHRoZSBkaWFnb25hbCB0byBjbGlwLlxyXG4gICAgICogQHBhcmFtIG51bURpZmZlcmVuY2VzIFRoZSBjdXJyZW50IG51bWJlciBvZiBkaWZmZXJlbmNlcyBiZWluZyBpdGVyYXRlZCB1cG9uLlxyXG4gICAgICogQHBhcmFtIGRpYWdvbmFsQmFzZUluZGV4IFRoZSBiYXNlIHJlZmVyZW5jZSBkaWFnb25hbC5cclxuICAgICAqIEBwYXJhbSBudW1EaWFnb25hbHMgVGhlIHRvdGFsIG51bWJlciBvZiBkaWFnb25hbHMuXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgY2xpcHBlZCBkaWFnb25hbCBpbmRleC5cclxuICAgICAqL1xyXG4gICAgQ2xpcERpYWdvbmFsQm91bmQoZGlhZ29uYWwsIG51bURpZmZlcmVuY2VzLCBkaWFnb25hbEJhc2VJbmRleCwgbnVtRGlhZ29uYWxzKSB7XHJcbiAgICAgICAgaWYgKGRpYWdvbmFsID49IDAgJiYgZGlhZ29uYWwgPCBudW1EaWFnb25hbHMpIHtcclxuICAgICAgICAgICAgLy8gTm90aGluZyB0byBjbGlwLCBpdHMgaW4gcmFuZ2VcclxuICAgICAgICAgICAgcmV0dXJuIGRpYWdvbmFsO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBkaWFnb25hbHNCZWxvdzogVGhlIG51bWJlciBvZiBkaWFnb25hbHMgYmVsb3cgdGhlIHJlZmVyZW5jZSBkaWFnb25hbFxyXG4gICAgICAgIC8vIGRpYWdvbmFsc0Fib3ZlOiBUaGUgbnVtYmVyIG9mIGRpYWdvbmFscyBhYm92ZSB0aGUgcmVmZXJlbmNlIGRpYWdvbmFsXHJcbiAgICAgICAgY29uc3QgZGlhZ29uYWxzQmVsb3cgPSBkaWFnb25hbEJhc2VJbmRleDtcclxuICAgICAgICBjb25zdCBkaWFnb25hbHNBYm92ZSA9IG51bURpYWdvbmFscyAtIGRpYWdvbmFsQmFzZUluZGV4IC0gMTtcclxuICAgICAgICBjb25zdCBkaWZmRXZlbiA9IChudW1EaWZmZXJlbmNlcyAlIDIgPT09IDApO1xyXG4gICAgICAgIGlmIChkaWFnb25hbCA8IDApIHtcclxuICAgICAgICAgICAgY29uc3QgbG93ZXJCb3VuZEV2ZW4gPSAoZGlhZ29uYWxzQmVsb3cgJSAyID09PSAwKTtcclxuICAgICAgICAgICAgcmV0dXJuIChkaWZmRXZlbiA9PT0gbG93ZXJCb3VuZEV2ZW4pID8gMCA6IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCB1cHBlckJvdW5kRXZlbiA9IChkaWFnb25hbHNBYm92ZSAlIDIgPT09IDApO1xyXG4gICAgICAgICAgICByZXR1cm4gKGRpZmZFdmVuID09PSB1cHBlckJvdW5kRXZlbikgPyBudW1EaWFnb25hbHMgLSAxIDogbnVtRGlhZ29uYWxzIC0gMjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbmltcG9ydCB7IGlzV2luZG93cywgaXNNYWNpbnRvc2gsIHNldEltbWVkaWF0ZSwgZ2xvYmFscyB9IGZyb20gJy4vcGxhdGZvcm0uanMnO1xyXG5sZXQgc2FmZVByb2Nlc3M7XHJcbi8vIE5hdGl2ZSBzYW5kYm94IGVudmlyb25tZW50XHJcbmlmICh0eXBlb2YgZ2xvYmFscy52c2NvZGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBnbG9iYWxzLnZzY29kZS5wcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgY29uc3Qgc2FuZGJveFByb2Nlc3MgPSBnbG9iYWxzLnZzY29kZS5wcm9jZXNzO1xyXG4gICAgc2FmZVByb2Nlc3MgPSB7XHJcbiAgICAgICAgZ2V0IHBsYXRmb3JtKCkgeyByZXR1cm4gc2FuZGJveFByb2Nlc3MucGxhdGZvcm07IH0sXHJcbiAgICAgICAgZ2V0IGVudigpIHsgcmV0dXJuIHNhbmRib3hQcm9jZXNzLmVudjsgfSxcclxuICAgICAgICBjd2QoKSB7IHJldHVybiBzYW5kYm94UHJvY2Vzcy5jd2QoKTsgfSxcclxuICAgICAgICBuZXh0VGljayhjYWxsYmFjaykgeyByZXR1cm4gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKTsgfVxyXG4gICAgfTtcclxufVxyXG4vLyBOYXRpdmUgbm9kZS5qcyBlbnZpcm9ubWVudFxyXG5lbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIHNhZmVQcm9jZXNzID0ge1xyXG4gICAgICAgIGdldCBwbGF0Zm9ybSgpIHsgcmV0dXJuIHByb2Nlc3MucGxhdGZvcm07IH0sXHJcbiAgICAgICAgZ2V0IGVudigpIHsgcmV0dXJuIHByb2Nlc3MuZW52OyB9LFxyXG4gICAgICAgIGN3ZCgpIHsgcmV0dXJuIHByb2Nlc3MuZW52WydWU0NPREVfQ1dEJ10gfHwgcHJvY2Vzcy5jd2QoKTsgfSxcclxuICAgICAgICBuZXh0VGljayhjYWxsYmFjaykgeyByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhjYWxsYmFjayk7IH1cclxuICAgIH07XHJcbn1cclxuLy8gV2ViIGVudmlyb25tZW50XHJcbmVsc2Uge1xyXG4gICAgc2FmZVByb2Nlc3MgPSB7XHJcbiAgICAgICAgLy8gU3VwcG9ydGVkXHJcbiAgICAgICAgZ2V0IHBsYXRmb3JtKCkgeyByZXR1cm4gaXNXaW5kb3dzID8gJ3dpbjMyJyA6IGlzTWFjaW50b3NoID8gJ2RhcndpbicgOiAnbGludXgnOyB9LFxyXG4gICAgICAgIG5leHRUaWNrKGNhbGxiYWNrKSB7IHJldHVybiBzZXRJbW1lZGlhdGUoY2FsbGJhY2spOyB9LFxyXG4gICAgICAgIC8vIFVuc3VwcG9ydGVkXHJcbiAgICAgICAgZ2V0IGVudigpIHsgcmV0dXJuIHt9OyB9LFxyXG4gICAgICAgIGN3ZCgpIHsgcmV0dXJuICcvJzsgfVxyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogUHJvdmlkZXMgc2FmZSBhY2Nlc3MgdG8gdGhlIGBjd2RgIHByb3BlcnR5IGluIG5vZGUuanMsIHNhbmRib3hlZCBvciB3ZWJcclxuICogZW52aXJvbm1lbnRzLlxyXG4gKlxyXG4gKiBOb3RlOiBpbiB3ZWIsIHRoaXMgcHJvcGVydHkgaXMgaGFyZGNvZGVkIHRvIGJlIGAvYC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBjd2QgPSBzYWZlUHJvY2Vzcy5jd2Q7XHJcbi8qKlxyXG4gKiBQcm92aWRlcyBzYWZlIGFjY2VzcyB0byB0aGUgYGVudmAgcHJvcGVydHkgaW4gbm9kZS5qcywgc2FuZGJveGVkIG9yIHdlYlxyXG4gKiBlbnZpcm9ubWVudHMuXHJcbiAqXHJcbiAqIE5vdGU6IGluIHdlYiwgdGhpcyBwcm9wZXJ0eSBpcyBoYXJkY29kZWQgdG8gYmUgYHt9YC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBlbnYgPSBzYWZlUHJvY2Vzcy5lbnY7XHJcbi8qKlxyXG4gKiBQcm92aWRlcyBzYWZlIGFjY2VzcyB0byB0aGUgYHBsYXRmb3JtYCBwcm9wZXJ0eSBpbiBub2RlLmpzLCBzYW5kYm94ZWQgb3Igd2ViXHJcbiAqIGVudmlyb25tZW50cy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBwbGF0Zm9ybSA9IHNhZmVQcm9jZXNzLnBsYXRmb3JtO1xyXG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuLy8gTk9URTogVlNDb2RlJ3MgY29weSBvZiBub2RlanMgcGF0aCBsaWJyYXJ5IHRvIGJlIHVzYWJsZSBpbiBjb21tb24gKG5vbi1ub2RlKSBuYW1lc3BhY2VcclxuLy8gQ29waWVkIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL3YxMi44LjEvbGliL3BhdGguanNcclxuLyoqXHJcbiAqIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxyXG4gKlxyXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxyXG4gKiBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXHJcbiAqIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xyXG4gKiB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXHJcbiAqIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcclxuICogcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXHJcbiAqIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG4gKlxyXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxyXG4gKiBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuICpcclxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xyXG4gKiBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXHJcbiAqIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cclxuICogTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXHJcbiAqIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxyXG4gKiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXHJcbiAqIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXHJcbiAqL1xyXG5pbXBvcnQgKiBhcyBwcm9jZXNzIGZyb20gJy4vcHJvY2Vzcy5qcyc7XHJcbmNvbnN0IENIQVJfVVBQRVJDQVNFX0EgPSA2NTsgLyogQSAqL1xyXG5jb25zdCBDSEFSX0xPV0VSQ0FTRV9BID0gOTc7IC8qIGEgKi9cclxuY29uc3QgQ0hBUl9VUFBFUkNBU0VfWiA9IDkwOyAvKiBaICovXHJcbmNvbnN0IENIQVJfTE9XRVJDQVNFX1ogPSAxMjI7IC8qIHogKi9cclxuY29uc3QgQ0hBUl9ET1QgPSA0NjsgLyogLiAqL1xyXG5jb25zdCBDSEFSX0ZPUldBUkRfU0xBU0ggPSA0NzsgLyogLyAqL1xyXG5jb25zdCBDSEFSX0JBQ0tXQVJEX1NMQVNIID0gOTI7IC8qIFxcICovXHJcbmNvbnN0IENIQVJfQ09MT04gPSA1ODsgLyogOiAqL1xyXG5jb25zdCBDSEFSX1FVRVNUSU9OX01BUksgPSA2MzsgLyogPyAqL1xyXG5jbGFzcyBFcnJvckludmFsaWRBcmdUeXBlIGV4dGVuZHMgRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IobmFtZSwgZXhwZWN0ZWQsIGFjdHVhbCkge1xyXG4gICAgICAgIC8vIGRldGVybWluZXI6ICdtdXN0IGJlJyBvciAnbXVzdCBub3QgYmUnXHJcbiAgICAgICAgbGV0IGRldGVybWluZXI7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBleHBlY3RlZCA9PT0gJ3N0cmluZycgJiYgZXhwZWN0ZWQuaW5kZXhPZignbm90ICcpID09PSAwKSB7XHJcbiAgICAgICAgICAgIGRldGVybWluZXIgPSAnbXVzdCBub3QgYmUnO1xyXG4gICAgICAgICAgICBleHBlY3RlZCA9IGV4cGVjdGVkLnJlcGxhY2UoL15ub3QgLywgJycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZGV0ZXJtaW5lciA9ICdtdXN0IGJlJztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdHlwZSA9IG5hbWUuaW5kZXhPZignLicpICE9PSAtMSA/ICdwcm9wZXJ0eScgOiAnYXJndW1lbnQnO1xyXG4gICAgICAgIGxldCBtc2cgPSBgVGhlIFwiJHtuYW1lfVwiICR7dHlwZX0gJHtkZXRlcm1pbmVyfSBvZiB0eXBlICR7ZXhwZWN0ZWR9YDtcclxuICAgICAgICBtc2cgKz0gYC4gUmVjZWl2ZWQgdHlwZSAke3R5cGVvZiBhY3R1YWx9YDtcclxuICAgICAgICBzdXBlcihtc2cpO1xyXG4gICAgICAgIHRoaXMuY29kZSA9ICdFUlJfSU5WQUxJRF9BUkdfVFlQRSc7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRhdGVTdHJpbmcodmFsdWUsIG5hbWUpIHtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9ySW52YWxpZEFyZ1R5cGUobmFtZSwgJ3N0cmluZycsIHZhbHVlKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpc1BhdGhTZXBhcmF0b3IoY29kZSkge1xyXG4gICAgcmV0dXJuIGNvZGUgPT09IENIQVJfRk9SV0FSRF9TTEFTSCB8fCBjb2RlID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIO1xyXG59XHJcbmZ1bmN0aW9uIGlzUG9zaXhQYXRoU2VwYXJhdG9yKGNvZGUpIHtcclxuICAgIHJldHVybiBjb2RlID09PSBDSEFSX0ZPUldBUkRfU0xBU0g7XHJcbn1cclxuZnVuY3Rpb24gaXNXaW5kb3dzRGV2aWNlUm9vdChjb2RlKSB7XHJcbiAgICByZXR1cm4gY29kZSA+PSBDSEFSX1VQUEVSQ0FTRV9BICYmIGNvZGUgPD0gQ0hBUl9VUFBFUkNBU0VfWiB8fFxyXG4gICAgICAgIGNvZGUgPj0gQ0hBUl9MT1dFUkNBU0VfQSAmJiBjb2RlIDw9IENIQVJfTE9XRVJDQVNFX1o7XHJcbn1cclxuLy8gUmVzb2x2ZXMgLiBhbmQgLi4gZWxlbWVudHMgaW4gYSBwYXRoIHdpdGggZGlyZWN0b3J5IG5hbWVzXHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0cmluZyhwYXRoLCBhbGxvd0Fib3ZlUm9vdCwgc2VwYXJhdG9yLCBpc1BhdGhTZXBhcmF0b3IpIHtcclxuICAgIGxldCByZXMgPSAnJztcclxuICAgIGxldCBsYXN0U2VnbWVudExlbmd0aCA9IDA7XHJcbiAgICBsZXQgbGFzdFNsYXNoID0gLTE7XHJcbiAgICBsZXQgZG90cyA9IDA7XHJcbiAgICBsZXQgY29kZSA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBwYXRoLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgaWYgKGkgPCBwYXRoLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpc1BhdGhTZXBhcmF0b3IoY29kZSkpIHtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb2RlID0gQ0hBUl9GT1JXQVJEX1NMQVNIO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKGNvZGUpKSB7XHJcbiAgICAgICAgICAgIGlmIChsYXN0U2xhc2ggPT09IGkgLSAxIHx8IGRvdHMgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIC8vIE5PT1BcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkb3RzID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzLmxlbmd0aCA8IDIgfHwgbGFzdFNlZ21lbnRMZW5ndGggIT09IDIgfHxcclxuICAgICAgICAgICAgICAgICAgICByZXMuY2hhckNvZGVBdChyZXMubGVuZ3RoIC0gMSkgIT09IENIQVJfRE9UIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzLmNoYXJDb2RlQXQocmVzLmxlbmd0aCAtIDIpICE9PSBDSEFSX0RPVCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXMubGVuZ3RoID4gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXN0U2xhc2hJbmRleCA9IHJlcy5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdFNsYXNoSW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IHJlcy5zbGljZSgwLCBsYXN0U2xhc2hJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IHJlcy5sZW5ndGggLSAxIC0gcmVzLmxhc3RJbmRleE9mKHNlcGFyYXRvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFNsYXNoID0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG90cyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXMubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RTbGFzaCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvdHMgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYWxsb3dBYm92ZVJvb3QpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXMgKz0gcmVzLmxlbmd0aCA+IDAgPyBgJHtzZXBhcmF0b3J9Li5gIDogJy4uJztcclxuICAgICAgICAgICAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IDI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXMgKz0gYCR7c2VwYXJhdG9yfSR7cGF0aC5zbGljZShsYXN0U2xhc2ggKyAxLCBpKX1gO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gcGF0aC5zbGljZShsYXN0U2xhc2ggKyAxLCBpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoID0gaSAtIGxhc3RTbGFzaCAtIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGFzdFNsYXNoID0gaTtcclxuICAgICAgICAgICAgZG90cyA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNvZGUgPT09IENIQVJfRE9UICYmIGRvdHMgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICsrZG90cztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGRvdHMgPSAtMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcbmZ1bmN0aW9uIF9mb3JtYXQoc2VwLCBwYXRoT2JqZWN0KSB7XHJcbiAgICBpZiAocGF0aE9iamVjdCA9PT0gbnVsbCB8fCB0eXBlb2YgcGF0aE9iamVjdCAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3JJbnZhbGlkQXJnVHlwZSgncGF0aE9iamVjdCcsICdPYmplY3QnLCBwYXRoT2JqZWN0KTtcclxuICAgIH1cclxuICAgIGNvbnN0IGRpciA9IHBhdGhPYmplY3QuZGlyIHx8IHBhdGhPYmplY3Qucm9vdDtcclxuICAgIGNvbnN0IGJhc2UgPSBwYXRoT2JqZWN0LmJhc2UgfHxcclxuICAgICAgICBgJHtwYXRoT2JqZWN0Lm5hbWUgfHwgJyd9JHtwYXRoT2JqZWN0LmV4dCB8fCAnJ31gO1xyXG4gICAgaWYgKCFkaXIpIHtcclxuICAgICAgICByZXR1cm4gYmFzZTtcclxuICAgIH1cclxuICAgIHJldHVybiBkaXIgPT09IHBhdGhPYmplY3Qucm9vdCA/IGAke2Rpcn0ke2Jhc2V9YCA6IGAke2Rpcn0ke3NlcH0ke2Jhc2V9YDtcclxufVxyXG5leHBvcnQgY29uc3Qgd2luMzIgPSB7XHJcbiAgICAvLyBwYXRoLnJlc29sdmUoW2Zyb20gLi4uXSwgdG8pXHJcbiAgICByZXNvbHZlKC4uLnBhdGhTZWdtZW50cykge1xyXG4gICAgICAgIGxldCByZXNvbHZlZERldmljZSA9ICcnO1xyXG4gICAgICAgIGxldCByZXNvbHZlZFRhaWwgPSAnJztcclxuICAgICAgICBsZXQgcmVzb2x2ZWRBYnNvbHV0ZSA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBwYXRoU2VnbWVudHMubGVuZ3RoIC0gMTsgaSA+PSAtMTsgaS0tKSB7XHJcbiAgICAgICAgICAgIGxldCBwYXRoO1xyXG4gICAgICAgICAgICBpZiAoaSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBwYXRoID0gcGF0aFNlZ21lbnRzW2ldO1xyXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVTdHJpbmcocGF0aCwgJ3BhdGgnKTtcclxuICAgICAgICAgICAgICAgIC8vIFNraXAgZW1wdHkgZW50cmllc1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAocmVzb2x2ZWREZXZpY2UubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBwYXRoID0gcHJvY2Vzcy5jd2QoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIFdpbmRvd3MgaGFzIHRoZSBjb25jZXB0IG9mIGRyaXZlLXNwZWNpZmljIGN1cnJlbnQgd29ya2luZ1xyXG4gICAgICAgICAgICAgICAgLy8gZGlyZWN0b3JpZXMuIElmIHdlJ3ZlIHJlc29sdmVkIGEgZHJpdmUgbGV0dGVyIGJ1dCBub3QgeWV0IGFuXHJcbiAgICAgICAgICAgICAgICAvLyBhYnNvbHV0ZSBwYXRoLCBnZXQgY3dkIGZvciB0aGF0IGRyaXZlLCBvciB0aGUgcHJvY2VzcyBjd2QgaWZcclxuICAgICAgICAgICAgICAgIC8vIHRoZSBkcml2ZSBjd2QgaXMgbm90IGF2YWlsYWJsZS4gV2UncmUgc3VyZSB0aGUgZGV2aWNlIGlzIG5vdFxyXG4gICAgICAgICAgICAgICAgLy8gYSBVTkMgcGF0aCBhdCB0aGlzIHBvaW50cywgYmVjYXVzZSBVTkMgcGF0aHMgYXJlIGFsd2F5cyBhYnNvbHV0ZS5cclxuICAgICAgICAgICAgICAgIHBhdGggPSBwcm9jZXNzLmVudltgPSR7cmVzb2x2ZWREZXZpY2V9YF0gfHwgcHJvY2Vzcy5jd2QoKTtcclxuICAgICAgICAgICAgICAgIC8vIFZlcmlmeSB0aGF0IGEgY3dkIHdhcyBmb3VuZCBhbmQgdGhhdCBpdCBhY3R1YWxseSBwb2ludHNcclxuICAgICAgICAgICAgICAgIC8vIHRvIG91ciBkcml2ZS4gSWYgbm90LCBkZWZhdWx0IHRvIHRoZSBkcml2ZSdzIHJvb3QuXHJcbiAgICAgICAgICAgICAgICBpZiAocGF0aCA9PT0gdW5kZWZpbmVkIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aC5zbGljZSgwLCAyKS50b0xvd2VyQ2FzZSgpICE9PSByZXNvbHZlZERldmljZS50b0xvd2VyQ2FzZSgpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGguY2hhckNvZGVBdCgyKSA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGggPSBgJHtyZXNvbHZlZERldmljZX1cXFxcYDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBsZW4gPSBwYXRoLmxlbmd0aDtcclxuICAgICAgICAgICAgbGV0IHJvb3RFbmQgPSAwO1xyXG4gICAgICAgICAgICBsZXQgZGV2aWNlID0gJyc7XHJcbiAgICAgICAgICAgIGxldCBpc0Fic29sdXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoMCk7XHJcbiAgICAgICAgICAgIC8vIFRyeSB0byBtYXRjaCBhIHJvb3RcclxuICAgICAgICAgICAgaWYgKGxlbiA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzUGF0aFNlcGFyYXRvcihjb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGBwYXRoYCBjb250YWlucyBqdXN0IGEgcGF0aCBzZXBhcmF0b3JcclxuICAgICAgICAgICAgICAgICAgICByb290RW5kID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBpc0Fic29sdXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc1BhdGhTZXBhcmF0b3IoY29kZSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIFBvc3NpYmxlIFVOQyByb290XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSBzdGFydGVkIHdpdGggYSBzZXBhcmF0b3IsIHdlIGtub3cgd2UgYXQgbGVhc3QgaGF2ZSBhblxyXG4gICAgICAgICAgICAgICAgLy8gYWJzb2x1dGUgcGF0aCBvZiBzb21lIGtpbmQgKFVOQyBvciBvdGhlcndpc2UpXHJcbiAgICAgICAgICAgICAgICBpc0Fic29sdXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KDEpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoZWQgZG91YmxlIHBhdGggc2VwYXJhdG9yIGF0IGJlZ2lubmluZ1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBqID0gMjtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbGFzdCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2ggMSBvciBtb3JlIG5vbi1wYXRoIHNlcGFyYXRvcnNcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaiA8IGxlbiAmJiAhaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdChqKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaisrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaiA8IGxlbiAmJiBqICE9PSBsYXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0UGFydCA9IHBhdGguc2xpY2UobGFzdCwgaik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoZWQhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaCAxIG9yIG1vcmUgcGF0aCBzZXBhcmF0b3JzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgbGVuICYmIGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoaikpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGogPCBsZW4gJiYgaiAhPT0gbGFzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2hlZCFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2ggMSBvciBtb3JlIG5vbi1wYXRoIHNlcGFyYXRvcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgbGVuICYmICFpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KGopKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGorKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqID09PSBsZW4gfHwgaiAhPT0gbGFzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG1hdGNoZWQgYSBVTkMgcm9vdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldmljZSA9IGBcXFxcXFxcXCR7Zmlyc3RQYXJ0fVxcXFwke3BhdGguc2xpY2UobGFzdCwgail9YDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290RW5kID0gajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvb3RFbmQgPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzV2luZG93c0RldmljZVJvb3QoY29kZSkgJiZcclxuICAgICAgICAgICAgICAgIHBhdGguY2hhckNvZGVBdCgxKSA9PT0gQ0hBUl9DT0xPTikge1xyXG4gICAgICAgICAgICAgICAgLy8gUG9zc2libGUgZGV2aWNlIHJvb3RcclxuICAgICAgICAgICAgICAgIGRldmljZSA9IHBhdGguc2xpY2UoMCwgMik7XHJcbiAgICAgICAgICAgICAgICByb290RW5kID0gMjtcclxuICAgICAgICAgICAgICAgIGlmIChsZW4gPiAyICYmIGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoMikpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVHJlYXQgc2VwYXJhdG9yIGZvbGxvd2luZyBkcml2ZSBuYW1lIGFzIGFuIGFic29sdXRlIHBhdGhcclxuICAgICAgICAgICAgICAgICAgICAvLyBpbmRpY2F0b3JcclxuICAgICAgICAgICAgICAgICAgICBpc0Fic29sdXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICByb290RW5kID0gMztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGV2aWNlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNvbHZlZERldmljZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRldmljZS50b0xvd2VyQ2FzZSgpICE9PSByZXNvbHZlZERldmljZS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgcGF0aCBwb2ludHMgdG8gYW5vdGhlciBkZXZpY2Ugc28gaXQgaXMgbm90IGFwcGxpY2FibGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWREZXZpY2UgPSBkZXZpY2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJlc29sdmVkQWJzb2x1dGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNvbHZlZERldmljZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlZFRhaWwgPSBgJHtwYXRoLnNsaWNlKHJvb3RFbmQpfVxcXFwke3Jlc29sdmVkVGFpbH1gO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IGlzQWJzb2x1dGU7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNBYnNvbHV0ZSAmJiByZXNvbHZlZERldmljZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQXQgdGhpcyBwb2ludCB0aGUgcGF0aCBzaG91bGQgYmUgcmVzb2x2ZWQgdG8gYSBmdWxsIGFic29sdXRlIHBhdGgsXHJcbiAgICAgICAgLy8gYnV0IGhhbmRsZSByZWxhdGl2ZSBwYXRocyB0byBiZSBzYWZlIChtaWdodCBoYXBwZW4gd2hlbiBwcm9jZXNzLmN3ZCgpXHJcbiAgICAgICAgLy8gZmFpbHMpXHJcbiAgICAgICAgLy8gTm9ybWFsaXplIHRoZSB0YWlsIHBhdGhcclxuICAgICAgICByZXNvbHZlZFRhaWwgPSBub3JtYWxpemVTdHJpbmcocmVzb2x2ZWRUYWlsLCAhcmVzb2x2ZWRBYnNvbHV0ZSwgJ1xcXFwnLCBpc1BhdGhTZXBhcmF0b3IpO1xyXG4gICAgICAgIHJldHVybiByZXNvbHZlZEFic29sdXRlID9cclxuICAgICAgICAgICAgYCR7cmVzb2x2ZWREZXZpY2V9XFxcXCR7cmVzb2x2ZWRUYWlsfWAgOlxyXG4gICAgICAgICAgICBgJHtyZXNvbHZlZERldmljZX0ke3Jlc29sdmVkVGFpbH1gIHx8ICcuJztcclxuICAgIH0sXHJcbiAgICBub3JtYWxpemUocGF0aCkge1xyXG4gICAgICAgIHZhbGlkYXRlU3RyaW5nKHBhdGgsICdwYXRoJyk7XHJcbiAgICAgICAgY29uc3QgbGVuID0gcGF0aC5sZW5ndGg7XHJcbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJy4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcm9vdEVuZCA9IDA7XHJcbiAgICAgICAgbGV0IGRldmljZTtcclxuICAgICAgICBsZXQgaXNBYnNvbHV0ZSA9IGZhbHNlO1xyXG4gICAgICAgIGNvbnN0IGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoMCk7XHJcbiAgICAgICAgLy8gVHJ5IHRvIG1hdGNoIGEgcm9vdFxyXG4gICAgICAgIGlmIChsZW4gPT09IDEpIHtcclxuICAgICAgICAgICAgLy8gYHBhdGhgIGNvbnRhaW5zIGp1c3QgYSBzaW5nbGUgY2hhciwgZXhpdCBlYXJseSB0byBhdm9pZFxyXG4gICAgICAgICAgICAvLyB1bm5lY2Vzc2FyeSB3b3JrXHJcbiAgICAgICAgICAgIHJldHVybiBpc1Bvc2l4UGF0aFNlcGFyYXRvcihjb2RlKSA/ICdcXFxcJyA6IHBhdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IoY29kZSkpIHtcclxuICAgICAgICAgICAgLy8gUG9zc2libGUgVU5DIHJvb3RcclxuICAgICAgICAgICAgLy8gSWYgd2Ugc3RhcnRlZCB3aXRoIGEgc2VwYXJhdG9yLCB3ZSBrbm93IHdlIGF0IGxlYXN0IGhhdmUgYW4gYWJzb2x1dGVcclxuICAgICAgICAgICAgLy8gcGF0aCBvZiBzb21lIGtpbmQgKFVOQyBvciBvdGhlcndpc2UpXHJcbiAgICAgICAgICAgIGlzQWJzb2x1dGUgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdCgxKSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIE1hdGNoZWQgZG91YmxlIHBhdGggc2VwYXJhdG9yIGF0IGJlZ2lubmluZ1xyXG4gICAgICAgICAgICAgICAgbGV0IGogPSAyO1xyXG4gICAgICAgICAgICAgICAgbGV0IGxhc3QgPSBqO1xyXG4gICAgICAgICAgICAgICAgLy8gTWF0Y2ggMSBvciBtb3JlIG5vbi1wYXRoIHNlcGFyYXRvcnNcclxuICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgbGVuICYmICFpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KGopKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGorKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChqIDwgbGVuICYmIGogIT09IGxhc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaXJzdFBhcnQgPSBwYXRoLnNsaWNlKGxhc3QsIGopO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoZWQhXHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2ggMSBvciBtb3JlIHBhdGggc2VwYXJhdG9yc1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgbGVuICYmIGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoaikpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGorKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGogPCBsZW4gJiYgaiAhPT0gbGFzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaGVkIVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0ID0gajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2ggMSBvciBtb3JlIG5vbi1wYXRoIHNlcGFyYXRvcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGogPCBsZW4gJiYgIWlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoaikpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGogPT09IGxlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgbWF0Y2hlZCBhIFVOQyByb290IG9ubHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgbm9ybWFsaXplZCB2ZXJzaW9uIG9mIHRoZSBVTkMgcm9vdCBzaW5jZSB0aGVyZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXMgbm90aGluZyBsZWZ0IHRvIHByb2Nlc3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgXFxcXFxcXFwke2ZpcnN0UGFydH1cXFxcJHtwYXRoLnNsaWNlKGxhc3QpfVxcXFxgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqICE9PSBsYXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBtYXRjaGVkIGEgVU5DIHJvb3Qgd2l0aCBsZWZ0b3ZlcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldmljZSA9IGBcXFxcXFxcXCR7Zmlyc3RQYXJ0fVxcXFwke3BhdGguc2xpY2UobGFzdCwgail9YDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RFbmQgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcm9vdEVuZCA9IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaXNXaW5kb3dzRGV2aWNlUm9vdChjb2RlKSAmJiBwYXRoLmNoYXJDb2RlQXQoMSkgPT09IENIQVJfQ09MT04pIHtcclxuICAgICAgICAgICAgLy8gUG9zc2libGUgZGV2aWNlIHJvb3RcclxuICAgICAgICAgICAgZGV2aWNlID0gcGF0aC5zbGljZSgwLCAyKTtcclxuICAgICAgICAgICAgcm9vdEVuZCA9IDI7XHJcbiAgICAgICAgICAgIGlmIChsZW4gPiAyICYmIGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoMikpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUcmVhdCBzZXBhcmF0b3IgZm9sbG93aW5nIGRyaXZlIG5hbWUgYXMgYW4gYWJzb2x1dGUgcGF0aFxyXG4gICAgICAgICAgICAgICAgLy8gaW5kaWNhdG9yXHJcbiAgICAgICAgICAgICAgICBpc0Fic29sdXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHJvb3RFbmQgPSAzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCB0YWlsID0gcm9vdEVuZCA8IGxlbiA/XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZVN0cmluZyhwYXRoLnNsaWNlKHJvb3RFbmQpLCAhaXNBYnNvbHV0ZSwgJ1xcXFwnLCBpc1BhdGhTZXBhcmF0b3IpIDpcclxuICAgICAgICAgICAgJyc7XHJcbiAgICAgICAgaWYgKHRhaWwubGVuZ3RoID09PSAwICYmICFpc0Fic29sdXRlKSB7XHJcbiAgICAgICAgICAgIHRhaWwgPSAnLic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0YWlsLmxlbmd0aCA+IDAgJiYgaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdChsZW4gLSAxKSkpIHtcclxuICAgICAgICAgICAgdGFpbCArPSAnXFxcXCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkZXZpY2UgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaXNBYnNvbHV0ZSA/IGBcXFxcJHt0YWlsfWAgOiB0YWlsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaXNBYnNvbHV0ZSA/IGAke2RldmljZX1cXFxcJHt0YWlsfWAgOiBgJHtkZXZpY2V9JHt0YWlsfWA7XHJcbiAgICB9LFxyXG4gICAgaXNBYnNvbHV0ZShwYXRoKSB7XHJcbiAgICAgICAgdmFsaWRhdGVTdHJpbmcocGF0aCwgJ3BhdGgnKTtcclxuICAgICAgICBjb25zdCBsZW4gPSBwYXRoLmxlbmd0aDtcclxuICAgICAgICBpZiAobGVuID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY29kZSA9IHBhdGguY2hhckNvZGVBdCgwKTtcclxuICAgICAgICByZXR1cm4gaXNQYXRoU2VwYXJhdG9yKGNvZGUpIHx8XHJcbiAgICAgICAgICAgIC8vIFBvc3NpYmxlIGRldmljZSByb290XHJcbiAgICAgICAgICAgIGxlbiA+IDIgJiZcclxuICAgICAgICAgICAgICAgIGlzV2luZG93c0RldmljZVJvb3QoY29kZSkgJiZcclxuICAgICAgICAgICAgICAgIHBhdGguY2hhckNvZGVBdCgxKSA9PT0gQ0hBUl9DT0xPTiAmJlxyXG4gICAgICAgICAgICAgICAgaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdCgyKSk7XHJcbiAgICB9LFxyXG4gICAgam9pbiguLi5wYXRocykge1xyXG4gICAgICAgIGlmIChwYXRocy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuICcuJztcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGpvaW5lZDtcclxuICAgICAgICBsZXQgZmlyc3RQYXJ0O1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0aHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgYXJnID0gcGF0aHNbaV07XHJcbiAgICAgICAgICAgIHZhbGlkYXRlU3RyaW5nKGFyZywgJ3BhdGgnKTtcclxuICAgICAgICAgICAgaWYgKGFyZy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoam9pbmVkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBqb2luZWQgPSBmaXJzdFBhcnQgPSBhcmc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBqb2luZWQgKz0gYFxcXFwke2FyZ31gO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChqb2luZWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJy4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgam9pbmVkIHBhdGggZG9lc24ndCBzdGFydCB3aXRoIHR3byBzbGFzaGVzLCBiZWNhdXNlXHJcbiAgICAgICAgLy8gbm9ybWFsaXplKCkgd2lsbCBtaXN0YWtlIGl0IGZvciBhbiBVTkMgcGF0aCB0aGVuLlxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gVGhpcyBzdGVwIGlzIHNraXBwZWQgd2hlbiBpdCBpcyB2ZXJ5IGNsZWFyIHRoYXQgdGhlIHVzZXIgYWN0dWFsbHlcclxuICAgICAgICAvLyBpbnRlbmRlZCB0byBwb2ludCBhdCBhbiBVTkMgcGF0aC4gVGhpcyBpcyBhc3N1bWVkIHdoZW4gdGhlIGZpcnN0XHJcbiAgICAgICAgLy8gbm9uLWVtcHR5IHN0cmluZyBhcmd1bWVudHMgc3RhcnRzIHdpdGggZXhhY3RseSB0d28gc2xhc2hlcyBmb2xsb3dlZCBieVxyXG4gICAgICAgIC8vIGF0IGxlYXN0IG9uZSBtb3JlIG5vbi1zbGFzaCBjaGFyYWN0ZXIuXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBOb3RlIHRoYXQgZm9yIG5vcm1hbGl6ZSgpIHRvIHRyZWF0IGEgcGF0aCBhcyBhbiBVTkMgcGF0aCBpdCBuZWVkcyB0b1xyXG4gICAgICAgIC8vIGhhdmUgYXQgbGVhc3QgMiBjb21wb25lbnRzLCBzbyB3ZSBkb24ndCBmaWx0ZXIgZm9yIHRoYXQgaGVyZS5cclxuICAgICAgICAvLyBUaGlzIG1lYW5zIHRoYXQgdGhlIHVzZXIgY2FuIHVzZSBqb2luIHRvIGNvbnN0cnVjdCBVTkMgcGF0aHMgZnJvbVxyXG4gICAgICAgIC8vIGEgc2VydmVyIG5hbWUgYW5kIGEgc2hhcmUgbmFtZTsgZm9yIGV4YW1wbGU6XHJcbiAgICAgICAgLy8gICBwYXRoLmpvaW4oJy8vc2VydmVyJywgJ3NoYXJlJykgLT4gJ1xcXFxcXFxcc2VydmVyXFxcXHNoYXJlXFxcXCcpXHJcbiAgICAgICAgbGV0IG5lZWRzUmVwbGFjZSA9IHRydWU7XHJcbiAgICAgICAgbGV0IHNsYXNoQ291bnQgPSAwO1xyXG4gICAgICAgIGlmICh0eXBlb2YgZmlyc3RQYXJ0ID09PSAnc3RyaW5nJyAmJiBpc1BhdGhTZXBhcmF0b3IoZmlyc3RQYXJ0LmNoYXJDb2RlQXQoMCkpKSB7XHJcbiAgICAgICAgICAgICsrc2xhc2hDb3VudDtcclxuICAgICAgICAgICAgY29uc3QgZmlyc3RMZW4gPSBmaXJzdFBhcnQubGVuZ3RoO1xyXG4gICAgICAgICAgICBpZiAoZmlyc3RMZW4gPiAxICYmIGlzUGF0aFNlcGFyYXRvcihmaXJzdFBhcnQuY2hhckNvZGVBdCgxKSkpIHtcclxuICAgICAgICAgICAgICAgICsrc2xhc2hDb3VudDtcclxuICAgICAgICAgICAgICAgIGlmIChmaXJzdExlbiA+IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKGZpcnN0UGFydC5jaGFyQ29kZUF0KDIpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICArK3NsYXNoQ291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBtYXRjaGVkIGEgVU5DIHBhdGggaW4gdGhlIGZpcnN0IHBhcnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmVlZHNSZXBsYWNlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChuZWVkc1JlcGxhY2UpIHtcclxuICAgICAgICAgICAgLy8gRmluZCBhbnkgbW9yZSBjb25zZWN1dGl2ZSBzbGFzaGVzIHdlIG5lZWQgdG8gcmVwbGFjZVxyXG4gICAgICAgICAgICB3aGlsZSAoc2xhc2hDb3VudCA8IGpvaW5lZC5sZW5ndGggJiZcclxuICAgICAgICAgICAgICAgIGlzUGF0aFNlcGFyYXRvcihqb2luZWQuY2hhckNvZGVBdChzbGFzaENvdW50KSkpIHtcclxuICAgICAgICAgICAgICAgIHNsYXNoQ291bnQrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBSZXBsYWNlIHRoZSBzbGFzaGVzIGlmIG5lZWRlZFxyXG4gICAgICAgICAgICBpZiAoc2xhc2hDb3VudCA+PSAyKSB7XHJcbiAgICAgICAgICAgICAgICBqb2luZWQgPSBgXFxcXCR7am9pbmVkLnNsaWNlKHNsYXNoQ291bnQpfWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHdpbjMyLm5vcm1hbGl6ZShqb2luZWQpO1xyXG4gICAgfSxcclxuICAgIC8vIEl0IHdpbGwgc29sdmUgdGhlIHJlbGF0aXZlIHBhdGggZnJvbSBgZnJvbWAgdG8gYHRvYCwgZm9yIGluc3RhbmNlOlxyXG4gICAgLy8gIGZyb20gPSAnQzpcXFxcb3JhbmRlYVxcXFx0ZXN0XFxcXGFhYSdcclxuICAgIC8vICB0byA9ICdDOlxcXFxvcmFuZGVhXFxcXGltcGxcXFxcYmJiJ1xyXG4gICAgLy8gVGhlIG91dHB1dCBvZiB0aGUgZnVuY3Rpb24gc2hvdWxkIGJlOiAnLi5cXFxcLi5cXFxcaW1wbFxcXFxiYmInXHJcbiAgICByZWxhdGl2ZShmcm9tLCB0bykge1xyXG4gICAgICAgIHZhbGlkYXRlU3RyaW5nKGZyb20sICdmcm9tJyk7XHJcbiAgICAgICAgdmFsaWRhdGVTdHJpbmcodG8sICd0bycpO1xyXG4gICAgICAgIGlmIChmcm9tID09PSB0bykge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGZyb21PcmlnID0gd2luMzIucmVzb2x2ZShmcm9tKTtcclxuICAgICAgICBjb25zdCB0b09yaWcgPSB3aW4zMi5yZXNvbHZlKHRvKTtcclxuICAgICAgICBpZiAoZnJvbU9yaWcgPT09IHRvT3JpZykge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZyb20gPSBmcm9tT3JpZy50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIHRvID0gdG9PcmlnLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgaWYgKGZyb20gPT09IHRvKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVHJpbSBhbnkgbGVhZGluZyBiYWNrc2xhc2hlc1xyXG4gICAgICAgIGxldCBmcm9tU3RhcnQgPSAwO1xyXG4gICAgICAgIHdoaWxlIChmcm9tU3RhcnQgPCBmcm9tLmxlbmd0aCAmJlxyXG4gICAgICAgICAgICBmcm9tLmNoYXJDb2RlQXQoZnJvbVN0YXJ0KSA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSCkge1xyXG4gICAgICAgICAgICBmcm9tU3RhcnQrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVHJpbSB0cmFpbGluZyBiYWNrc2xhc2hlcyAoYXBwbGljYWJsZSB0byBVTkMgcGF0aHMgb25seSlcclxuICAgICAgICBsZXQgZnJvbUVuZCA9IGZyb20ubGVuZ3RoO1xyXG4gICAgICAgIHdoaWxlIChmcm9tRW5kIC0gMSA+IGZyb21TdGFydCAmJlxyXG4gICAgICAgICAgICBmcm9tLmNoYXJDb2RlQXQoZnJvbUVuZCAtIDEpID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XHJcbiAgICAgICAgICAgIGZyb21FbmQtLTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZnJvbUxlbiA9IGZyb21FbmQgLSBmcm9tU3RhcnQ7XHJcbiAgICAgICAgLy8gVHJpbSBhbnkgbGVhZGluZyBiYWNrc2xhc2hlc1xyXG4gICAgICAgIGxldCB0b1N0YXJ0ID0gMDtcclxuICAgICAgICB3aGlsZSAodG9TdGFydCA8IHRvLmxlbmd0aCAmJlxyXG4gICAgICAgICAgICB0by5jaGFyQ29kZUF0KHRvU3RhcnQpID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XHJcbiAgICAgICAgICAgIHRvU3RhcnQrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVHJpbSB0cmFpbGluZyBiYWNrc2xhc2hlcyAoYXBwbGljYWJsZSB0byBVTkMgcGF0aHMgb25seSlcclxuICAgICAgICBsZXQgdG9FbmQgPSB0by5sZW5ndGg7XHJcbiAgICAgICAgd2hpbGUgKHRvRW5kIC0gMSA+IHRvU3RhcnQgJiZcclxuICAgICAgICAgICAgdG8uY2hhckNvZGVBdCh0b0VuZCAtIDEpID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XHJcbiAgICAgICAgICAgIHRvRW5kLS07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRvTGVuID0gdG9FbmQgLSB0b1N0YXJ0O1xyXG4gICAgICAgIC8vIENvbXBhcmUgcGF0aHMgdG8gZmluZCB0aGUgbG9uZ2VzdCBjb21tb24gcGF0aCBmcm9tIHJvb3RcclxuICAgICAgICBjb25zdCBsZW5ndGggPSBmcm9tTGVuIDwgdG9MZW4gPyBmcm9tTGVuIDogdG9MZW47XHJcbiAgICAgICAgbGV0IGxhc3RDb21tb25TZXAgPSAtMTtcclxuICAgICAgICBsZXQgaSA9IDA7XHJcbiAgICAgICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBmcm9tQ29kZSA9IGZyb20uY2hhckNvZGVBdChmcm9tU3RhcnQgKyBpKTtcclxuICAgICAgICAgICAgaWYgKGZyb21Db2RlICE9PSB0by5jaGFyQ29kZUF0KHRvU3RhcnQgKyBpKSkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZnJvbUNvZGUgPT09IENIQVJfQkFDS1dBUkRfU0xBU0gpIHtcclxuICAgICAgICAgICAgICAgIGxhc3RDb21tb25TZXAgPSBpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFdlIGZvdW5kIGEgbWlzbWF0Y2ggYmVmb3JlIHRoZSBmaXJzdCBjb21tb24gcGF0aCBzZXBhcmF0b3Igd2FzIHNlZW4sIHNvXHJcbiAgICAgICAgLy8gcmV0dXJuIHRoZSBvcmlnaW5hbCBgdG9gLlxyXG4gICAgICAgIGlmIChpICE9PSBsZW5ndGgpIHtcclxuICAgICAgICAgICAgaWYgKGxhc3RDb21tb25TZXAgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdG9PcmlnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodG9MZW4gPiBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0by5jaGFyQ29kZUF0KHRvU3RhcnQgKyBpKSA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGdldCBoZXJlIGlmIGBmcm9tYCBpcyB0aGUgZXhhY3QgYmFzZSBwYXRoIGZvciBgdG9gLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBleGFtcGxlOiBmcm9tPSdDOlxcXFxmb29cXFxcYmFyJzsgdG89J0M6XFxcXGZvb1xcXFxiYXJcXFxcYmF6J1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0b09yaWcuc2xpY2UodG9TdGFydCArIGkgKyAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZ2V0IGhlcmUgaWYgYGZyb21gIGlzIHRoZSBkZXZpY2Ugcm9vdC5cclxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZXhhbXBsZTogZnJvbT0nQzpcXFxcJzsgdG89J0M6XFxcXGZvbydcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9PcmlnLnNsaWNlKHRvU3RhcnQgKyBpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZnJvbUxlbiA+IGxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZyb20uY2hhckNvZGVBdChmcm9tU3RhcnQgKyBpKSA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGdldCBoZXJlIGlmIGB0b2AgaXMgdGhlIGV4YWN0IGJhc2UgcGF0aCBmb3IgYGZyb21gLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBleGFtcGxlOiBmcm9tPSdDOlxcXFxmb29cXFxcYmFyJzsgdG89J0M6XFxcXGZvbydcclxuICAgICAgICAgICAgICAgICAgICBsYXN0Q29tbW9uU2VwID0gaTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGkgPT09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBnZXQgaGVyZSBpZiBgdG9gIGlzIHRoZSBkZXZpY2Ugcm9vdC5cclxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZXhhbXBsZTogZnJvbT0nQzpcXFxcZm9vXFxcXGJhcic7IHRvPSdDOlxcXFwnXHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdENvbW1vblNlcCA9IDM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGxhc3RDb21tb25TZXAgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBsYXN0Q29tbW9uU2VwID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgb3V0ID0gJyc7XHJcbiAgICAgICAgLy8gR2VuZXJhdGUgdGhlIHJlbGF0aXZlIHBhdGggYmFzZWQgb24gdGhlIHBhdGggZGlmZmVyZW5jZSBiZXR3ZWVuIGB0b2AgYW5kXHJcbiAgICAgICAgLy8gYGZyb21gXHJcbiAgICAgICAgZm9yIChpID0gZnJvbVN0YXJ0ICsgbGFzdENvbW1vblNlcCArIDE7IGkgPD0gZnJvbUVuZDsgKytpKSB7XHJcbiAgICAgICAgICAgIGlmIChpID09PSBmcm9tRW5kIHx8IGZyb20uY2hhckNvZGVBdChpKSA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSCkge1xyXG4gICAgICAgICAgICAgICAgb3V0ICs9IG91dC5sZW5ndGggPT09IDAgPyAnLi4nIDogJ1xcXFwuLic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdG9TdGFydCArPSBsYXN0Q29tbW9uU2VwO1xyXG4gICAgICAgIC8vIExhc3RseSwgYXBwZW5kIHRoZSByZXN0IG9mIHRoZSBkZXN0aW5hdGlvbiAoYHRvYCkgcGF0aCB0aGF0IGNvbWVzIGFmdGVyXHJcbiAgICAgICAgLy8gdGhlIGNvbW1vbiBwYXRoIHBhcnRzXHJcbiAgICAgICAgaWYgKG91dC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgJHtvdXR9JHt0b09yaWcuc2xpY2UodG9TdGFydCwgdG9FbmQpfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0b09yaWcuY2hhckNvZGVBdCh0b1N0YXJ0KSA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSCkge1xyXG4gICAgICAgICAgICArK3RvU3RhcnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0b09yaWcuc2xpY2UodG9TdGFydCwgdG9FbmQpO1xyXG4gICAgfSxcclxuICAgIHRvTmFtZXNwYWNlZFBhdGgocGF0aCkge1xyXG4gICAgICAgIC8vIE5vdGU6IHRoaXMgd2lsbCAqcHJvYmFibHkqIHRocm93IHNvbWV3aGVyZS5cclxuICAgICAgICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZXNvbHZlZFBhdGggPSB3aW4zMi5yZXNvbHZlKHBhdGgpO1xyXG4gICAgICAgIGlmIChyZXNvbHZlZFBhdGgubGVuZ3RoIDw9IDIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZXNvbHZlZFBhdGguY2hhckNvZGVBdCgwKSA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSCkge1xyXG4gICAgICAgICAgICAvLyBQb3NzaWJsZSBVTkMgcm9vdFxyXG4gICAgICAgICAgICBpZiAocmVzb2x2ZWRQYXRoLmNoYXJDb2RlQXQoMSkgPT09IENIQVJfQkFDS1dBUkRfU0xBU0gpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvZGUgPSByZXNvbHZlZFBhdGguY2hhckNvZGVBdCgyKTtcclxuICAgICAgICAgICAgICAgIGlmIChjb2RlICE9PSBDSEFSX1FVRVNUSU9OX01BUksgJiYgY29kZSAhPT0gQ0hBUl9ET1QpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaGVkIG5vbi1sb25nIFVOQyByb290LCBjb252ZXJ0IHRoZSBwYXRoIHRvIGEgbG9uZyBVTkMgcGF0aFxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgXFxcXFxcXFw/XFxcXFVOQ1xcXFwke3Jlc29sdmVkUGF0aC5zbGljZSgyKX1gO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlzV2luZG93c0RldmljZVJvb3QocmVzb2x2ZWRQYXRoLmNoYXJDb2RlQXQoMCkpICYmXHJcbiAgICAgICAgICAgIHJlc29sdmVkUGF0aC5jaGFyQ29kZUF0KDEpID09PSBDSEFSX0NPTE9OICYmXHJcbiAgICAgICAgICAgIHJlc29sdmVkUGF0aC5jaGFyQ29kZUF0KDIpID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XHJcbiAgICAgICAgICAgIC8vIE1hdGNoZWQgZGV2aWNlIHJvb3QsIGNvbnZlcnQgdGhlIHBhdGggdG8gYSBsb25nIFVOQyBwYXRoXHJcbiAgICAgICAgICAgIHJldHVybiBgXFxcXFxcXFw/XFxcXCR7cmVzb2x2ZWRQYXRofWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXRoO1xyXG4gICAgfSxcclxuICAgIGRpcm5hbWUocGF0aCkge1xyXG4gICAgICAgIHZhbGlkYXRlU3RyaW5nKHBhdGgsICdwYXRoJyk7XHJcbiAgICAgICAgY29uc3QgbGVuID0gcGF0aC5sZW5ndGg7XHJcbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJy4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcm9vdEVuZCA9IC0xO1xyXG4gICAgICAgIGxldCBvZmZzZXQgPSAwO1xyXG4gICAgICAgIGNvbnN0IGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoMCk7XHJcbiAgICAgICAgaWYgKGxlbiA9PT0gMSkge1xyXG4gICAgICAgICAgICAvLyBgcGF0aGAgY29udGFpbnMganVzdCBhIHBhdGggc2VwYXJhdG9yLCBleGl0IGVhcmx5IHRvIGF2b2lkXHJcbiAgICAgICAgICAgIC8vIHVubmVjZXNzYXJ5IHdvcmsgb3IgYSBkb3QuXHJcbiAgICAgICAgICAgIHJldHVybiBpc1BhdGhTZXBhcmF0b3IoY29kZSkgPyBwYXRoIDogJy4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUcnkgdG8gbWF0Y2ggYSByb290XHJcbiAgICAgICAgaWYgKGlzUGF0aFNlcGFyYXRvcihjb2RlKSkge1xyXG4gICAgICAgICAgICAvLyBQb3NzaWJsZSBVTkMgcm9vdFxyXG4gICAgICAgICAgICByb290RW5kID0gb2Zmc2V0ID0gMTtcclxuICAgICAgICAgICAgaWYgKGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoMSkpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBNYXRjaGVkIGRvdWJsZSBwYXRoIHNlcGFyYXRvciBhdCBiZWdpbm5pbmdcclxuICAgICAgICAgICAgICAgIGxldCBqID0gMjtcclxuICAgICAgICAgICAgICAgIGxldCBsYXN0ID0gajtcclxuICAgICAgICAgICAgICAgIC8vIE1hdGNoIDEgb3IgbW9yZSBub24tcGF0aCBzZXBhcmF0b3JzXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoaiA8IGxlbiAmJiAhaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdChqKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBqKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaiA8IGxlbiAmJiBqICE9PSBsYXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2hlZCFcclxuICAgICAgICAgICAgICAgICAgICBsYXN0ID0gajtcclxuICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaCAxIG9yIG1vcmUgcGF0aCBzZXBhcmF0b3JzXHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGogPCBsZW4gJiYgaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdChqKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaisrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaiA8IGxlbiAmJiBqICE9PSBsYXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoZWQhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaCAxIG9yIG1vcmUgbm9uLXBhdGggc2VwYXJhdG9yc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaiA8IGxlbiAmJiAhaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdChqKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGorKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaiA9PT0gbGVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBtYXRjaGVkIGEgVU5DIHJvb3Qgb25seVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGogIT09IGxhc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG1hdGNoZWQgYSBVTkMgcm9vdCB3aXRoIGxlZnRvdmVyc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT2Zmc2V0IGJ5IDEgdG8gaW5jbHVkZSB0aGUgc2VwYXJhdG9yIGFmdGVyIHRoZSBVTkMgcm9vdCB0b1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJlYXQgaXQgYXMgYSBcIm5vcm1hbCByb290XCIgb24gdG9wIG9mIGEgKFVOQykgcm9vdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdEVuZCA9IG9mZnNldCA9IGogKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFBvc3NpYmxlIGRldmljZSByb290XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlzV2luZG93c0RldmljZVJvb3QoY29kZSkgJiYgcGF0aC5jaGFyQ29kZUF0KDEpID09PSBDSEFSX0NPTE9OKSB7XHJcbiAgICAgICAgICAgIHJvb3RFbmQgPSBsZW4gPiAyICYmIGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoMikpID8gMyA6IDI7XHJcbiAgICAgICAgICAgIG9mZnNldCA9IHJvb3RFbmQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBlbmQgPSAtMTtcclxuICAgICAgICBsZXQgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcclxuICAgICAgICBmb3IgKGxldCBpID0gbGVuIC0gMTsgaSA+PSBvZmZzZXQ7IC0taSkge1xyXG4gICAgICAgICAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdChpKSkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gaTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yXHJcbiAgICAgICAgICAgICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZW5kID09PSAtMSkge1xyXG4gICAgICAgICAgICBpZiAocm9vdEVuZCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnLic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZW5kID0gcm9vdEVuZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhdGguc2xpY2UoMCwgZW5kKTtcclxuICAgIH0sXHJcbiAgICBiYXNlbmFtZShwYXRoLCBleHQpIHtcclxuICAgICAgICBpZiAoZXh0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdmFsaWRhdGVTdHJpbmcoZXh0LCAnZXh0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhbGlkYXRlU3RyaW5nKHBhdGgsICdwYXRoJyk7XHJcbiAgICAgICAgbGV0IHN0YXJ0ID0gMDtcclxuICAgICAgICBsZXQgZW5kID0gLTE7XHJcbiAgICAgICAgbGV0IG1hdGNoZWRTbGFzaCA9IHRydWU7XHJcbiAgICAgICAgbGV0IGk7XHJcbiAgICAgICAgLy8gQ2hlY2sgZm9yIGEgZHJpdmUgbGV0dGVyIHByZWZpeCBzbyBhcyBub3QgdG8gbWlzdGFrZSB0aGUgZm9sbG93aW5nXHJcbiAgICAgICAgLy8gcGF0aCBzZXBhcmF0b3IgYXMgYW4gZXh0cmEgc2VwYXJhdG9yIGF0IHRoZSBlbmQgb2YgdGhlIHBhdGggdGhhdCBjYW4gYmVcclxuICAgICAgICAvLyBkaXNyZWdhcmRlZFxyXG4gICAgICAgIGlmIChwYXRoLmxlbmd0aCA+PSAyICYmXHJcbiAgICAgICAgICAgIGlzV2luZG93c0RldmljZVJvb3QocGF0aC5jaGFyQ29kZUF0KDApKSAmJlxyXG4gICAgICAgICAgICBwYXRoLmNoYXJDb2RlQXQoMSkgPT09IENIQVJfQ09MT04pIHtcclxuICAgICAgICAgICAgc3RhcnQgPSAyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZXh0ICE9PSB1bmRlZmluZWQgJiYgZXh0Lmxlbmd0aCA+IDAgJiYgZXh0Lmxlbmd0aCA8PSBwYXRoLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBpZiAoZXh0ID09PSBwYXRoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IGV4dElkeCA9IGV4dC5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICBsZXQgZmlyc3ROb25TbGFzaEVuZCA9IC0xO1xyXG4gICAgICAgICAgICBmb3IgKGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gc3RhcnQ7IC0taSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29kZSA9IHBhdGguY2hhckNvZGVBdChpKTtcclxuICAgICAgICAgICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IoY29kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSByZWFjaGVkIGEgcGF0aCBzZXBhcmF0b3IgdGhhdCB3YXMgbm90IHBhcnQgb2YgYSBzZXQgb2YgcGF0aFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdE5vblNsYXNoRW5kID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgcmVtZW1iZXIgdGhpcyBpbmRleCBpbiBjYXNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgaXQgaWYgdGhlIGV4dGVuc2lvbiBlbmRzIHVwIG5vdCBtYXRjaGluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3ROb25TbGFzaEVuZCA9IGkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXh0SWR4ID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJ5IHRvIG1hdGNoIHRoZSBleHBsaWNpdCBleHRlbnNpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvZGUgPT09IGV4dC5jaGFyQ29kZUF0KGV4dElkeCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgtLWV4dElkeCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBtYXRjaGVkIHRoZSBleHRlbnNpb24sIHNvIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91ciBwYXRoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4dGVuc2lvbiBkb2VzIG5vdCBtYXRjaCwgc28gb3VyIHJlc3VsdCBpcyB0aGUgZW50aXJlIHBhdGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0SWR4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSBmaXJzdE5vblNsYXNoRW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzdGFydCA9PT0gZW5kKSB7XHJcbiAgICAgICAgICAgICAgICBlbmQgPSBmaXJzdE5vblNsYXNoRW5kO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGVuZCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGVuZCA9IHBhdGgubGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBwYXRoLnNsaWNlKHN0YXJ0LCBlbmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gc3RhcnQ7IC0taSkge1xyXG4gICAgICAgICAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdChpKSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXHJcbiAgICAgICAgICAgICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3dcclxuICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChlbmQgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyXHJcbiAgICAgICAgICAgICAgICAvLyBwYXRoIGNvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBlbmQgPSBpICsgMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZW5kID09PSAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXRoLnNsaWNlKHN0YXJ0LCBlbmQpO1xyXG4gICAgfSxcclxuICAgIGV4dG5hbWUocGF0aCkge1xyXG4gICAgICAgIHZhbGlkYXRlU3RyaW5nKHBhdGgsICdwYXRoJyk7XHJcbiAgICAgICAgbGV0IHN0YXJ0ID0gMDtcclxuICAgICAgICBsZXQgc3RhcnREb3QgPSAtMTtcclxuICAgICAgICBsZXQgc3RhcnRQYXJ0ID0gMDtcclxuICAgICAgICBsZXQgZW5kID0gLTE7XHJcbiAgICAgICAgbGV0IG1hdGNoZWRTbGFzaCA9IHRydWU7XHJcbiAgICAgICAgLy8gVHJhY2sgdGhlIHN0YXRlIG9mIGNoYXJhY3RlcnMgKGlmIGFueSkgd2Ugc2VlIGJlZm9yZSBvdXIgZmlyc3QgZG90IGFuZFxyXG4gICAgICAgIC8vIGFmdGVyIGFueSBwYXRoIHNlcGFyYXRvciB3ZSBmaW5kXHJcbiAgICAgICAgbGV0IHByZURvdFN0YXRlID0gMDtcclxuICAgICAgICAvLyBDaGVjayBmb3IgYSBkcml2ZSBsZXR0ZXIgcHJlZml4IHNvIGFzIG5vdCB0byBtaXN0YWtlIHRoZSBmb2xsb3dpbmdcclxuICAgICAgICAvLyBwYXRoIHNlcGFyYXRvciBhcyBhbiBleHRyYSBzZXBhcmF0b3IgYXQgdGhlIGVuZCBvZiB0aGUgcGF0aCB0aGF0IGNhbiBiZVxyXG4gICAgICAgIC8vIGRpc3JlZ2FyZGVkXHJcbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoID49IDIgJiZcclxuICAgICAgICAgICAgcGF0aC5jaGFyQ29kZUF0KDEpID09PSBDSEFSX0NPTE9OICYmXHJcbiAgICAgICAgICAgIGlzV2luZG93c0RldmljZVJvb3QocGF0aC5jaGFyQ29kZUF0KDApKSkge1xyXG4gICAgICAgICAgICBzdGFydCA9IHN0YXJ0UGFydCA9IDI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gc3RhcnQ7IC0taSkge1xyXG4gICAgICAgICAgICBjb25zdCBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgICAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKGNvZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSByZWFjaGVkIGEgcGF0aCBzZXBhcmF0b3IgdGhhdCB3YXMgbm90IHBhcnQgb2YgYSBzZXQgb2YgcGF0aFxyXG4gICAgICAgICAgICAgICAgLy8gc2VwYXJhdG9ycyBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIHN0b3Agbm93XHJcbiAgICAgICAgICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0UGFydCA9IGkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGVuZCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yLCBtYXJrIHRoaXMgYXMgdGhlIGVuZCBvZiBvdXJcclxuICAgICAgICAgICAgICAgIC8vIGV4dGVuc2lvblxyXG4gICAgICAgICAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBlbmQgPSBpICsgMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY29kZSA9PT0gQ0hBUl9ET1QpIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgb3VyIGZpcnN0IGRvdCwgbWFyayBpdCBhcyB0aGUgc3RhcnQgb2Ygb3VyIGV4dGVuc2lvblxyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0RG90ID0gaTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByZURvdFN0YXRlICE9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJlRG90U3RhdGUgPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHN0YXJ0RG90ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBhbmQgbm9uLXBhdGggc2VwYXJhdG9yIGJlZm9yZSBvdXIgZG90LCBzbyB3ZSBzaG91bGRcclxuICAgICAgICAgICAgICAgIC8vIGhhdmUgYSBnb29kIGNoYW5jZSBhdCBoYXZpbmcgYSBub24tZW1wdHkgZXh0ZW5zaW9uXHJcbiAgICAgICAgICAgICAgICBwcmVEb3RTdGF0ZSA9IC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzdGFydERvdCA9PT0gLTEgfHxcclxuICAgICAgICAgICAgZW5kID09PSAtMSB8fFxyXG4gICAgICAgICAgICAvLyBXZSBzYXcgYSBub24tZG90IGNoYXJhY3RlciBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIGRvdFxyXG4gICAgICAgICAgICBwcmVEb3RTdGF0ZSA9PT0gMCB8fFxyXG4gICAgICAgICAgICAvLyBUaGUgKHJpZ2h0LW1vc3QpIHRyaW1tZWQgcGF0aCBjb21wb25lbnQgaXMgZXhhY3RseSAnLi4nXHJcbiAgICAgICAgICAgIChwcmVEb3RTdGF0ZSA9PT0gMSAmJlxyXG4gICAgICAgICAgICAgICAgc3RhcnREb3QgPT09IGVuZCAtIDEgJiZcclxuICAgICAgICAgICAgICAgIHN0YXJ0RG90ID09PSBzdGFydFBhcnQgKyAxKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXRoLnNsaWNlKHN0YXJ0RG90LCBlbmQpO1xyXG4gICAgfSxcclxuICAgIGZvcm1hdDogX2Zvcm1hdC5iaW5kKG51bGwsICdcXFxcJyksXHJcbiAgICBwYXJzZShwYXRoKSB7XHJcbiAgICAgICAgdmFsaWRhdGVTdHJpbmcocGF0aCwgJ3BhdGgnKTtcclxuICAgICAgICBjb25zdCByZXQgPSB7IHJvb3Q6ICcnLCBkaXI6ICcnLCBiYXNlOiAnJywgZXh0OiAnJywgbmFtZTogJycgfTtcclxuICAgICAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbGVuID0gcGF0aC5sZW5ndGg7XHJcbiAgICAgICAgbGV0IHJvb3RFbmQgPSAwO1xyXG4gICAgICAgIGxldCBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KDApO1xyXG4gICAgICAgIGlmIChsZW4gPT09IDEpIHtcclxuICAgICAgICAgICAgaWYgKGlzUGF0aFNlcGFyYXRvcihjb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gYHBhdGhgIGNvbnRhaW5zIGp1c3QgYSBwYXRoIHNlcGFyYXRvciwgZXhpdCBlYXJseSB0byBhdm9pZFxyXG4gICAgICAgICAgICAgICAgLy8gdW5uZWNlc3Nhcnkgd29ya1xyXG4gICAgICAgICAgICAgICAgcmV0LnJvb3QgPSByZXQuZGlyID0gcGF0aDtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0LmJhc2UgPSByZXQubmFtZSA9IHBhdGg7XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFRyeSB0byBtYXRjaCBhIHJvb3RcclxuICAgICAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKGNvZGUpKSB7XHJcbiAgICAgICAgICAgIC8vIFBvc3NpYmxlIFVOQyByb290XHJcbiAgICAgICAgICAgIHJvb3RFbmQgPSAxO1xyXG4gICAgICAgICAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdCgxKSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIE1hdGNoZWQgZG91YmxlIHBhdGggc2VwYXJhdG9yIGF0IGJlZ2lubmluZ1xyXG4gICAgICAgICAgICAgICAgbGV0IGogPSAyO1xyXG4gICAgICAgICAgICAgICAgbGV0IGxhc3QgPSBqO1xyXG4gICAgICAgICAgICAgICAgLy8gTWF0Y2ggMSBvciBtb3JlIG5vbi1wYXRoIHNlcGFyYXRvcnNcclxuICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgbGVuICYmICFpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KGopKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGorKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChqIDwgbGVuICYmIGogIT09IGxhc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaGVkIVxyXG4gICAgICAgICAgICAgICAgICAgIGxhc3QgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoIDEgb3IgbW9yZSBwYXRoIHNlcGFyYXRvcnNcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaiA8IGxlbiAmJiBpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KGopKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBqKys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChqIDwgbGVuICYmIGogIT09IGxhc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2hlZCFcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoIDEgb3IgbW9yZSBub24tcGF0aCBzZXBhcmF0b3JzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgbGVuICYmICFpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KGopKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaisrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqID09PSBsZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG1hdGNoZWQgYSBVTkMgcm9vdCBvbmx5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290RW5kID0gajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChqICE9PSBsYXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBtYXRjaGVkIGEgVU5DIHJvb3Qgd2l0aCBsZWZ0b3ZlcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RFbmQgPSBqICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpc1dpbmRvd3NEZXZpY2VSb290KGNvZGUpICYmIHBhdGguY2hhckNvZGVBdCgxKSA9PT0gQ0hBUl9DT0xPTikge1xyXG4gICAgICAgICAgICAvLyBQb3NzaWJsZSBkZXZpY2Ugcm9vdFxyXG4gICAgICAgICAgICBpZiAobGVuIDw9IDIpIHtcclxuICAgICAgICAgICAgICAgIC8vIGBwYXRoYCBjb250YWlucyBqdXN0IGEgZHJpdmUgcm9vdCwgZXhpdCBlYXJseSB0byBhdm9pZFxyXG4gICAgICAgICAgICAgICAgLy8gdW5uZWNlc3Nhcnkgd29ya1xyXG4gICAgICAgICAgICAgICAgcmV0LnJvb3QgPSByZXQuZGlyID0gcGF0aDtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcm9vdEVuZCA9IDI7XHJcbiAgICAgICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KDIpKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGxlbiA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGBwYXRoYCBjb250YWlucyBqdXN0IGEgZHJpdmUgcm9vdCwgZXhpdCBlYXJseSB0byBhdm9pZFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHVubmVjZXNzYXJ5IHdvcmtcclxuICAgICAgICAgICAgICAgICAgICByZXQucm9vdCA9IHJldC5kaXIgPSBwYXRoO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByb290RW5kID0gMztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocm9vdEVuZCA+IDApIHtcclxuICAgICAgICAgICAgcmV0LnJvb3QgPSBwYXRoLnNsaWNlKDAsIHJvb3RFbmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgc3RhcnREb3QgPSAtMTtcclxuICAgICAgICBsZXQgc3RhcnRQYXJ0ID0gcm9vdEVuZDtcclxuICAgICAgICBsZXQgZW5kID0gLTE7XHJcbiAgICAgICAgbGV0IG1hdGNoZWRTbGFzaCA9IHRydWU7XHJcbiAgICAgICAgbGV0IGkgPSBwYXRoLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgLy8gVHJhY2sgdGhlIHN0YXRlIG9mIGNoYXJhY3RlcnMgKGlmIGFueSkgd2Ugc2VlIGJlZm9yZSBvdXIgZmlyc3QgZG90IGFuZFxyXG4gICAgICAgIC8vIGFmdGVyIGFueSBwYXRoIHNlcGFyYXRvciB3ZSBmaW5kXHJcbiAgICAgICAgbGV0IHByZURvdFN0YXRlID0gMDtcclxuICAgICAgICAvLyBHZXQgbm9uLWRpciBpbmZvXHJcbiAgICAgICAgZm9yICg7IGkgPj0gcm9vdEVuZDsgLS1pKSB7XHJcbiAgICAgICAgICAgIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IoY29kZSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXHJcbiAgICAgICAgICAgICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3dcclxuICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRQYXJ0ID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZW5kID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxyXG4gICAgICAgICAgICAgICAgLy8gZXh0ZW5zaW9uXHJcbiAgICAgICAgICAgICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGVuZCA9IGkgKyAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjb2RlID09PSBDSEFSX0RPVCkge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBvdXIgZmlyc3QgZG90LCBtYXJrIGl0IGFzIHRoZSBzdGFydCBvZiBvdXIgZXh0ZW5zaW9uXHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnREb3QgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnREb3QgPSBpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocHJlRG90U3RhdGUgIT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmVEb3RTdGF0ZSA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc3RhcnREb3QgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBzYXcgYSBub24tZG90IGFuZCBub24tcGF0aCBzZXBhcmF0b3IgYmVmb3JlIG91ciBkb3QsIHNvIHdlIHNob3VsZFxyXG4gICAgICAgICAgICAgICAgLy8gaGF2ZSBhIGdvb2QgY2hhbmNlIGF0IGhhdmluZyBhIG5vbi1lbXB0eSBleHRlbnNpb25cclxuICAgICAgICAgICAgICAgIHByZURvdFN0YXRlID0gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGVuZCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSB8fFxyXG4gICAgICAgICAgICAgICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBjaGFyYWN0ZXIgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBkb3RcclxuICAgICAgICAgICAgICAgIHByZURvdFN0YXRlID09PSAwIHx8XHJcbiAgICAgICAgICAgICAgICAvLyBUaGUgKHJpZ2h0LW1vc3QpIHRyaW1tZWQgcGF0aCBjb21wb25lbnQgaXMgZXhhY3RseSAnLi4nXHJcbiAgICAgICAgICAgICAgICAocHJlRG90U3RhdGUgPT09IDEgJiZcclxuICAgICAgICAgICAgICAgICAgICBzdGFydERvdCA9PT0gZW5kIC0gMSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0RG90ID09PSBzdGFydFBhcnQgKyAxKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0LmJhc2UgPSByZXQubmFtZSA9IHBhdGguc2xpY2Uoc3RhcnRQYXJ0LCBlbmQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0Lm5hbWUgPSBwYXRoLnNsaWNlKHN0YXJ0UGFydCwgc3RhcnREb3QpO1xyXG4gICAgICAgICAgICAgICAgcmV0LmJhc2UgPSBwYXRoLnNsaWNlKHN0YXJ0UGFydCwgZW5kKTtcclxuICAgICAgICAgICAgICAgIHJldC5leHQgPSBwYXRoLnNsaWNlKHN0YXJ0RG90LCBlbmQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIElmIHRoZSBkaXJlY3RvcnkgaXMgdGhlIHJvb3QsIHVzZSB0aGUgZW50aXJlIHJvb3QgYXMgdGhlIGBkaXJgIGluY2x1ZGluZ1xyXG4gICAgICAgIC8vIHRoZSB0cmFpbGluZyBzbGFzaCBpZiBhbnkgKGBDOlxcYWJjYCAtPiBgQzpcXGApLiBPdGhlcndpc2UsIHN0cmlwIG91dCB0aGVcclxuICAgICAgICAvLyB0cmFpbGluZyBzbGFzaCAoYEM6XFxhYmNcXGRlZmAgLT4gYEM6XFxhYmNgKS5cclxuICAgICAgICBpZiAoc3RhcnRQYXJ0ID4gMCAmJiBzdGFydFBhcnQgIT09IHJvb3RFbmQpIHtcclxuICAgICAgICAgICAgcmV0LmRpciA9IHBhdGguc2xpY2UoMCwgc3RhcnRQYXJ0IC0gMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXQuZGlyID0gcmV0LnJvb3Q7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9LFxyXG4gICAgc2VwOiAnXFxcXCcsXHJcbiAgICBkZWxpbWl0ZXI6ICc7JyxcclxuICAgIHdpbjMyOiBudWxsLFxyXG4gICAgcG9zaXg6IG51bGxcclxufTtcclxuZXhwb3J0IGNvbnN0IHBvc2l4ID0ge1xyXG4gICAgLy8gcGF0aC5yZXNvbHZlKFtmcm9tIC4uLl0sIHRvKVxyXG4gICAgcmVzb2x2ZSguLi5wYXRoU2VnbWVudHMpIHtcclxuICAgICAgICBsZXQgcmVzb2x2ZWRQYXRoID0gJyc7XHJcbiAgICAgICAgbGV0IHJlc29sdmVkQWJzb2x1dGUgPSBmYWxzZTtcclxuICAgICAgICBmb3IgKGxldCBpID0gcGF0aFNlZ21lbnRzLmxlbmd0aCAtIDE7IGkgPj0gLTEgJiYgIXJlc29sdmVkQWJzb2x1dGU7IGktLSkge1xyXG4gICAgICAgICAgICBjb25zdCBwYXRoID0gaSA+PSAwID8gcGF0aFNlZ21lbnRzW2ldIDogcHJvY2Vzcy5jd2QoKTtcclxuICAgICAgICAgICAgdmFsaWRhdGVTdHJpbmcocGF0aCwgJ3BhdGgnKTtcclxuICAgICAgICAgICAgLy8gU2tpcCBlbXB0eSBlbnRyaWVzXHJcbiAgICAgICAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzb2x2ZWRQYXRoID0gYCR7cGF0aH0vJHtyZXNvbHZlZFBhdGh9YDtcclxuICAgICAgICAgICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IHBhdGguY2hhckNvZGVBdCgwKSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBdCB0aGlzIHBvaW50IHRoZSBwYXRoIHNob3VsZCBiZSByZXNvbHZlZCB0byBhIGZ1bGwgYWJzb2x1dGUgcGF0aCwgYnV0XHJcbiAgICAgICAgLy8gaGFuZGxlIHJlbGF0aXZlIHBhdGhzIHRvIGJlIHNhZmUgKG1pZ2h0IGhhcHBlbiB3aGVuIHByb2Nlc3MuY3dkKCkgZmFpbHMpXHJcbiAgICAgICAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXHJcbiAgICAgICAgcmVzb2x2ZWRQYXRoID0gbm9ybWFsaXplU3RyaW5nKHJlc29sdmVkUGF0aCwgIXJlc29sdmVkQWJzb2x1dGUsICcvJywgaXNQb3NpeFBhdGhTZXBhcmF0b3IpO1xyXG4gICAgICAgIGlmIChyZXNvbHZlZEFic29sdXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgLyR7cmVzb2x2ZWRQYXRofWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXNvbHZlZFBhdGgubGVuZ3RoID4gMCA/IHJlc29sdmVkUGF0aCA6ICcuJztcclxuICAgIH0sXHJcbiAgICBub3JtYWxpemUocGF0aCkge1xyXG4gICAgICAgIHZhbGlkYXRlU3RyaW5nKHBhdGgsICdwYXRoJyk7XHJcbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnLic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGlzQWJzb2x1dGUgPSBwYXRoLmNoYXJDb2RlQXQoMCkgPT09IENIQVJfRk9SV0FSRF9TTEFTSDtcclxuICAgICAgICBjb25zdCB0cmFpbGluZ1NlcGFyYXRvciA9IHBhdGguY2hhckNvZGVBdChwYXRoLmxlbmd0aCAtIDEpID09PSBDSEFSX0ZPUldBUkRfU0xBU0g7XHJcbiAgICAgICAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXHJcbiAgICAgICAgcGF0aCA9IG5vcm1hbGl6ZVN0cmluZyhwYXRoLCAhaXNBYnNvbHV0ZSwgJy8nLCBpc1Bvc2l4UGF0aFNlcGFyYXRvcik7XHJcbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGlmIChpc0Fic29sdXRlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJy8nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cmFpbGluZ1NlcGFyYXRvciA/ICcuLycgOiAnLic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0cmFpbGluZ1NlcGFyYXRvcikge1xyXG4gICAgICAgICAgICBwYXRoICs9ICcvJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGlzQWJzb2x1dGUgPyBgLyR7cGF0aH1gIDogcGF0aDtcclxuICAgIH0sXHJcbiAgICBpc0Fic29sdXRlKHBhdGgpIHtcclxuICAgICAgICB2YWxpZGF0ZVN0cmluZyhwYXRoLCAncGF0aCcpO1xyXG4gICAgICAgIHJldHVybiBwYXRoLmxlbmd0aCA+IDAgJiYgcGF0aC5jaGFyQ29kZUF0KDApID09PSBDSEFSX0ZPUldBUkRfU0xBU0g7XHJcbiAgICB9LFxyXG4gICAgam9pbiguLi5wYXRocykge1xyXG4gICAgICAgIGlmIChwYXRocy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuICcuJztcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGpvaW5lZDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdGhzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFyZyA9IHBhdGhzW2ldO1xyXG4gICAgICAgICAgICB2YWxpZGF0ZVN0cmluZyhhcmcsICdwYXRoJyk7XHJcbiAgICAgICAgICAgIGlmIChhcmcubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGpvaW5lZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgam9pbmVkID0gYXJnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgam9pbmVkICs9IGAvJHthcmd9YDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoam9pbmVkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcuJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBvc2l4Lm5vcm1hbGl6ZShqb2luZWQpO1xyXG4gICAgfSxcclxuICAgIHJlbGF0aXZlKGZyb20sIHRvKSB7XHJcbiAgICAgICAgdmFsaWRhdGVTdHJpbmcoZnJvbSwgJ2Zyb20nKTtcclxuICAgICAgICB2YWxpZGF0ZVN0cmluZyh0bywgJ3RvJyk7XHJcbiAgICAgICAgaWYgKGZyb20gPT09IHRvKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVHJpbSBsZWFkaW5nIGZvcndhcmQgc2xhc2hlcy5cclxuICAgICAgICBmcm9tID0gcG9zaXgucmVzb2x2ZShmcm9tKTtcclxuICAgICAgICB0byA9IHBvc2l4LnJlc29sdmUodG8pO1xyXG4gICAgICAgIGlmIChmcm9tID09PSB0bykge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGZyb21TdGFydCA9IDE7XHJcbiAgICAgICAgY29uc3QgZnJvbUVuZCA9IGZyb20ubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IGZyb21MZW4gPSBmcm9tRW5kIC0gZnJvbVN0YXJ0O1xyXG4gICAgICAgIGNvbnN0IHRvU3RhcnQgPSAxO1xyXG4gICAgICAgIGNvbnN0IHRvTGVuID0gdG8ubGVuZ3RoIC0gdG9TdGFydDtcclxuICAgICAgICAvLyBDb21wYXJlIHBhdGhzIHRvIGZpbmQgdGhlIGxvbmdlc3QgY29tbW9uIHBhdGggZnJvbSByb290XHJcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gKGZyb21MZW4gPCB0b0xlbiA/IGZyb21MZW4gOiB0b0xlbik7XHJcbiAgICAgICAgbGV0IGxhc3RDb21tb25TZXAgPSAtMTtcclxuICAgICAgICBsZXQgaSA9IDA7XHJcbiAgICAgICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBmcm9tQ29kZSA9IGZyb20uY2hhckNvZGVBdChmcm9tU3RhcnQgKyBpKTtcclxuICAgICAgICAgICAgaWYgKGZyb21Db2RlICE9PSB0by5jaGFyQ29kZUF0KHRvU3RhcnQgKyBpKSkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZnJvbUNvZGUgPT09IENIQVJfRk9SV0FSRF9TTEFTSCkge1xyXG4gICAgICAgICAgICAgICAgbGFzdENvbW1vblNlcCA9IGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGkgPT09IGxlbmd0aCkge1xyXG4gICAgICAgICAgICBpZiAodG9MZW4gPiBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0by5jaGFyQ29kZUF0KHRvU3RhcnQgKyBpKSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZ2V0IGhlcmUgaWYgYGZyb21gIGlzIHRoZSBleGFjdCBiYXNlIHBhdGggZm9yIGB0b2AuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGV4YW1wbGU6IGZyb209Jy9mb28vYmFyJzsgdG89Jy9mb28vYmFyL2JheidcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG8uc2xpY2UodG9TdGFydCArIGkgKyAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZ2V0IGhlcmUgaWYgYGZyb21gIGlzIHRoZSByb290XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGV4YW1wbGU6IGZyb209Jy8nOyB0bz0nL2ZvbydcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG8uc2xpY2UodG9TdGFydCArIGkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGZyb21MZW4gPiBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChmcm9tLmNoYXJDb2RlQXQoZnJvbVN0YXJ0ICsgaSkgPT09IENIQVJfRk9SV0FSRF9TTEFTSCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGdldCBoZXJlIGlmIGB0b2AgaXMgdGhlIGV4YWN0IGJhc2UgcGF0aCBmb3IgYGZyb21gLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBleGFtcGxlOiBmcm9tPScvZm9vL2Jhci9iYXonOyB0bz0nL2Zvby9iYXInXHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdENvbW1vblNlcCA9IGk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZ2V0IGhlcmUgaWYgYHRvYCBpcyB0aGUgcm9vdC5cclxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZXhhbXBsZTogZnJvbT0nL2Zvby9iYXInOyB0bz0nLydcclxuICAgICAgICAgICAgICAgICAgICBsYXN0Q29tbW9uU2VwID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgb3V0ID0gJyc7XHJcbiAgICAgICAgLy8gR2VuZXJhdGUgdGhlIHJlbGF0aXZlIHBhdGggYmFzZWQgb24gdGhlIHBhdGggZGlmZmVyZW5jZSBiZXR3ZWVuIGB0b2BcclxuICAgICAgICAvLyBhbmQgYGZyb21gLlxyXG4gICAgICAgIGZvciAoaSA9IGZyb21TdGFydCArIGxhc3RDb21tb25TZXAgKyAxOyBpIDw9IGZyb21FbmQ7ICsraSkge1xyXG4gICAgICAgICAgICBpZiAoaSA9PT0gZnJvbUVuZCB8fCBmcm9tLmNoYXJDb2RlQXQoaSkgPT09IENIQVJfRk9SV0FSRF9TTEFTSCkge1xyXG4gICAgICAgICAgICAgICAgb3V0ICs9IG91dC5sZW5ndGggPT09IDAgPyAnLi4nIDogJy8uLic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gTGFzdGx5LCBhcHBlbmQgdGhlIHJlc3Qgb2YgdGhlIGRlc3RpbmF0aW9uIChgdG9gKSBwYXRoIHRoYXQgY29tZXMgYWZ0ZXJcclxuICAgICAgICAvLyB0aGUgY29tbW9uIHBhdGggcGFydHMuXHJcbiAgICAgICAgcmV0dXJuIGAke291dH0ke3RvLnNsaWNlKHRvU3RhcnQgKyBsYXN0Q29tbW9uU2VwKX1gO1xyXG4gICAgfSxcclxuICAgIHRvTmFtZXNwYWNlZFBhdGgocGF0aCkge1xyXG4gICAgICAgIC8vIE5vbi1vcCBvbiBwb3NpeCBzeXN0ZW1zXHJcbiAgICAgICAgcmV0dXJuIHBhdGg7XHJcbiAgICB9LFxyXG4gICAgZGlybmFtZShwYXRoKSB7XHJcbiAgICAgICAgdmFsaWRhdGVTdHJpbmcocGF0aCwgJ3BhdGgnKTtcclxuICAgICAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuICcuJztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaGFzUm9vdCA9IHBhdGguY2hhckNvZGVBdCgwKSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIO1xyXG4gICAgICAgIGxldCBlbmQgPSAtMTtcclxuICAgICAgICBsZXQgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcclxuICAgICAgICBmb3IgKGxldCBpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDE7IC0taSkge1xyXG4gICAgICAgICAgICBpZiAocGF0aC5jaGFyQ29kZUF0KGkpID09PSBDSEFSX0ZPUldBUkRfU0xBU0gpIHtcclxuICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gaTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yXHJcbiAgICAgICAgICAgICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZW5kID09PSAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gaGFzUm9vdCA/ICcvJyA6ICcuJztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGhhc1Jvb3QgJiYgZW5kID09PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnLy8nO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGF0aC5zbGljZSgwLCBlbmQpO1xyXG4gICAgfSxcclxuICAgIGJhc2VuYW1lKHBhdGgsIGV4dCkge1xyXG4gICAgICAgIGlmIChleHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB2YWxpZGF0ZVN0cmluZyhleHQsICdleHQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFsaWRhdGVTdHJpbmcocGF0aCwgJ3BhdGgnKTtcclxuICAgICAgICBsZXQgc3RhcnQgPSAwO1xyXG4gICAgICAgIGxldCBlbmQgPSAtMTtcclxuICAgICAgICBsZXQgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcclxuICAgICAgICBsZXQgaTtcclxuICAgICAgICBpZiAoZXh0ICE9PSB1bmRlZmluZWQgJiYgZXh0Lmxlbmd0aCA+IDAgJiYgZXh0Lmxlbmd0aCA8PSBwYXRoLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBpZiAoZXh0ID09PSBwYXRoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IGV4dElkeCA9IGV4dC5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICBsZXQgZmlyc3ROb25TbGFzaEVuZCA9IC0xO1xyXG4gICAgICAgICAgICBmb3IgKGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfRk9SV0FSRF9TTEFTSCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2VwYXJhdG9ycyBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIHN0b3Agbm93XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpcnN0Tm9uU2xhc2hFbmQgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yLCByZW1lbWJlciB0aGlzIGluZGV4IGluIGNhc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgbmVlZCBpdCBpZiB0aGUgZXh0ZW5zaW9uIGVuZHMgdXAgbm90IG1hdGNoaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdE5vblNsYXNoRW5kID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChleHRJZHggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUcnkgdG8gbWF0Y2ggdGhlIGV4cGxpY2l0IGV4dGVuc2lvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSA9PT0gZXh0LmNoYXJDb2RlQXQoZXh0SWR4KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC0tZXh0SWR4ID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG1hdGNoZWQgdGhlIGV4dGVuc2lvbiwgc28gbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyIHBhdGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXh0ZW5zaW9uIGRvZXMgbm90IG1hdGNoLCBzbyBvdXIgcmVzdWx0IGlzIHRoZSBlbnRpcmUgcGF0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRJZHggPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IGZpcnN0Tm9uU2xhc2hFbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN0YXJ0ID09PSBlbmQpIHtcclxuICAgICAgICAgICAgICAgIGVuZCA9IGZpcnN0Tm9uU2xhc2hFbmQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZW5kID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgZW5kID0gcGF0aC5sZW5ndGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHBhdGguc2xpY2Uoc3RhcnQsIGVuZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcclxuICAgICAgICAgICAgaWYgKHBhdGguY2hhckNvZGVBdChpKSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSByZWFjaGVkIGEgcGF0aCBzZXBhcmF0b3IgdGhhdCB3YXMgbm90IHBhcnQgb2YgYSBzZXQgb2YgcGF0aFxyXG4gICAgICAgICAgICAgICAgLy8gc2VwYXJhdG9ycyBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIHN0b3Agbm93XHJcbiAgICAgICAgICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZW5kID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxyXG4gICAgICAgICAgICAgICAgLy8gcGF0aCBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZW5kID0gaSArIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGVuZCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGF0aC5zbGljZShzdGFydCwgZW5kKTtcclxuICAgIH0sXHJcbiAgICBleHRuYW1lKHBhdGgpIHtcclxuICAgICAgICB2YWxpZGF0ZVN0cmluZyhwYXRoLCAncGF0aCcpO1xyXG4gICAgICAgIGxldCBzdGFydERvdCA9IC0xO1xyXG4gICAgICAgIGxldCBzdGFydFBhcnQgPSAwO1xyXG4gICAgICAgIGxldCBlbmQgPSAtMTtcclxuICAgICAgICBsZXQgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcclxuICAgICAgICAvLyBUcmFjayB0aGUgc3RhdGUgb2YgY2hhcmFjdGVycyAoaWYgYW55KSB3ZSBzZWUgYmVmb3JlIG91ciBmaXJzdCBkb3QgYW5kXHJcbiAgICAgICAgLy8gYWZ0ZXIgYW55IHBhdGggc2VwYXJhdG9yIHdlIGZpbmRcclxuICAgICAgICBsZXQgcHJlRG90U3RhdGUgPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgICAgIGlmIChjb2RlID09PSBDSEFSX0ZPUldBUkRfU0xBU0gpIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXHJcbiAgICAgICAgICAgICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3dcclxuICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRQYXJ0ID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZW5kID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxyXG4gICAgICAgICAgICAgICAgLy8gZXh0ZW5zaW9uXHJcbiAgICAgICAgICAgICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGVuZCA9IGkgKyAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjb2RlID09PSBDSEFSX0RPVCkge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBvdXIgZmlyc3QgZG90LCBtYXJrIGl0IGFzIHRoZSBzdGFydCBvZiBvdXIgZXh0ZW5zaW9uXHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnREb3QgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnREb3QgPSBpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocHJlRG90U3RhdGUgIT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmVEb3RTdGF0ZSA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc3RhcnREb3QgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBzYXcgYSBub24tZG90IGFuZCBub24tcGF0aCBzZXBhcmF0b3IgYmVmb3JlIG91ciBkb3QsIHNvIHdlIHNob3VsZFxyXG4gICAgICAgICAgICAgICAgLy8gaGF2ZSBhIGdvb2QgY2hhbmNlIGF0IGhhdmluZyBhIG5vbi1lbXB0eSBleHRlbnNpb25cclxuICAgICAgICAgICAgICAgIHByZURvdFN0YXRlID0gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSB8fFxyXG4gICAgICAgICAgICBlbmQgPT09IC0xIHx8XHJcbiAgICAgICAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgY2hhcmFjdGVyIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgZG90XHJcbiAgICAgICAgICAgIHByZURvdFN0YXRlID09PSAwIHx8XHJcbiAgICAgICAgICAgIC8vIFRoZSAocmlnaHQtbW9zdCkgdHJpbW1lZCBwYXRoIGNvbXBvbmVudCBpcyBleGFjdGx5ICcuLidcclxuICAgICAgICAgICAgKHByZURvdFN0YXRlID09PSAxICYmXHJcbiAgICAgICAgICAgICAgICBzdGFydERvdCA9PT0gZW5kIC0gMSAmJlxyXG4gICAgICAgICAgICAgICAgc3RhcnREb3QgPT09IHN0YXJ0UGFydCArIDEpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhdGguc2xpY2Uoc3RhcnREb3QsIGVuZCk7XHJcbiAgICB9LFxyXG4gICAgZm9ybWF0OiBfZm9ybWF0LmJpbmQobnVsbCwgJy8nKSxcclxuICAgIHBhcnNlKHBhdGgpIHtcclxuICAgICAgICB2YWxpZGF0ZVN0cmluZyhwYXRoLCAncGF0aCcpO1xyXG4gICAgICAgIGNvbnN0IHJldCA9IHsgcm9vdDogJycsIGRpcjogJycsIGJhc2U6ICcnLCBleHQ6ICcnLCBuYW1lOiAnJyB9O1xyXG4gICAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBpc0Fic29sdXRlID0gcGF0aC5jaGFyQ29kZUF0KDApID09PSBDSEFSX0ZPUldBUkRfU0xBU0g7XHJcbiAgICAgICAgbGV0IHN0YXJ0O1xyXG4gICAgICAgIGlmIChpc0Fic29sdXRlKSB7XHJcbiAgICAgICAgICAgIHJldC5yb290ID0gJy8nO1xyXG4gICAgICAgICAgICBzdGFydCA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzdGFydCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBzdGFydERvdCA9IC0xO1xyXG4gICAgICAgIGxldCBzdGFydFBhcnQgPSAwO1xyXG4gICAgICAgIGxldCBlbmQgPSAtMTtcclxuICAgICAgICBsZXQgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcclxuICAgICAgICBsZXQgaSA9IHBhdGgubGVuZ3RoIC0gMTtcclxuICAgICAgICAvLyBUcmFjayB0aGUgc3RhdGUgb2YgY2hhcmFjdGVycyAoaWYgYW55KSB3ZSBzZWUgYmVmb3JlIG91ciBmaXJzdCBkb3QgYW5kXHJcbiAgICAgICAgLy8gYWZ0ZXIgYW55IHBhdGggc2VwYXJhdG9yIHdlIGZpbmRcclxuICAgICAgICBsZXQgcHJlRG90U3RhdGUgPSAwO1xyXG4gICAgICAgIC8vIEdldCBub24tZGlyIGluZm9cclxuICAgICAgICBmb3IgKDsgaSA+PSBzdGFydDsgLS1pKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgICAgIGlmIChjb2RlID09PSBDSEFSX0ZPUldBUkRfU0xBU0gpIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXHJcbiAgICAgICAgICAgICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3dcclxuICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRQYXJ0ID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZW5kID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxyXG4gICAgICAgICAgICAgICAgLy8gZXh0ZW5zaW9uXHJcbiAgICAgICAgICAgICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGVuZCA9IGkgKyAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjb2RlID09PSBDSEFSX0RPVCkge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBvdXIgZmlyc3QgZG90LCBtYXJrIGl0IGFzIHRoZSBzdGFydCBvZiBvdXIgZXh0ZW5zaW9uXHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnREb3QgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnREb3QgPSBpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocHJlRG90U3RhdGUgIT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmVEb3RTdGF0ZSA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc3RhcnREb3QgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBzYXcgYSBub24tZG90IGFuZCBub24tcGF0aCBzZXBhcmF0b3IgYmVmb3JlIG91ciBkb3QsIHNvIHdlIHNob3VsZFxyXG4gICAgICAgICAgICAgICAgLy8gaGF2ZSBhIGdvb2QgY2hhbmNlIGF0IGhhdmluZyBhIG5vbi1lbXB0eSBleHRlbnNpb25cclxuICAgICAgICAgICAgICAgIHByZURvdFN0YXRlID0gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGVuZCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBzdGFydFBhcnQgPT09IDAgJiYgaXNBYnNvbHV0ZSA/IDEgOiBzdGFydFBhcnQ7XHJcbiAgICAgICAgICAgIGlmIChzdGFydERvdCA9PT0gLTEgfHxcclxuICAgICAgICAgICAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgY2hhcmFjdGVyIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgZG90XHJcbiAgICAgICAgICAgICAgICBwcmVEb3RTdGF0ZSA9PT0gMCB8fFxyXG4gICAgICAgICAgICAgICAgLy8gVGhlIChyaWdodC1tb3N0KSB0cmltbWVkIHBhdGggY29tcG9uZW50IGlzIGV4YWN0bHkgJy4uJ1xyXG4gICAgICAgICAgICAgICAgKHByZURvdFN0YXRlID09PSAxICYmXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnREb3QgPT09IGVuZCAtIDEgJiZcclxuICAgICAgICAgICAgICAgICAgICBzdGFydERvdCA9PT0gc3RhcnRQYXJ0ICsgMSkpIHtcclxuICAgICAgICAgICAgICAgIHJldC5iYXNlID0gcmV0Lm5hbWUgPSBwYXRoLnNsaWNlKHN0YXJ0LCBlbmQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0Lm5hbWUgPSBwYXRoLnNsaWNlKHN0YXJ0LCBzdGFydERvdCk7XHJcbiAgICAgICAgICAgICAgICByZXQuYmFzZSA9IHBhdGguc2xpY2Uoc3RhcnQsIGVuZCk7XHJcbiAgICAgICAgICAgICAgICByZXQuZXh0ID0gcGF0aC5zbGljZShzdGFydERvdCwgZW5kKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc3RhcnRQYXJ0ID4gMCkge1xyXG4gICAgICAgICAgICByZXQuZGlyID0gcGF0aC5zbGljZSgwLCBzdGFydFBhcnQgLSAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaXNBYnNvbHV0ZSkge1xyXG4gICAgICAgICAgICByZXQuZGlyID0gJy8nO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfSxcclxuICAgIHNlcDogJy8nLFxyXG4gICAgZGVsaW1pdGVyOiAnOicsXHJcbiAgICB3aW4zMjogbnVsbCxcclxuICAgIHBvc2l4OiBudWxsXHJcbn07XHJcbnBvc2l4LndpbjMyID0gd2luMzIud2luMzIgPSB3aW4zMjtcclxucG9zaXgucG9zaXggPSB3aW4zMi5wb3NpeCA9IHBvc2l4O1xyXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplID0gKHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicgPyB3aW4zMi5ub3JtYWxpemUgOiBwb3NpeC5ub3JtYWxpemUpO1xyXG5leHBvcnQgY29uc3QgcmVzb2x2ZSA9IChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInID8gd2luMzIucmVzb2x2ZSA6IHBvc2l4LnJlc29sdmUpO1xyXG5leHBvcnQgY29uc3QgcmVsYXRpdmUgPSAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJyA/IHdpbjMyLnJlbGF0aXZlIDogcG9zaXgucmVsYXRpdmUpO1xyXG5leHBvcnQgY29uc3QgZGlybmFtZSA9IChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInID8gd2luMzIuZGlybmFtZSA6IHBvc2l4LmRpcm5hbWUpO1xyXG5leHBvcnQgY29uc3QgYmFzZW5hbWUgPSAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJyA/IHdpbjMyLmJhc2VuYW1lIDogcG9zaXguYmFzZW5hbWUpO1xyXG5leHBvcnQgY29uc3QgZXh0bmFtZSA9IChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInID8gd2luMzIuZXh0bmFtZSA6IHBvc2l4LmV4dG5hbWUpO1xyXG5leHBvcnQgY29uc3Qgc2VwID0gKHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicgPyB3aW4zMi5zZXAgOiBwb3NpeC5zZXApO1xyXG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuaW1wb3J0IHsgaXNXaW5kb3dzIH0gZnJvbSAnLi9wbGF0Zm9ybS5qcyc7XHJcbmltcG9ydCAqIGFzIHBhdGhzIGZyb20gJy4vcGF0aC5qcyc7XHJcbmNvbnN0IF9zY2hlbWVQYXR0ZXJuID0gL15cXHdbXFx3XFxkKy4tXSokLztcclxuY29uc3QgX3NpbmdsZVNsYXNoU3RhcnQgPSAvXlxcLy87XHJcbmNvbnN0IF9kb3VibGVTbGFzaFN0YXJ0ID0gL15cXC9cXC8vO1xyXG5mdW5jdGlvbiBfdmFsaWRhdGVVcmkocmV0LCBfc3RyaWN0KSB7XHJcbiAgICAvLyBzY2hlbWUsIG11c3QgYmUgc2V0XHJcbiAgICBpZiAoIXJldC5zY2hlbWUgJiYgX3N0cmljdCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgW1VyaUVycm9yXTogU2NoZW1lIGlzIG1pc3Npbmc6IHtzY2hlbWU6IFwiXCIsIGF1dGhvcml0eTogXCIke3JldC5hdXRob3JpdHl9XCIsIHBhdGg6IFwiJHtyZXQucGF0aH1cIiwgcXVlcnk6IFwiJHtyZXQucXVlcnl9XCIsIGZyYWdtZW50OiBcIiR7cmV0LmZyYWdtZW50fVwifWApO1xyXG4gICAgfVxyXG4gICAgLy8gc2NoZW1lLCBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNzZWN0aW9uLTMuMVxyXG4gICAgLy8gQUxQSEEgKiggQUxQSEEgLyBESUdJVCAvIFwiK1wiIC8gXCItXCIgLyBcIi5cIiApXHJcbiAgICBpZiAocmV0LnNjaGVtZSAmJiAhX3NjaGVtZVBhdHRlcm4udGVzdChyZXQuc2NoZW1lKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignW1VyaUVycm9yXTogU2NoZW1lIGNvbnRhaW5zIGlsbGVnYWwgY2hhcmFjdGVycy4nKTtcclxuICAgIH1cclxuICAgIC8vIHBhdGgsIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjc2VjdGlvbi0zLjNcclxuICAgIC8vIElmIGEgVVJJIGNvbnRhaW5zIGFuIGF1dGhvcml0eSBjb21wb25lbnQsIHRoZW4gdGhlIHBhdGggY29tcG9uZW50XHJcbiAgICAvLyBtdXN0IGVpdGhlciBiZSBlbXB0eSBvciBiZWdpbiB3aXRoIGEgc2xhc2ggKFwiL1wiKSBjaGFyYWN0ZXIuICBJZiBhIFVSSVxyXG4gICAgLy8gZG9lcyBub3QgY29udGFpbiBhbiBhdXRob3JpdHkgY29tcG9uZW50LCB0aGVuIHRoZSBwYXRoIGNhbm5vdCBiZWdpblxyXG4gICAgLy8gd2l0aCB0d28gc2xhc2ggY2hhcmFjdGVycyAoXCIvL1wiKS5cclxuICAgIGlmIChyZXQucGF0aCkge1xyXG4gICAgICAgIGlmIChyZXQuYXV0aG9yaXR5KSB7XHJcbiAgICAgICAgICAgIGlmICghX3NpbmdsZVNsYXNoU3RhcnQudGVzdChyZXQucGF0aCkpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW1VyaUVycm9yXTogSWYgYSBVUkkgY29udGFpbnMgYW4gYXV0aG9yaXR5IGNvbXBvbmVudCwgdGhlbiB0aGUgcGF0aCBjb21wb25lbnQgbXVzdCBlaXRoZXIgYmUgZW1wdHkgb3IgYmVnaW4gd2l0aCBhIHNsYXNoIChcIi9cIikgY2hhcmFjdGVyJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChfZG91YmxlU2xhc2hTdGFydC50ZXN0KHJldC5wYXRoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbVXJpRXJyb3JdOiBJZiBhIFVSSSBkb2VzIG5vdCBjb250YWluIGFuIGF1dGhvcml0eSBjb21wb25lbnQsIHRoZW4gdGhlIHBhdGggY2Fubm90IGJlZ2luIHdpdGggdHdvIHNsYXNoIGNoYXJhY3RlcnMgKFwiLy9cIiknKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vLyBmb3IgYSB3aGlsZSB3ZSBhbGxvd2VkIHVyaXMgKndpdGhvdXQqIHNjaGVtZXMgYW5kIHRoaXMgaXMgdGhlIG1pZ3JhdGlvblxyXG4vLyBmb3IgdGhlbSwgZS5nLiBhbiB1cmkgd2l0aG91dCBzY2hlbWUgYW5kIHdpdGhvdXQgc3RyaWN0LW1vZGUgd2FybnMgYW5kIGZhbGxzXHJcbi8vIGJhY2sgdG8gdGhlIGZpbGUtc2NoZW1lLiB0aGF0IHNob3VsZCBjYXVzZSB0aGUgbGVhc3QgY2FybmFnZSBhbmQgc3RpbGwgYmUgYVxyXG4vLyBjbGVhciB3YXJuaW5nXHJcbmZ1bmN0aW9uIF9zY2hlbWVGaXgoc2NoZW1lLCBfc3RyaWN0KSB7XHJcbiAgICBpZiAoIXNjaGVtZSAmJiAhX3N0cmljdCkge1xyXG4gICAgICAgIHJldHVybiAnZmlsZSc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc2NoZW1lO1xyXG59XHJcbi8vIGltcGxlbWVudHMgYSBiaXQgb2YgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjc2VjdGlvbi01XHJcbmZ1bmN0aW9uIF9yZWZlcmVuY2VSZXNvbHV0aW9uKHNjaGVtZSwgcGF0aCkge1xyXG4gICAgLy8gdGhlIHNsYXNoLWNoYXJhY3RlciBpcyBvdXIgJ2RlZmF1bHQgYmFzZScgYXMgd2UgZG9uJ3RcclxuICAgIC8vIHN1cHBvcnQgY29uc3RydWN0aW5nIFVSSXMgcmVsYXRpdmUgdG8gb3RoZXIgVVJJcy4gVGhpc1xyXG4gICAgLy8gYWxzbyBtZWFucyB0aGF0IHdlIGFsdGVyIGFuZCBwb3RlbnRpYWxseSBicmVhayBwYXRocy5cclxuICAgIC8vIHNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNzZWN0aW9uLTUuMS40XHJcbiAgICBzd2l0Y2ggKHNjaGVtZSkge1xyXG4gICAgICAgIGNhc2UgJ2h0dHBzJzpcclxuICAgICAgICBjYXNlICdodHRwJzpcclxuICAgICAgICBjYXNlICdmaWxlJzpcclxuICAgICAgICAgICAgaWYgKCFwYXRoKSB7XHJcbiAgICAgICAgICAgICAgICBwYXRoID0gX3NsYXNoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHBhdGhbMF0gIT09IF9zbGFzaCkge1xyXG4gICAgICAgICAgICAgICAgcGF0aCA9IF9zbGFzaCArIHBhdGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGF0aDtcclxufVxyXG5jb25zdCBfZW1wdHkgPSAnJztcclxuY29uc3QgX3NsYXNoID0gJy8nO1xyXG5jb25zdCBfcmVnZXhwID0gL14oKFteOi8/I10rPyk6KT8oXFwvXFwvKFteLz8jXSopKT8oW14/I10qKShcXD8oW14jXSopKT8oIyguKikpPy87XHJcbi8qKlxyXG4gKiBVbmlmb3JtIFJlc291cmNlIElkZW50aWZpZXIgKFVSSSkgaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4Ni5cclxuICogVGhpcyBjbGFzcyBpcyBhIHNpbXBsZSBwYXJzZXIgd2hpY2ggY3JlYXRlcyB0aGUgYmFzaWMgY29tcG9uZW50IHBhcnRzXHJcbiAqIChodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tMykgd2l0aCBtaW5pbWFsIHZhbGlkYXRpb25cclxuICogYW5kIGVuY29kaW5nLlxyXG4gKlxyXG4gKiBgYGB0eHRcclxuICogICAgICAgZm9vOi8vZXhhbXBsZS5jb206ODA0Mi9vdmVyL3RoZXJlP25hbWU9ZmVycmV0I25vc2VcclxuICogICAgICAgXFxfLyAgIFxcX19fX19fX19fX19fX18vXFxfX19fX19fX18vIFxcX19fX19fX19fLyBcXF9fL1xyXG4gKiAgICAgICAgfCAgICAgICAgICAgfCAgICAgICAgICAgIHwgICAgICAgICAgICB8ICAgICAgICB8XHJcbiAqICAgICBzY2hlbWUgICAgIGF1dGhvcml0eSAgICAgICBwYXRoICAgICAgICBxdWVyeSAgIGZyYWdtZW50XHJcbiAqICAgICAgICB8ICAgX19fX19fX19fX19fX19fX19fX19ffF9fXHJcbiAqICAgICAgIC8gXFwgLyAgICAgICAgICAgICAgICAgICAgICAgIFxcXHJcbiAqICAgICAgIHVybjpleGFtcGxlOmFuaW1hbDpmZXJyZXQ6bm9zZVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBjbGFzcyBVUkkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Ioc2NoZW1lT3JEYXRhLCBhdXRob3JpdHksIHBhdGgsIHF1ZXJ5LCBmcmFnbWVudCwgX3N0cmljdCA9IGZhbHNlKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWVPckRhdGEgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2NoZW1lID0gc2NoZW1lT3JEYXRhLnNjaGVtZSB8fCBfZW1wdHk7XHJcbiAgICAgICAgICAgIHRoaXMuYXV0aG9yaXR5ID0gc2NoZW1lT3JEYXRhLmF1dGhvcml0eSB8fCBfZW1wdHk7XHJcbiAgICAgICAgICAgIHRoaXMucGF0aCA9IHNjaGVtZU9yRGF0YS5wYXRoIHx8IF9lbXB0eTtcclxuICAgICAgICAgICAgdGhpcy5xdWVyeSA9IHNjaGVtZU9yRGF0YS5xdWVyeSB8fCBfZW1wdHk7XHJcbiAgICAgICAgICAgIHRoaXMuZnJhZ21lbnQgPSBzY2hlbWVPckRhdGEuZnJhZ21lbnQgfHwgX2VtcHR5O1xyXG4gICAgICAgICAgICAvLyBubyB2YWxpZGF0aW9uIGJlY2F1c2UgaXQncyB0aGlzIFVSSVxyXG4gICAgICAgICAgICAvLyB0aGF0IGNyZWF0ZXMgdXJpIGNvbXBvbmVudHMuXHJcbiAgICAgICAgICAgIC8vIF92YWxpZGF0ZVVyaSh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2NoZW1lID0gX3NjaGVtZUZpeChzY2hlbWVPckRhdGEsIF9zdHJpY3QpO1xyXG4gICAgICAgICAgICB0aGlzLmF1dGhvcml0eSA9IGF1dGhvcml0eSB8fCBfZW1wdHk7XHJcbiAgICAgICAgICAgIHRoaXMucGF0aCA9IF9yZWZlcmVuY2VSZXNvbHV0aW9uKHRoaXMuc2NoZW1lLCBwYXRoIHx8IF9lbXB0eSk7XHJcbiAgICAgICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeSB8fCBfZW1wdHk7XHJcbiAgICAgICAgICAgIHRoaXMuZnJhZ21lbnQgPSBmcmFnbWVudCB8fCBfZW1wdHk7XHJcbiAgICAgICAgICAgIF92YWxpZGF0ZVVyaSh0aGlzLCBfc3RyaWN0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgaXNVcmkodGhpbmcpIHtcclxuICAgICAgICBpZiAodGhpbmcgaW5zdGFuY2VvZiBVUkkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHlwZW9mIHRoaW5nLmF1dGhvcml0eSA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgJiYgdHlwZW9mIHRoaW5nLmZyYWdtZW50ID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAmJiB0eXBlb2YgdGhpbmcucGF0aCA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgJiYgdHlwZW9mIHRoaW5nLnF1ZXJ5ID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAmJiB0eXBlb2YgdGhpbmcuc2NoZW1lID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAmJiB0eXBlb2YgdGhpbmcuZnNQYXRoID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAmJiB0eXBlb2YgdGhpbmcud2l0aCA9PT0gJ2Z1bmN0aW9uJ1xyXG4gICAgICAgICAgICAmJiB0eXBlb2YgdGhpbmcudG9TdHJpbmcgPT09ICdmdW5jdGlvbic7XHJcbiAgICB9XHJcbiAgICAvLyAtLS0tIGZpbGVzeXN0ZW0gcGF0aCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY29ycmVzcG9uZGluZyBmaWxlIHN5c3RlbSBwYXRoIG9mIHRoaXMgVVJJLlxyXG4gICAgICogV2lsbCBoYW5kbGUgVU5DIHBhdGhzLCBub3JtYWxpemVzIHdpbmRvd3MgZHJpdmUgbGV0dGVycyB0byBsb3dlci1jYXNlLCBhbmQgdXNlcyB0aGVcclxuICAgICAqIHBsYXRmb3JtIHNwZWNpZmljIHBhdGggc2VwYXJhdG9yLlxyXG4gICAgICpcclxuICAgICAqICogV2lsbCAqbm90KiB2YWxpZGF0ZSB0aGUgcGF0aCBmb3IgaW52YWxpZCBjaGFyYWN0ZXJzIGFuZCBzZW1hbnRpY3MuXHJcbiAgICAgKiAqIFdpbGwgKm5vdCogbG9vayBhdCB0aGUgc2NoZW1lIG9mIHRoaXMgVVJJLlxyXG4gICAgICogKiBUaGUgcmVzdWx0IHNoYWxsICpub3QqIGJlIHVzZWQgZm9yIGRpc3BsYXkgcHVycG9zZXMgYnV0IGZvciBhY2Nlc3NpbmcgYSBmaWxlIG9uIGRpc2suXHJcbiAgICAgKlxyXG4gICAgICpcclxuICAgICAqIFRoZSAqZGlmZmVyZW5jZSogdG8gYFVSSSNwYXRoYCBpcyB0aGUgdXNlIG9mIHRoZSBwbGF0Zm9ybSBzcGVjaWZpYyBzZXBhcmF0b3IgYW5kIHRoZSBoYW5kbGluZ1xyXG4gICAgICogb2YgVU5DIHBhdGhzLiBTZWUgdGhlIGJlbG93IHNhbXBsZSBvZiBhIGZpbGUtdXJpIHdpdGggYW4gYXV0aG9yaXR5IChVTkMgcGF0aCkuXHJcbiAgICAgKlxyXG4gICAgICogYGBgdHNcclxuICAgICAgICBjb25zdCB1ID0gVVJJLnBhcnNlKCdmaWxlOi8vc2VydmVyL2MkL2ZvbGRlci9maWxlLnR4dCcpXHJcbiAgICAgICAgdS5hdXRob3JpdHkgPT09ICdzZXJ2ZXInXHJcbiAgICAgICAgdS5wYXRoID09PSAnL3NoYXJlcy9jJC9maWxlLnR4dCdcclxuICAgICAgICB1LmZzUGF0aCA9PT0gJ1xcXFxzZXJ2ZXJcXGMkXFxmb2xkZXJcXGZpbGUudHh0J1xyXG4gICAgYGBgXHJcbiAgICAgKlxyXG4gICAgICogVXNpbmcgYFVSSSNwYXRoYCB0byByZWFkIGEgZmlsZSAodXNpbmcgZnMtYXBpcykgd291bGQgbm90IGJlIGVub3VnaCBiZWNhdXNlIHBhcnRzIG9mIHRoZSBwYXRoLFxyXG4gICAgICogbmFtZWx5IHRoZSBzZXJ2ZXIgbmFtZSwgd291bGQgYmUgbWlzc2luZy4gVGhlcmVmb3JlIGBVUkkjZnNQYXRoYCBleGlzdHMgLSBpdCdzIHN1Z2FyIHRvIGVhc2Ugd29ya2luZ1xyXG4gICAgICogd2l0aCBVUklzIHRoYXQgcmVwcmVzZW50IGZpbGVzIG9uIGRpc2sgKGBmaWxlYCBzY2hlbWUpLlxyXG4gICAgICovXHJcbiAgICBnZXQgZnNQYXRoKCkge1xyXG4gICAgICAgIC8vIGlmICh0aGlzLnNjaGVtZSAhPT0gJ2ZpbGUnKSB7XHJcbiAgICAgICAgLy8gXHRjb25zb2xlLndhcm4oYFtVcmlFcnJvcl0gY2FsbGluZyBmc1BhdGggd2l0aCBzY2hlbWUgJHt0aGlzLnNjaGVtZX1gKTtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgcmV0dXJuIHVyaVRvRnNQYXRoKHRoaXMsIGZhbHNlKTtcclxuICAgIH1cclxuICAgIC8vIC0tLS0gbW9kaWZ5IHRvIG5ldyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICB3aXRoKGNoYW5nZSkge1xyXG4gICAgICAgIGlmICghY2hhbmdlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgeyBzY2hlbWUsIGF1dGhvcml0eSwgcGF0aCwgcXVlcnksIGZyYWdtZW50IH0gPSBjaGFuZ2U7XHJcbiAgICAgICAgaWYgKHNjaGVtZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHNjaGVtZSA9IHRoaXMuc2NoZW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChzY2hlbWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgc2NoZW1lID0gX2VtcHR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXV0aG9yaXR5ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgYXV0aG9yaXR5ID0gdGhpcy5hdXRob3JpdHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGF1dGhvcml0eSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBhdXRob3JpdHkgPSBfZW1wdHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwYXRoID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcGF0aCA9IHRoaXMucGF0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocGF0aCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBwYXRoID0gX2VtcHR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocXVlcnkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBxdWVyeSA9IHRoaXMucXVlcnk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHF1ZXJ5ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5ID0gX2VtcHR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZnJhZ21lbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBmcmFnbWVudCA9IHRoaXMuZnJhZ21lbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGZyYWdtZW50ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGZyYWdtZW50ID0gX2VtcHR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2NoZW1lID09PSB0aGlzLnNjaGVtZVxyXG4gICAgICAgICAgICAmJiBhdXRob3JpdHkgPT09IHRoaXMuYXV0aG9yaXR5XHJcbiAgICAgICAgICAgICYmIHBhdGggPT09IHRoaXMucGF0aFxyXG4gICAgICAgICAgICAmJiBxdWVyeSA9PT0gdGhpcy5xdWVyeVxyXG4gICAgICAgICAgICAmJiBmcmFnbWVudCA9PT0gdGhpcy5mcmFnbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBVcmkoc2NoZW1lLCBhdXRob3JpdHksIHBhdGgsIHF1ZXJ5LCBmcmFnbWVudCk7XHJcbiAgICB9XHJcbiAgICAvLyAtLS0tIHBhcnNlICYgdmFsaWRhdGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgVVJJIGZyb20gYSBzdHJpbmcsIGUuZy4gYGh0dHA6Ly93d3cubXNmdC5jb20vc29tZS9wYXRoYCxcclxuICAgICAqIGBmaWxlOi8vL3Vzci9ob21lYCwgb3IgYHNjaGVtZTp3aXRoL3BhdGhgLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB2YWx1ZSBBIHN0cmluZyB3aGljaCByZXByZXNlbnRzIGFuIFVSSSAoc2VlIGBVUkkjdG9TdHJpbmdgKS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIHBhcnNlKHZhbHVlLCBfc3RyaWN0ID0gZmFsc2UpIHtcclxuICAgICAgICBjb25zdCBtYXRjaCA9IF9yZWdleHAuZXhlYyh2YWx1ZSk7XHJcbiAgICAgICAgaWYgKCFtYXRjaCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFVyaShfZW1wdHksIF9lbXB0eSwgX2VtcHR5LCBfZW1wdHksIF9lbXB0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgVXJpKG1hdGNoWzJdIHx8IF9lbXB0eSwgcGVyY2VudERlY29kZShtYXRjaFs0XSB8fCBfZW1wdHkpLCBwZXJjZW50RGVjb2RlKG1hdGNoWzVdIHx8IF9lbXB0eSksIHBlcmNlbnREZWNvZGUobWF0Y2hbN10gfHwgX2VtcHR5KSwgcGVyY2VudERlY29kZShtYXRjaFs5XSB8fCBfZW1wdHkpLCBfc3RyaWN0KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBVUkkgZnJvbSBhIGZpbGUgc3lzdGVtIHBhdGgsIGUuZy4gYGM6XFxteVxcZmlsZXNgLFxyXG4gICAgICogYC91c3IvaG9tZWAsIG9yIGBcXFxcc2VydmVyXFxzaGFyZVxcc29tZVxccGF0aGAuXHJcbiAgICAgKlxyXG4gICAgICogVGhlICpkaWZmZXJlbmNlKiBiZXR3ZWVuIGBVUkkjcGFyc2VgIGFuZCBgVVJJI2ZpbGVgIGlzIHRoYXQgdGhlIGxhdHRlciB0cmVhdHMgdGhlIGFyZ3VtZW50XHJcbiAgICAgKiBhcyBwYXRoLCBub3QgYXMgc3RyaW5naWZpZWQtdXJpLiBFLmcuIGBVUkkuZmlsZShwYXRoKWAgaXMgKipub3QgdGhlIHNhbWUgYXMqKlxyXG4gICAgICogYFVSSS5wYXJzZSgnZmlsZTovLycgKyBwYXRoKWAgYmVjYXVzZSB0aGUgcGF0aCBtaWdodCBjb250YWluIGNoYXJhY3RlcnMgdGhhdCBhcmVcclxuICAgICAqIGludGVycHJldGVkICgjIGFuZCA/KS4gU2VlIHRoZSBmb2xsb3dpbmcgc2FtcGxlOlxyXG4gICAgICogYGBgdHNcclxuICAgIGNvbnN0IGdvb2QgPSBVUkkuZmlsZSgnL2NvZGluZy9jIy9wcm9qZWN0MScpO1xyXG4gICAgZ29vZC5zY2hlbWUgPT09ICdmaWxlJztcclxuICAgIGdvb2QucGF0aCA9PT0gJy9jb2RpbmcvYyMvcHJvamVjdDEnO1xyXG4gICAgZ29vZC5mcmFnbWVudCA9PT0gJyc7XHJcbiAgICBjb25zdCBiYWQgPSBVUkkucGFyc2UoJ2ZpbGU6Ly8nICsgJy9jb2RpbmcvYyMvcHJvamVjdDEnKTtcclxuICAgIGJhZC5zY2hlbWUgPT09ICdmaWxlJztcclxuICAgIGJhZC5wYXRoID09PSAnL2NvZGluZy9jJzsgLy8gcGF0aCBpcyBub3cgYnJva2VuXHJcbiAgICBiYWQuZnJhZ21lbnQgPT09ICcvcHJvamVjdDEnO1xyXG4gICAgYGBgXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHBhdGggQSBmaWxlIHN5c3RlbSBwYXRoIChzZWUgYFVSSSNmc1BhdGhgKVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZmlsZShwYXRoKSB7XHJcbiAgICAgICAgbGV0IGF1dGhvcml0eSA9IF9lbXB0eTtcclxuICAgICAgICAvLyBub3JtYWxpemUgdG8gZndkLXNsYXNoZXMgb24gd2luZG93cyxcclxuICAgICAgICAvLyBvbiBvdGhlciBzeXN0ZW1zIGJ3ZC1zbGFzaGVzIGFyZSB2YWxpZFxyXG4gICAgICAgIC8vIGZpbGVuYW1lIGNoYXJhY3RlciwgZWcgL2ZcXG9vL2JhXFxyLnR4dFxyXG4gICAgICAgIGlmIChpc1dpbmRvd3MpIHtcclxuICAgICAgICAgICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXFxcXC9nLCBfc2xhc2gpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjaGVjayBmb3IgYXV0aG9yaXR5IGFzIHVzZWQgaW4gVU5DIHNoYXJlc1xyXG4gICAgICAgIC8vIG9yIHVzZSB0aGUgcGF0aCBhcyBnaXZlblxyXG4gICAgICAgIGlmIChwYXRoWzBdID09PSBfc2xhc2ggJiYgcGF0aFsxXSA9PT0gX3NsYXNoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlkeCA9IHBhdGguaW5kZXhPZihfc2xhc2gsIDIpO1xyXG4gICAgICAgICAgICBpZiAoaWR4ID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgYXV0aG9yaXR5ID0gcGF0aC5zdWJzdHJpbmcoMik7XHJcbiAgICAgICAgICAgICAgICBwYXRoID0gX3NsYXNoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXV0aG9yaXR5ID0gcGF0aC5zdWJzdHJpbmcoMiwgaWR4KTtcclxuICAgICAgICAgICAgICAgIHBhdGggPSBwYXRoLnN1YnN0cmluZyhpZHgpIHx8IF9zbGFzaDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFVyaSgnZmlsZScsIGF1dGhvcml0eSwgcGF0aCwgX2VtcHR5LCBfZW1wdHkpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGZyb20oY29tcG9uZW50cykge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVcmkoY29tcG9uZW50cy5zY2hlbWUsIGNvbXBvbmVudHMuYXV0aG9yaXR5LCBjb21wb25lbnRzLnBhdGgsIGNvbXBvbmVudHMucXVlcnksIGNvbXBvbmVudHMuZnJhZ21lbnQpO1xyXG4gICAgICAgIF92YWxpZGF0ZVVyaShyZXN1bHQsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEpvaW4gYSBVUkkgcGF0aCB3aXRoIHBhdGggZnJhZ21lbnRzIGFuZCBub3JtYWxpemVzIHRoZSByZXN1bHRpbmcgcGF0aC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdXJpIFRoZSBpbnB1dCBVUkkuXHJcbiAgICAgKiBAcGFyYW0gcGF0aEZyYWdtZW50IFRoZSBwYXRoIGZyYWdtZW50IHRvIGFkZCB0byB0aGUgVVJJIHBhdGguXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgcmVzdWx0aW5nIFVSSS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGpvaW5QYXRoKHVyaSwgLi4ucGF0aEZyYWdtZW50KSB7XHJcbiAgICAgICAgaWYgKCF1cmkucGF0aCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFtVcmlFcnJvcl06IGNhbm5vdCBjYWxsIGpvaW5QYXRoIG9uIFVSSSB3aXRob3V0IHBhdGhgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IG5ld1BhdGg7XHJcbiAgICAgICAgaWYgKGlzV2luZG93cyAmJiB1cmkuc2NoZW1lID09PSAnZmlsZScpIHtcclxuICAgICAgICAgICAgbmV3UGF0aCA9IFVSSS5maWxlKHBhdGhzLndpbjMyLmpvaW4odXJpVG9Gc1BhdGgodXJpLCB0cnVlKSwgLi4ucGF0aEZyYWdtZW50KSkucGF0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5ld1BhdGggPSBwYXRocy5wb3NpeC5qb2luKHVyaS5wYXRoLCAuLi5wYXRoRnJhZ21lbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdXJpLndpdGgoeyBwYXRoOiBuZXdQYXRoIH0pO1xyXG4gICAgfVxyXG4gICAgLy8gLS0tLSBwcmludGluZy9leHRlcm5hbGl6ZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBmb3IgdGhpcyBVUkkuIEl0J3MgZ3VhcmFudGVlZCB0aGF0IGNhbGxpbmdcclxuICAgICAqIGBVUkkucGFyc2VgIHdpdGggdGhlIHJlc3VsdCBvZiB0aGlzIGZ1bmN0aW9uIGNyZWF0ZXMgYW4gVVJJIHdoaWNoIGlzIGVxdWFsXHJcbiAgICAgKiB0byB0aGlzIFVSSS5cclxuICAgICAqXHJcbiAgICAgKiAqIFRoZSByZXN1bHQgc2hhbGwgKm5vdCogYmUgdXNlZCBmb3IgZGlzcGxheSBwdXJwb3NlcyBidXQgZm9yIGV4dGVybmFsaXphdGlvbiBvciB0cmFuc3BvcnQuXHJcbiAgICAgKiAqIFRoZSByZXN1bHQgd2lsbCBiZSBlbmNvZGVkIHVzaW5nIHRoZSBwZXJjZW50YWdlIGVuY29kaW5nIGFuZCBlbmNvZGluZyBoYXBwZW5zIG1vc3RseVxyXG4gICAgICogaWdub3JlIHRoZSBzY2hlbWUtc3BlY2lmaWMgZW5jb2RpbmcgcnVsZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHNraXBFbmNvZGluZyBEbyBub3QgZW5jb2RlIHRoZSByZXN1bHQsIGRlZmF1bHQgaXMgYGZhbHNlYFxyXG4gICAgICovXHJcbiAgICB0b1N0cmluZyhza2lwRW5jb2RpbmcgPSBmYWxzZSkge1xyXG4gICAgICAgIHJldHVybiBfYXNGb3JtYXR0ZWQodGhpcywgc2tpcEVuY29kaW5nKTtcclxuICAgIH1cclxuICAgIHRvSlNPTigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIHN0YXRpYyByZXZpdmUoZGF0YSkge1xyXG4gICAgICAgIGlmICghZGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mIFVSSSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVcmkoZGF0YSk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5fZm9ybWF0dGVkID0gZGF0YS5leHRlcm5hbDtcclxuICAgICAgICAgICAgcmVzdWx0Ll9mc1BhdGggPSBkYXRhLl9zZXAgPT09IF9wYXRoU2VwTWFya2VyID8gZGF0YS5mc1BhdGggOiBudWxsO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5jb25zdCBfcGF0aFNlcE1hcmtlciA9IGlzV2luZG93cyA/IDEgOiB1bmRlZmluZWQ7XHJcbi8vIFRoaXMgY2xhc3MgZXhpc3RzIHNvIHRoYXQgVVJJIGlzIGNvbXBhdGliaWxlIHdpdGggdnNjb2RlLlVyaSAoQVBJKS5cclxuY2xhc3MgVXJpIGV4dGVuZHMgVVJJIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy5fZm9ybWF0dGVkID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9mc1BhdGggPSBudWxsO1xyXG4gICAgfVxyXG4gICAgZ2V0IGZzUGF0aCgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2ZzUGF0aCkge1xyXG4gICAgICAgICAgICB0aGlzLl9mc1BhdGggPSB1cmlUb0ZzUGF0aCh0aGlzLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9mc1BhdGg7XHJcbiAgICB9XHJcbiAgICB0b1N0cmluZyhza2lwRW5jb2RpbmcgPSBmYWxzZSkge1xyXG4gICAgICAgIGlmICghc2tpcEVuY29kaW5nKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fZm9ybWF0dGVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mb3JtYXR0ZWQgPSBfYXNGb3JtYXR0ZWQodGhpcywgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9mb3JtYXR0ZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB3ZSBkb24ndCBjYWNoZSB0aGF0XHJcbiAgICAgICAgICAgIHJldHVybiBfYXNGb3JtYXR0ZWQodGhpcywgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdG9KU09OKCkge1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IHtcclxuICAgICAgICAgICAgJG1pZDogMVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gY2FjaGVkIHN0YXRlXHJcbiAgICAgICAgaWYgKHRoaXMuX2ZzUGF0aCkge1xyXG4gICAgICAgICAgICByZXMuZnNQYXRoID0gdGhpcy5fZnNQYXRoO1xyXG4gICAgICAgICAgICByZXMuX3NlcCA9IF9wYXRoU2VwTWFya2VyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fZm9ybWF0dGVkKSB7XHJcbiAgICAgICAgICAgIHJlcy5leHRlcm5hbCA9IHRoaXMuX2Zvcm1hdHRlZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdXJpIGNvbXBvbmVudHNcclxuICAgICAgICBpZiAodGhpcy5wYXRoKSB7XHJcbiAgICAgICAgICAgIHJlcy5wYXRoID0gdGhpcy5wYXRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zY2hlbWUpIHtcclxuICAgICAgICAgICAgcmVzLnNjaGVtZSA9IHRoaXMuc2NoZW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5hdXRob3JpdHkpIHtcclxuICAgICAgICAgICAgcmVzLmF1dGhvcml0eSA9IHRoaXMuYXV0aG9yaXR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5xdWVyeSkge1xyXG4gICAgICAgICAgICByZXMucXVlcnkgPSB0aGlzLnF1ZXJ5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5mcmFnbWVudCkge1xyXG4gICAgICAgICAgICByZXMuZnJhZ21lbnQgPSB0aGlzLmZyYWdtZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG59XHJcbi8vIHJlc2VydmVkIGNoYXJhY3RlcnM6IGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tMi4yXHJcbmNvbnN0IGVuY29kZVRhYmxlID0ge1xyXG4gICAgWzU4IC8qIENvbG9uICovXTogJyUzQScsXHJcbiAgICBbNDcgLyogU2xhc2ggKi9dOiAnJTJGJyxcclxuICAgIFs2MyAvKiBRdWVzdGlvbk1hcmsgKi9dOiAnJTNGJyxcclxuICAgIFszNSAvKiBIYXNoICovXTogJyUyMycsXHJcbiAgICBbOTEgLyogT3BlblNxdWFyZUJyYWNrZXQgKi9dOiAnJTVCJyxcclxuICAgIFs5MyAvKiBDbG9zZVNxdWFyZUJyYWNrZXQgKi9dOiAnJTVEJyxcclxuICAgIFs2NCAvKiBBdFNpZ24gKi9dOiAnJTQwJyxcclxuICAgIFszMyAvKiBFeGNsYW1hdGlvbk1hcmsgKi9dOiAnJTIxJyxcclxuICAgIFszNiAvKiBEb2xsYXJTaWduICovXTogJyUyNCcsXHJcbiAgICBbMzggLyogQW1wZXJzYW5kICovXTogJyUyNicsXHJcbiAgICBbMzkgLyogU2luZ2xlUXVvdGUgKi9dOiAnJTI3JyxcclxuICAgIFs0MCAvKiBPcGVuUGFyZW4gKi9dOiAnJTI4JyxcclxuICAgIFs0MSAvKiBDbG9zZVBhcmVuICovXTogJyUyOScsXHJcbiAgICBbNDIgLyogQXN0ZXJpc2sgKi9dOiAnJTJBJyxcclxuICAgIFs0MyAvKiBQbHVzICovXTogJyUyQicsXHJcbiAgICBbNDQgLyogQ29tbWEgKi9dOiAnJTJDJyxcclxuICAgIFs1OSAvKiBTZW1pY29sb24gKi9dOiAnJTNCJyxcclxuICAgIFs2MSAvKiBFcXVhbHMgKi9dOiAnJTNEJyxcclxuICAgIFszMiAvKiBTcGFjZSAqL106ICclMjAnLFxyXG59O1xyXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRGYXN0KHVyaUNvbXBvbmVudCwgYWxsb3dTbGFzaCkge1xyXG4gICAgbGV0IHJlcyA9IHVuZGVmaW5lZDtcclxuICAgIGxldCBuYXRpdmVFbmNvZGVQb3MgPSAtMTtcclxuICAgIGZvciAobGV0IHBvcyA9IDA7IHBvcyA8IHVyaUNvbXBvbmVudC5sZW5ndGg7IHBvcysrKSB7XHJcbiAgICAgICAgY29uc3QgY29kZSA9IHVyaUNvbXBvbmVudC5jaGFyQ29kZUF0KHBvcyk7XHJcbiAgICAgICAgLy8gdW5yZXNlcnZlZCBjaGFyYWN0ZXJzOiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNzZWN0aW9uLTIuM1xyXG4gICAgICAgIGlmICgoY29kZSA+PSA5NyAvKiBhICovICYmIGNvZGUgPD0gMTIyIC8qIHogKi8pXHJcbiAgICAgICAgICAgIHx8IChjb2RlID49IDY1IC8qIEEgKi8gJiYgY29kZSA8PSA5MCAvKiBaICovKVxyXG4gICAgICAgICAgICB8fCAoY29kZSA+PSA0OCAvKiBEaWdpdDAgKi8gJiYgY29kZSA8PSA1NyAvKiBEaWdpdDkgKi8pXHJcbiAgICAgICAgICAgIHx8IGNvZGUgPT09IDQ1IC8qIERhc2ggKi9cclxuICAgICAgICAgICAgfHwgY29kZSA9PT0gNDYgLyogUGVyaW9kICovXHJcbiAgICAgICAgICAgIHx8IGNvZGUgPT09IDk1IC8qIFVuZGVybGluZSAqL1xyXG4gICAgICAgICAgICB8fCBjb2RlID09PSAxMjYgLyogVGlsZGUgKi9cclxuICAgICAgICAgICAgfHwgKGFsbG93U2xhc2ggJiYgY29kZSA9PT0gNDcgLyogU2xhc2ggKi8pKSB7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHdlIGFyZSBkZWxheWluZyBuYXRpdmUgZW5jb2RlXHJcbiAgICAgICAgICAgIGlmIChuYXRpdmVFbmNvZGVQb3MgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICByZXMgKz0gZW5jb2RlVVJJQ29tcG9uZW50KHVyaUNvbXBvbmVudC5zdWJzdHJpbmcobmF0aXZlRW5jb2RlUG9zLCBwb3MpKTtcclxuICAgICAgICAgICAgICAgIG5hdGl2ZUVuY29kZVBvcyA9IC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHdlIHdyaXRlIGludG8gYSBuZXcgc3RyaW5nIChieSBkZWZhdWx0IHdlIHRyeSB0byByZXR1cm4gdGhlIHBhcmFtKVxyXG4gICAgICAgICAgICBpZiAocmVzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJlcyArPSB1cmlDb21wb25lbnQuY2hhckF0KHBvcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGVuY29kaW5nIG5lZWRlZCwgd2UgbmVlZCB0byBhbGxvY2F0ZSBhIG5ldyBzdHJpbmdcclxuICAgICAgICAgICAgaWYgKHJlcyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXMgPSB1cmlDb21wb25lbnQuc3Vic3RyKDAsIHBvcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY2hlY2sgd2l0aCBkZWZhdWx0IHRhYmxlIGZpcnN0XHJcbiAgICAgICAgICAgIGNvbnN0IGVzY2FwZWQgPSBlbmNvZGVUYWJsZVtjb2RlXTtcclxuICAgICAgICAgICAgaWYgKGVzY2FwZWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgd2UgYXJlIGRlbGF5aW5nIG5hdGl2ZSBlbmNvZGVcclxuICAgICAgICAgICAgICAgIGlmIChuYXRpdmVFbmNvZGVQb3MgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzICs9IGVuY29kZVVSSUNvbXBvbmVudCh1cmlDb21wb25lbnQuc3Vic3RyaW5nKG5hdGl2ZUVuY29kZVBvcywgcG9zKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmF0aXZlRW5jb2RlUG9zID0gLTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBhcHBlbmQgZXNjYXBlZCB2YXJpYW50IHRvIHJlc3VsdFxyXG4gICAgICAgICAgICAgICAgcmVzICs9IGVzY2FwZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobmF0aXZlRW5jb2RlUG9zID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgLy8gdXNlIG5hdGl2ZSBlbmNvZGUgb25seSB3aGVuIG5lZWRlZFxyXG4gICAgICAgICAgICAgICAgbmF0aXZlRW5jb2RlUG9zID0gcG9zO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKG5hdGl2ZUVuY29kZVBvcyAhPT0gLTEpIHtcclxuICAgICAgICByZXMgKz0gZW5jb2RlVVJJQ29tcG9uZW50KHVyaUNvbXBvbmVudC5zdWJzdHJpbmcobmF0aXZlRW5jb2RlUG9zKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzICE9PSB1bmRlZmluZWQgPyByZXMgOiB1cmlDb21wb25lbnQ7XHJcbn1cclxuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50TWluaW1hbChwYXRoKSB7XHJcbiAgICBsZXQgcmVzID0gdW5kZWZpbmVkO1xyXG4gICAgZm9yIChsZXQgcG9zID0gMDsgcG9zIDwgcGF0aC5sZW5ndGg7IHBvcysrKSB7XHJcbiAgICAgICAgY29uc3QgY29kZSA9IHBhdGguY2hhckNvZGVBdChwb3MpO1xyXG4gICAgICAgIGlmIChjb2RlID09PSAzNSAvKiBIYXNoICovIHx8IGNvZGUgPT09IDYzIC8qIFF1ZXN0aW9uTWFyayAqLykge1xyXG4gICAgICAgICAgICBpZiAocmVzID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJlcyA9IHBhdGguc3Vic3RyKDAsIHBvcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzICs9IGVuY29kZVRhYmxlW2NvZGVdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHJlcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXMgKz0gcGF0aFtwb3NdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcyAhPT0gdW5kZWZpbmVkID8gcmVzIDogcGF0aDtcclxufVxyXG4vKipcclxuICogQ29tcHV0ZSBgZnNQYXRoYCBmb3IgdGhlIGdpdmVuIHVyaVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVyaVRvRnNQYXRoKHVyaSwga2VlcERyaXZlTGV0dGVyQ2FzaW5nKSB7XHJcbiAgICBsZXQgdmFsdWU7XHJcbiAgICBpZiAodXJpLmF1dGhvcml0eSAmJiB1cmkucGF0aC5sZW5ndGggPiAxICYmIHVyaS5zY2hlbWUgPT09ICdmaWxlJykge1xyXG4gICAgICAgIC8vIHVuYyBwYXRoOiBmaWxlOi8vc2hhcmVzL2MkL2Zhci9ib29cclxuICAgICAgICB2YWx1ZSA9IGAvLyR7dXJpLmF1dGhvcml0eX0ke3VyaS5wYXRofWA7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh1cmkucGF0aC5jaGFyQ29kZUF0KDApID09PSA0NyAvKiBTbGFzaCAqL1xyXG4gICAgICAgICYmICh1cmkucGF0aC5jaGFyQ29kZUF0KDEpID49IDY1IC8qIEEgKi8gJiYgdXJpLnBhdGguY2hhckNvZGVBdCgxKSA8PSA5MCAvKiBaICovIHx8IHVyaS5wYXRoLmNoYXJDb2RlQXQoMSkgPj0gOTcgLyogYSAqLyAmJiB1cmkucGF0aC5jaGFyQ29kZUF0KDEpIDw9IDEyMiAvKiB6ICovKVxyXG4gICAgICAgICYmIHVyaS5wYXRoLmNoYXJDb2RlQXQoMikgPT09IDU4IC8qIENvbG9uICovKSB7XHJcbiAgICAgICAgaWYgKCFrZWVwRHJpdmVMZXR0ZXJDYXNpbmcpIHtcclxuICAgICAgICAgICAgLy8gd2luZG93cyBkcml2ZSBsZXR0ZXI6IGZpbGU6Ly8vYzovZmFyL2Jvb1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHVyaS5wYXRoWzFdLnRvTG93ZXJDYXNlKCkgKyB1cmkucGF0aC5zdWJzdHIoMik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHVyaS5wYXRoLnN1YnN0cigxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBvdGhlciBwYXRoXHJcbiAgICAgICAgdmFsdWUgPSB1cmkucGF0aDtcclxuICAgIH1cclxuICAgIGlmIChpc1dpbmRvd3MpIHtcclxuICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcLy9nLCAnXFxcXCcpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcbi8qKlxyXG4gKiBDcmVhdGUgdGhlIGV4dGVybmFsIHZlcnNpb24gb2YgYSB1cmlcclxuICovXHJcbmZ1bmN0aW9uIF9hc0Zvcm1hdHRlZCh1cmksIHNraXBFbmNvZGluZykge1xyXG4gICAgY29uc3QgZW5jb2RlciA9ICFza2lwRW5jb2RpbmdcclxuICAgICAgICA/IGVuY29kZVVSSUNvbXBvbmVudEZhc3RcclxuICAgICAgICA6IGVuY29kZVVSSUNvbXBvbmVudE1pbmltYWw7XHJcbiAgICBsZXQgcmVzID0gJyc7XHJcbiAgICBsZXQgeyBzY2hlbWUsIGF1dGhvcml0eSwgcGF0aCwgcXVlcnksIGZyYWdtZW50IH0gPSB1cmk7XHJcbiAgICBpZiAoc2NoZW1lKSB7XHJcbiAgICAgICAgcmVzICs9IHNjaGVtZTtcclxuICAgICAgICByZXMgKz0gJzonO1xyXG4gICAgfVxyXG4gICAgaWYgKGF1dGhvcml0eSB8fCBzY2hlbWUgPT09ICdmaWxlJykge1xyXG4gICAgICAgIHJlcyArPSBfc2xhc2g7XHJcbiAgICAgICAgcmVzICs9IF9zbGFzaDtcclxuICAgIH1cclxuICAgIGlmIChhdXRob3JpdHkpIHtcclxuICAgICAgICBsZXQgaWR4ID0gYXV0aG9yaXR5LmluZGV4T2YoJ0AnKTtcclxuICAgICAgICBpZiAoaWR4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAvLyA8dXNlcj5APGF1dGg+XHJcbiAgICAgICAgICAgIGNvbnN0IHVzZXJpbmZvID0gYXV0aG9yaXR5LnN1YnN0cigwLCBpZHgpO1xyXG4gICAgICAgICAgICBhdXRob3JpdHkgPSBhdXRob3JpdHkuc3Vic3RyKGlkeCArIDEpO1xyXG4gICAgICAgICAgICBpZHggPSB1c2VyaW5mby5pbmRleE9mKCc6Jyk7XHJcbiAgICAgICAgICAgIGlmIChpZHggPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICByZXMgKz0gZW5jb2Rlcih1c2VyaW5mbywgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gPHVzZXI+OjxwYXNzPkA8YXV0aD5cclxuICAgICAgICAgICAgICAgIHJlcyArPSBlbmNvZGVyKHVzZXJpbmZvLnN1YnN0cigwLCBpZHgpLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICByZXMgKz0gJzonO1xyXG4gICAgICAgICAgICAgICAgcmVzICs9IGVuY29kZXIodXNlcmluZm8uc3Vic3RyKGlkeCArIDEpLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzICs9ICdAJztcclxuICAgICAgICB9XHJcbiAgICAgICAgYXV0aG9yaXR5ID0gYXV0aG9yaXR5LnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgaWR4ID0gYXV0aG9yaXR5LmluZGV4T2YoJzonKTtcclxuICAgICAgICBpZiAoaWR4ID09PSAtMSkge1xyXG4gICAgICAgICAgICByZXMgKz0gZW5jb2RlcihhdXRob3JpdHksIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIDxhdXRoPjo8cG9ydD5cclxuICAgICAgICAgICAgcmVzICs9IGVuY29kZXIoYXV0aG9yaXR5LnN1YnN0cigwLCBpZHgpLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHJlcyArPSBhdXRob3JpdHkuc3Vic3RyKGlkeCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHBhdGgpIHtcclxuICAgICAgICAvLyBsb3dlci1jYXNlIHdpbmRvd3MgZHJpdmUgbGV0dGVycyBpbiAvQzovZmZmIG9yIEM6L2ZmZlxyXG4gICAgICAgIGlmIChwYXRoLmxlbmd0aCA+PSAzICYmIHBhdGguY2hhckNvZGVBdCgwKSA9PT0gNDcgLyogU2xhc2ggKi8gJiYgcGF0aC5jaGFyQ29kZUF0KDIpID09PSA1OCAvKiBDb2xvbiAqLykge1xyXG4gICAgICAgICAgICBjb25zdCBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KDEpO1xyXG4gICAgICAgICAgICBpZiAoY29kZSA+PSA2NSAvKiBBICovICYmIGNvZGUgPD0gOTAgLyogWiAqLykge1xyXG4gICAgICAgICAgICAgICAgcGF0aCA9IGAvJHtTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUgKyAzMil9OiR7cGF0aC5zdWJzdHIoMyl9YDsgLy8gXCIvYzpcIi5sZW5ndGggPT09IDNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwYXRoLmxlbmd0aCA+PSAyICYmIHBhdGguY2hhckNvZGVBdCgxKSA9PT0gNTggLyogQ29sb24gKi8pIHtcclxuICAgICAgICAgICAgY29uc3QgY29kZSA9IHBhdGguY2hhckNvZGVBdCgwKTtcclxuICAgICAgICAgICAgaWYgKGNvZGUgPj0gNjUgLyogQSAqLyAmJiBjb2RlIDw9IDkwIC8qIFogKi8pIHtcclxuICAgICAgICAgICAgICAgIHBhdGggPSBgJHtTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUgKyAzMil9OiR7cGF0aC5zdWJzdHIoMil9YDsgLy8gXCIvYzpcIi5sZW5ndGggPT09IDNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBlbmNvZGUgdGhlIHJlc3Qgb2YgdGhlIHBhdGhcclxuICAgICAgICByZXMgKz0gZW5jb2RlcihwYXRoLCB0cnVlKTtcclxuICAgIH1cclxuICAgIGlmIChxdWVyeSkge1xyXG4gICAgICAgIHJlcyArPSAnPyc7XHJcbiAgICAgICAgcmVzICs9IGVuY29kZXIocXVlcnksIGZhbHNlKTtcclxuICAgIH1cclxuICAgIGlmIChmcmFnbWVudCkge1xyXG4gICAgICAgIHJlcyArPSAnIyc7XHJcbiAgICAgICAgcmVzICs9ICFza2lwRW5jb2RpbmcgPyBlbmNvZGVVUklDb21wb25lbnRGYXN0KGZyYWdtZW50LCBmYWxzZSkgOiBmcmFnbWVudDtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuLy8gLS0tIGRlY29kZVxyXG5mdW5jdGlvbiBkZWNvZGVVUklDb21wb25lbnRHcmFjZWZ1bChzdHIpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzdHIpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKF9hKSB7XHJcbiAgICAgICAgaWYgKHN0ci5sZW5ndGggPiAzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdHIuc3Vic3RyKDAsIDMpICsgZGVjb2RlVVJJQ29tcG9uZW50R3JhY2VmdWwoc3RyLnN1YnN0cigzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5jb25zdCBfckVuY29kZWRBc0hleCA9IC8oJVswLTlBLVphLXpdWzAtOUEtWmEtel0pKy9nO1xyXG5mdW5jdGlvbiBwZXJjZW50RGVjb2RlKHN0cikge1xyXG4gICAgaWYgKCFzdHIubWF0Y2goX3JFbmNvZGVkQXNIZXgpKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgIH1cclxuICAgIHJldHVybiBzdHIucmVwbGFjZShfckVuY29kZWRBc0hleCwgKG1hdGNoKSA9PiBkZWNvZGVVUklDb21wb25lbnRHcmFjZWZ1bChtYXRjaCkpO1xyXG59XHJcbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG4vKipcclxuICogQSBwb3NpdGlvbiBpbiB0aGUgZWRpdG9yLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFBvc2l0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKGxpbmVOdW1iZXIsIGNvbHVtbikge1xyXG4gICAgICAgIHRoaXMubGluZU51bWJlciA9IGxpbmVOdW1iZXI7XHJcbiAgICAgICAgdGhpcy5jb2x1bW4gPSBjb2x1bW47XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhIG5ldyBwb3NpdGlvbiBmcm9tIHRoaXMgcG9zaXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5ld0xpbmVOdW1iZXIgbmV3IGxpbmUgbnVtYmVyXHJcbiAgICAgKiBAcGFyYW0gbmV3Q29sdW1uIG5ldyBjb2x1bW5cclxuICAgICAqL1xyXG4gICAgd2l0aChuZXdMaW5lTnVtYmVyID0gdGhpcy5saW5lTnVtYmVyLCBuZXdDb2x1bW4gPSB0aGlzLmNvbHVtbikge1xyXG4gICAgICAgIGlmIChuZXdMaW5lTnVtYmVyID09PSB0aGlzLmxpbmVOdW1iZXIgJiYgbmV3Q29sdW1uID09PSB0aGlzLmNvbHVtbikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUG9zaXRpb24obmV3TGluZU51bWJlciwgbmV3Q29sdW1uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIERlcml2ZSBhIG5ldyBwb3NpdGlvbiBmcm9tIHRoaXMgcG9zaXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGRlbHRhTGluZU51bWJlciBsaW5lIG51bWJlciBkZWx0YVxyXG4gICAgICogQHBhcmFtIGRlbHRhQ29sdW1uIGNvbHVtbiBkZWx0YVxyXG4gICAgICovXHJcbiAgICBkZWx0YShkZWx0YUxpbmVOdW1iZXIgPSAwLCBkZWx0YUNvbHVtbiA9IDApIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53aXRoKHRoaXMubGluZU51bWJlciArIGRlbHRhTGluZU51bWJlciwgdGhpcy5jb2x1bW4gKyBkZWx0YUNvbHVtbik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRlc3QgaWYgdGhpcyBwb3NpdGlvbiBlcXVhbHMgb3RoZXIgcG9zaXRpb25cclxuICAgICAqL1xyXG4gICAgZXF1YWxzKG90aGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIFBvc2l0aW9uLmVxdWFscyh0aGlzLCBvdGhlcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRlc3QgaWYgcG9zaXRpb24gYGFgIGVxdWFscyBwb3NpdGlvbiBgYmBcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGVxdWFscyhhLCBiKSB7XHJcbiAgICAgICAgaWYgKCFhICYmICFiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKCEhYSAmJlxyXG4gICAgICAgICAgICAhIWIgJiZcclxuICAgICAgICAgICAgYS5saW5lTnVtYmVyID09PSBiLmxpbmVOdW1iZXIgJiZcclxuICAgICAgICAgICAgYS5jb2x1bW4gPT09IGIuY29sdW1uKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGVzdCBpZiB0aGlzIHBvc2l0aW9uIGlzIGJlZm9yZSBvdGhlciBwb3NpdGlvbi5cclxuICAgICAqIElmIHRoZSB0d28gcG9zaXRpb25zIGFyZSBlcXVhbCwgdGhlIHJlc3VsdCB3aWxsIGJlIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBpc0JlZm9yZShvdGhlcikge1xyXG4gICAgICAgIHJldHVybiBQb3NpdGlvbi5pc0JlZm9yZSh0aGlzLCBvdGhlcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRlc3QgaWYgcG9zaXRpb24gYGFgIGlzIGJlZm9yZSBwb3NpdGlvbiBgYmAuXHJcbiAgICAgKiBJZiB0aGUgdHdvIHBvc2l0aW9ucyBhcmUgZXF1YWwsIHRoZSByZXN1bHQgd2lsbCBiZSBmYWxzZS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGlzQmVmb3JlKGEsIGIpIHtcclxuICAgICAgICBpZiAoYS5saW5lTnVtYmVyIDwgYi5saW5lTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYi5saW5lTnVtYmVyIDwgYS5saW5lTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGEuY29sdW1uIDwgYi5jb2x1bW47XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRlc3QgaWYgdGhpcyBwb3NpdGlvbiBpcyBiZWZvcmUgb3RoZXIgcG9zaXRpb24uXHJcbiAgICAgKiBJZiB0aGUgdHdvIHBvc2l0aW9ucyBhcmUgZXF1YWwsIHRoZSByZXN1bHQgd2lsbCBiZSB0cnVlLlxyXG4gICAgICovXHJcbiAgICBpc0JlZm9yZU9yRXF1YWwob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gUG9zaXRpb24uaXNCZWZvcmVPckVxdWFsKHRoaXMsIG90aGVyKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGVzdCBpZiBwb3NpdGlvbiBgYWAgaXMgYmVmb3JlIHBvc2l0aW9uIGBiYC5cclxuICAgICAqIElmIHRoZSB0d28gcG9zaXRpb25zIGFyZSBlcXVhbCwgdGhlIHJlc3VsdCB3aWxsIGJlIHRydWUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBpc0JlZm9yZU9yRXF1YWwoYSwgYikge1xyXG4gICAgICAgIGlmIChhLmxpbmVOdW1iZXIgPCBiLmxpbmVOdW1iZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChiLmxpbmVOdW1iZXIgPCBhLmxpbmVOdW1iZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYS5jb2x1bW4gPD0gYi5jb2x1bW47XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEEgZnVuY3Rpb24gdGhhdCBjb21wYXJlcyBwb3NpdGlvbnMsIHVzZWZ1bCBmb3Igc29ydGluZ1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY29tcGFyZShhLCBiKSB7XHJcbiAgICAgICAgbGV0IGFMaW5lTnVtYmVyID0gYS5saW5lTnVtYmVyIHwgMDtcclxuICAgICAgICBsZXQgYkxpbmVOdW1iZXIgPSBiLmxpbmVOdW1iZXIgfCAwO1xyXG4gICAgICAgIGlmIChhTGluZU51bWJlciA9PT0gYkxpbmVOdW1iZXIpIHtcclxuICAgICAgICAgICAgbGV0IGFDb2x1bW4gPSBhLmNvbHVtbiB8IDA7XHJcbiAgICAgICAgICAgIGxldCBiQ29sdW1uID0gYi5jb2x1bW4gfCAwO1xyXG4gICAgICAgICAgICByZXR1cm4gYUNvbHVtbiAtIGJDb2x1bW47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhTGluZU51bWJlciAtIGJMaW5lTnVtYmVyO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDbG9uZSB0aGlzIHBvc2l0aW9uLlxyXG4gICAgICovXHJcbiAgICBjbG9uZSgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFBvc2l0aW9uKHRoaXMubGluZU51bWJlciwgdGhpcy5jb2x1bW4pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0IHRvIGEgaHVtYW4tcmVhZGFibGUgcmVwcmVzZW50YXRpb24uXHJcbiAgICAgKi9cclxuICAgIHRvU3RyaW5nKCkge1xyXG4gICAgICAgIHJldHVybiAnKCcgKyB0aGlzLmxpbmVOdW1iZXIgKyAnLCcgKyB0aGlzLmNvbHVtbiArICcpJztcclxuICAgIH1cclxuICAgIC8vIC0tLVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBgUG9zaXRpb25gIGZyb20gYW4gYElQb3NpdGlvbmAuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBsaWZ0KHBvcykge1xyXG4gICAgICAgIHJldHVybiBuZXcgUG9zaXRpb24ocG9zLmxpbmVOdW1iZXIsIHBvcy5jb2x1bW4pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0IGlmIGBvYmpgIGlzIGFuIGBJUG9zaXRpb25gLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaXNJUG9zaXRpb24ob2JqKSB7XHJcbiAgICAgICAgcmV0dXJuIChvYmpcclxuICAgICAgICAgICAgJiYgKHR5cGVvZiBvYmoubGluZU51bWJlciA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgICAgICYmICh0eXBlb2Ygb2JqLmNvbHVtbiA9PT0gJ251bWJlcicpKTtcclxuICAgIH1cclxufVxyXG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuaW1wb3J0IHsgUG9zaXRpb24gfSBmcm9tICcuL3Bvc2l0aW9uLmpzJztcclxuLyoqXHJcbiAqIEEgcmFuZ2UgaW4gdGhlIGVkaXRvci4gKHN0YXJ0TGluZU51bWJlcixzdGFydENvbHVtbikgaXMgPD0gKGVuZExpbmVOdW1iZXIsZW5kQ29sdW1uKVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJhbmdlIHtcclxuICAgIGNvbnN0cnVjdG9yKHN0YXJ0TGluZU51bWJlciwgc3RhcnRDb2x1bW4sIGVuZExpbmVOdW1iZXIsIGVuZENvbHVtbikge1xyXG4gICAgICAgIGlmICgoc3RhcnRMaW5lTnVtYmVyID4gZW5kTGluZU51bWJlcikgfHwgKHN0YXJ0TGluZU51bWJlciA9PT0gZW5kTGluZU51bWJlciAmJiBzdGFydENvbHVtbiA+IGVuZENvbHVtbikpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFydExpbmVOdW1iZXIgPSBlbmRMaW5lTnVtYmVyO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0Q29sdW1uID0gZW5kQ29sdW1uO1xyXG4gICAgICAgICAgICB0aGlzLmVuZExpbmVOdW1iZXIgPSBzdGFydExpbmVOdW1iZXI7XHJcbiAgICAgICAgICAgIHRoaXMuZW5kQ29sdW1uID0gc3RhcnRDb2x1bW47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0TGluZU51bWJlciA9IHN0YXJ0TGluZU51bWJlcjtcclxuICAgICAgICAgICAgdGhpcy5zdGFydENvbHVtbiA9IHN0YXJ0Q29sdW1uO1xyXG4gICAgICAgICAgICB0aGlzLmVuZExpbmVOdW1iZXIgPSBlbmRMaW5lTnVtYmVyO1xyXG4gICAgICAgICAgICB0aGlzLmVuZENvbHVtbiA9IGVuZENvbHVtbjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRlc3QgaWYgdGhpcyByYW5nZSBpcyBlbXB0eS5cclxuICAgICAqL1xyXG4gICAgaXNFbXB0eSgpIHtcclxuICAgICAgICByZXR1cm4gUmFuZ2UuaXNFbXB0eSh0aGlzKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGVzdCBpZiBgcmFuZ2VgIGlzIGVtcHR5LlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaXNFbXB0eShyYW5nZSkge1xyXG4gICAgICAgIHJldHVybiAocmFuZ2Uuc3RhcnRMaW5lTnVtYmVyID09PSByYW5nZS5lbmRMaW5lTnVtYmVyICYmIHJhbmdlLnN0YXJ0Q29sdW1uID09PSByYW5nZS5lbmRDb2x1bW4pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0IGlmIHBvc2l0aW9uIGlzIGluIHRoaXMgcmFuZ2UuIElmIHRoZSBwb3NpdGlvbiBpcyBhdCB0aGUgZWRnZXMsIHdpbGwgcmV0dXJuIHRydWUuXHJcbiAgICAgKi9cclxuICAgIGNvbnRhaW5zUG9zaXRpb24ocG9zaXRpb24pIHtcclxuICAgICAgICByZXR1cm4gUmFuZ2UuY29udGFpbnNQb3NpdGlvbih0aGlzLCBwb3NpdGlvbik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRlc3QgaWYgYHBvc2l0aW9uYCBpcyBpbiBgcmFuZ2VgLiBJZiB0aGUgcG9zaXRpb24gaXMgYXQgdGhlIGVkZ2VzLCB3aWxsIHJldHVybiB0cnVlLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY29udGFpbnNQb3NpdGlvbihyYW5nZSwgcG9zaXRpb24pIHtcclxuICAgICAgICBpZiAocG9zaXRpb24ubGluZU51bWJlciA8IHJhbmdlLnN0YXJ0TGluZU51bWJlciB8fCBwb3NpdGlvbi5saW5lTnVtYmVyID4gcmFuZ2UuZW5kTGluZU51bWJlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwb3NpdGlvbi5saW5lTnVtYmVyID09PSByYW5nZS5zdGFydExpbmVOdW1iZXIgJiYgcG9zaXRpb24uY29sdW1uIDwgcmFuZ2Uuc3RhcnRDb2x1bW4pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocG9zaXRpb24ubGluZU51bWJlciA9PT0gcmFuZ2UuZW5kTGluZU51bWJlciAmJiBwb3NpdGlvbi5jb2x1bW4gPiByYW5nZS5lbmRDb2x1bW4pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGVzdCBpZiByYW5nZSBpcyBpbiB0aGlzIHJhbmdlLiBJZiB0aGUgcmFuZ2UgaXMgZXF1YWwgdG8gdGhpcyByYW5nZSwgd2lsbCByZXR1cm4gdHJ1ZS5cclxuICAgICAqL1xyXG4gICAgY29udGFpbnNSYW5nZShyYW5nZSkge1xyXG4gICAgICAgIHJldHVybiBSYW5nZS5jb250YWluc1JhbmdlKHRoaXMsIHJhbmdlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGVzdCBpZiBgb3RoZXJSYW5nZWAgaXMgaW4gYHJhbmdlYC4gSWYgdGhlIHJhbmdlcyBhcmUgZXF1YWwsIHdpbGwgcmV0dXJuIHRydWUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjb250YWluc1JhbmdlKHJhbmdlLCBvdGhlclJhbmdlKSB7XHJcbiAgICAgICAgaWYgKG90aGVyUmFuZ2Uuc3RhcnRMaW5lTnVtYmVyIDwgcmFuZ2Uuc3RhcnRMaW5lTnVtYmVyIHx8IG90aGVyUmFuZ2UuZW5kTGluZU51bWJlciA8IHJhbmdlLnN0YXJ0TGluZU51bWJlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvdGhlclJhbmdlLnN0YXJ0TGluZU51bWJlciA+IHJhbmdlLmVuZExpbmVOdW1iZXIgfHwgb3RoZXJSYW5nZS5lbmRMaW5lTnVtYmVyID4gcmFuZ2UuZW5kTGluZU51bWJlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvdGhlclJhbmdlLnN0YXJ0TGluZU51bWJlciA9PT0gcmFuZ2Uuc3RhcnRMaW5lTnVtYmVyICYmIG90aGVyUmFuZ2Uuc3RhcnRDb2x1bW4gPCByYW5nZS5zdGFydENvbHVtbikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvdGhlclJhbmdlLmVuZExpbmVOdW1iZXIgPT09IHJhbmdlLmVuZExpbmVOdW1iZXIgJiYgb3RoZXJSYW5nZS5lbmRDb2x1bW4gPiByYW5nZS5lbmRDb2x1bW4pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGVzdCBpZiBgcmFuZ2VgIGlzIHN0cmljdGx5IGluIHRoaXMgcmFuZ2UuIGByYW5nZWAgbXVzdCBzdGFydCBhZnRlciBhbmQgZW5kIGJlZm9yZSB0aGlzIHJhbmdlIGZvciB0aGUgcmVzdWx0IHRvIGJlIHRydWUuXHJcbiAgICAgKi9cclxuICAgIHN0cmljdENvbnRhaW5zUmFuZ2UocmFuZ2UpIHtcclxuICAgICAgICByZXR1cm4gUmFuZ2Uuc3RyaWN0Q29udGFpbnNSYW5nZSh0aGlzLCByYW5nZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRlc3QgaWYgYG90aGVyUmFuZ2VgIGlzIHN0cmluY3RseSBpbiBgcmFuZ2VgIChtdXN0IHN0YXJ0IGFmdGVyLCBhbmQgZW5kIGJlZm9yZSkuIElmIHRoZSByYW5nZXMgYXJlIGVxdWFsLCB3aWxsIHJldHVybiBmYWxzZS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIHN0cmljdENvbnRhaW5zUmFuZ2UocmFuZ2UsIG90aGVyUmFuZ2UpIHtcclxuICAgICAgICBpZiAob3RoZXJSYW5nZS5zdGFydExpbmVOdW1iZXIgPCByYW5nZS5zdGFydExpbmVOdW1iZXIgfHwgb3RoZXJSYW5nZS5lbmRMaW5lTnVtYmVyIDwgcmFuZ2Uuc3RhcnRMaW5lTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG90aGVyUmFuZ2Uuc3RhcnRMaW5lTnVtYmVyID4gcmFuZ2UuZW5kTGluZU51bWJlciB8fCBvdGhlclJhbmdlLmVuZExpbmVOdW1iZXIgPiByYW5nZS5lbmRMaW5lTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG90aGVyUmFuZ2Uuc3RhcnRMaW5lTnVtYmVyID09PSByYW5nZS5zdGFydExpbmVOdW1iZXIgJiYgb3RoZXJSYW5nZS5zdGFydENvbHVtbiA8PSByYW5nZS5zdGFydENvbHVtbikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvdGhlclJhbmdlLmVuZExpbmVOdW1iZXIgPT09IHJhbmdlLmVuZExpbmVOdW1iZXIgJiYgb3RoZXJSYW5nZS5lbmRDb2x1bW4gPj0gcmFuZ2UuZW5kQ29sdW1uKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEEgcmV1bmlvbiBvZiB0aGUgdHdvIHJhbmdlcy5cclxuICAgICAqIFRoZSBzbWFsbGVzdCBwb3NpdGlvbiB3aWxsIGJlIHVzZWQgYXMgdGhlIHN0YXJ0IHBvaW50LCBhbmQgdGhlIGxhcmdlc3Qgb25lIGFzIHRoZSBlbmQgcG9pbnQuXHJcbiAgICAgKi9cclxuICAgIHBsdXNSYW5nZShyYW5nZSkge1xyXG4gICAgICAgIHJldHVybiBSYW5nZS5wbHVzUmFuZ2UodGhpcywgcmFuZ2UpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBIHJldW5pb24gb2YgdGhlIHR3byByYW5nZXMuXHJcbiAgICAgKiBUaGUgc21hbGxlc3QgcG9zaXRpb24gd2lsbCBiZSB1c2VkIGFzIHRoZSBzdGFydCBwb2ludCwgYW5kIHRoZSBsYXJnZXN0IG9uZSBhcyB0aGUgZW5kIHBvaW50LlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgcGx1c1JhbmdlKGEsIGIpIHtcclxuICAgICAgICBsZXQgc3RhcnRMaW5lTnVtYmVyO1xyXG4gICAgICAgIGxldCBzdGFydENvbHVtbjtcclxuICAgICAgICBsZXQgZW5kTGluZU51bWJlcjtcclxuICAgICAgICBsZXQgZW5kQ29sdW1uO1xyXG4gICAgICAgIGlmIChiLnN0YXJ0TGluZU51bWJlciA8IGEuc3RhcnRMaW5lTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0TGluZU51bWJlciA9IGIuc3RhcnRMaW5lTnVtYmVyO1xyXG4gICAgICAgICAgICBzdGFydENvbHVtbiA9IGIuc3RhcnRDb2x1bW47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGIuc3RhcnRMaW5lTnVtYmVyID09PSBhLnN0YXJ0TGluZU51bWJlcikge1xyXG4gICAgICAgICAgICBzdGFydExpbmVOdW1iZXIgPSBiLnN0YXJ0TGluZU51bWJlcjtcclxuICAgICAgICAgICAgc3RhcnRDb2x1bW4gPSBNYXRoLm1pbihiLnN0YXJ0Q29sdW1uLCBhLnN0YXJ0Q29sdW1uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHN0YXJ0TGluZU51bWJlciA9IGEuc3RhcnRMaW5lTnVtYmVyO1xyXG4gICAgICAgICAgICBzdGFydENvbHVtbiA9IGEuc3RhcnRDb2x1bW47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChiLmVuZExpbmVOdW1iZXIgPiBhLmVuZExpbmVOdW1iZXIpIHtcclxuICAgICAgICAgICAgZW5kTGluZU51bWJlciA9IGIuZW5kTGluZU51bWJlcjtcclxuICAgICAgICAgICAgZW5kQ29sdW1uID0gYi5lbmRDb2x1bW47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGIuZW5kTGluZU51bWJlciA9PT0gYS5lbmRMaW5lTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGVuZExpbmVOdW1iZXIgPSBiLmVuZExpbmVOdW1iZXI7XHJcbiAgICAgICAgICAgIGVuZENvbHVtbiA9IE1hdGgubWF4KGIuZW5kQ29sdW1uLCBhLmVuZENvbHVtbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlbmRMaW5lTnVtYmVyID0gYS5lbmRMaW5lTnVtYmVyO1xyXG4gICAgICAgICAgICBlbmRDb2x1bW4gPSBhLmVuZENvbHVtbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSYW5nZShzdGFydExpbmVOdW1iZXIsIHN0YXJ0Q29sdW1uLCBlbmRMaW5lTnVtYmVyLCBlbmRDb2x1bW4pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBIGludGVyc2VjdGlvbiBvZiB0aGUgdHdvIHJhbmdlcy5cclxuICAgICAqL1xyXG4gICAgaW50ZXJzZWN0UmFuZ2VzKHJhbmdlKSB7XHJcbiAgICAgICAgcmV0dXJuIFJhbmdlLmludGVyc2VjdFJhbmdlcyh0aGlzLCByYW5nZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEEgaW50ZXJzZWN0aW9uIG9mIHRoZSB0d28gcmFuZ2VzLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaW50ZXJzZWN0UmFuZ2VzKGEsIGIpIHtcclxuICAgICAgICBsZXQgcmVzdWx0U3RhcnRMaW5lTnVtYmVyID0gYS5zdGFydExpbmVOdW1iZXI7XHJcbiAgICAgICAgbGV0IHJlc3VsdFN0YXJ0Q29sdW1uID0gYS5zdGFydENvbHVtbjtcclxuICAgICAgICBsZXQgcmVzdWx0RW5kTGluZU51bWJlciA9IGEuZW5kTGluZU51bWJlcjtcclxuICAgICAgICBsZXQgcmVzdWx0RW5kQ29sdW1uID0gYS5lbmRDb2x1bW47XHJcbiAgICAgICAgbGV0IG90aGVyU3RhcnRMaW5lTnVtYmVyID0gYi5zdGFydExpbmVOdW1iZXI7XHJcbiAgICAgICAgbGV0IG90aGVyU3RhcnRDb2x1bW4gPSBiLnN0YXJ0Q29sdW1uO1xyXG4gICAgICAgIGxldCBvdGhlckVuZExpbmVOdW1iZXIgPSBiLmVuZExpbmVOdW1iZXI7XHJcbiAgICAgICAgbGV0IG90aGVyRW5kQ29sdW1uID0gYi5lbmRDb2x1bW47XHJcbiAgICAgICAgaWYgKHJlc3VsdFN0YXJ0TGluZU51bWJlciA8IG90aGVyU3RhcnRMaW5lTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFN0YXJ0TGluZU51bWJlciA9IG90aGVyU3RhcnRMaW5lTnVtYmVyO1xyXG4gICAgICAgICAgICByZXN1bHRTdGFydENvbHVtbiA9IG90aGVyU3RhcnRDb2x1bW47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHJlc3VsdFN0YXJ0TGluZU51bWJlciA9PT0gb3RoZXJTdGFydExpbmVOdW1iZXIpIHtcclxuICAgICAgICAgICAgcmVzdWx0U3RhcnRDb2x1bW4gPSBNYXRoLm1heChyZXN1bHRTdGFydENvbHVtbiwgb3RoZXJTdGFydENvbHVtbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZXN1bHRFbmRMaW5lTnVtYmVyID4gb3RoZXJFbmRMaW5lTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdEVuZExpbmVOdW1iZXIgPSBvdGhlckVuZExpbmVOdW1iZXI7XHJcbiAgICAgICAgICAgIHJlc3VsdEVuZENvbHVtbiA9IG90aGVyRW5kQ29sdW1uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChyZXN1bHRFbmRMaW5lTnVtYmVyID09PSBvdGhlckVuZExpbmVOdW1iZXIpIHtcclxuICAgICAgICAgICAgcmVzdWx0RW5kQ29sdW1uID0gTWF0aC5taW4ocmVzdWx0RW5kQ29sdW1uLCBvdGhlckVuZENvbHVtbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIENoZWNrIGlmIHNlbGVjdGlvbiBpcyBub3cgZW1wdHlcclxuICAgICAgICBpZiAocmVzdWx0U3RhcnRMaW5lTnVtYmVyID4gcmVzdWx0RW5kTGluZU51bWJlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlc3VsdFN0YXJ0TGluZU51bWJlciA9PT0gcmVzdWx0RW5kTGluZU51bWJlciAmJiByZXN1bHRTdGFydENvbHVtbiA+IHJlc3VsdEVuZENvbHVtbikge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSYW5nZShyZXN1bHRTdGFydExpbmVOdW1iZXIsIHJlc3VsdFN0YXJ0Q29sdW1uLCByZXN1bHRFbmRMaW5lTnVtYmVyLCByZXN1bHRFbmRDb2x1bW4pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0IGlmIHRoaXMgcmFuZ2UgZXF1YWxzIG90aGVyLlxyXG4gICAgICovXHJcbiAgICBlcXVhbHNSYW5nZShvdGhlcikge1xyXG4gICAgICAgIHJldHVybiBSYW5nZS5lcXVhbHNSYW5nZSh0aGlzLCBvdGhlcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRlc3QgaWYgcmFuZ2UgYGFgIGVxdWFscyBgYmAuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBlcXVhbHNSYW5nZShhLCBiKSB7XHJcbiAgICAgICAgcmV0dXJuICghIWEgJiZcclxuICAgICAgICAgICAgISFiICYmXHJcbiAgICAgICAgICAgIGEuc3RhcnRMaW5lTnVtYmVyID09PSBiLnN0YXJ0TGluZU51bWJlciAmJlxyXG4gICAgICAgICAgICBhLnN0YXJ0Q29sdW1uID09PSBiLnN0YXJ0Q29sdW1uICYmXHJcbiAgICAgICAgICAgIGEuZW5kTGluZU51bWJlciA9PT0gYi5lbmRMaW5lTnVtYmVyICYmXHJcbiAgICAgICAgICAgIGEuZW5kQ29sdW1uID09PSBiLmVuZENvbHVtbik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybiB0aGUgZW5kIHBvc2l0aW9uICh3aGljaCB3aWxsIGJlIGFmdGVyIG9yIGVxdWFsIHRvIHRoZSBzdGFydCBwb3NpdGlvbilcclxuICAgICAqL1xyXG4gICAgZ2V0RW5kUG9zaXRpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIFJhbmdlLmdldEVuZFBvc2l0aW9uKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gdGhlIGVuZCBwb3NpdGlvbiAod2hpY2ggd2lsbCBiZSBhZnRlciBvciBlcXVhbCB0byB0aGUgc3RhcnQgcG9zaXRpb24pXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXRFbmRQb3NpdGlvbihyYW5nZSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUG9zaXRpb24ocmFuZ2UuZW5kTGluZU51bWJlciwgcmFuZ2UuZW5kQ29sdW1uKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIHRoZSBzdGFydCBwb3NpdGlvbiAod2hpY2ggd2lsbCBiZSBiZWZvcmUgb3IgZXF1YWwgdG8gdGhlIGVuZCBwb3NpdGlvbilcclxuICAgICAqL1xyXG4gICAgZ2V0U3RhcnRQb3NpdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gUmFuZ2UuZ2V0U3RhcnRQb3NpdGlvbih0aGlzKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIHRoZSBzdGFydCBwb3NpdGlvbiAod2hpY2ggd2lsbCBiZSBiZWZvcmUgb3IgZXF1YWwgdG8gdGhlIGVuZCBwb3NpdGlvbilcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldFN0YXJ0UG9zaXRpb24ocmFuZ2UpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFBvc2l0aW9uKHJhbmdlLnN0YXJ0TGluZU51bWJlciwgcmFuZ2Uuc3RhcnRDb2x1bW4pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmFuc2Zvcm0gdG8gYSB1c2VyIHByZXNlbnRhYmxlIHN0cmluZyByZXByZXNlbnRhdGlvbi5cclxuICAgICAqL1xyXG4gICAgdG9TdHJpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuICdbJyArIHRoaXMuc3RhcnRMaW5lTnVtYmVyICsgJywnICsgdGhpcy5zdGFydENvbHVtbiArICcgLT4gJyArIHRoaXMuZW5kTGluZU51bWJlciArICcsJyArIHRoaXMuZW5kQ29sdW1uICsgJ10nO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBuZXcgcmFuZ2UgdXNpbmcgdGhpcyByYW5nZSdzIHN0YXJ0IHBvc2l0aW9uLCBhbmQgdXNpbmcgZW5kTGluZU51bWJlciBhbmQgZW5kQ29sdW1uIGFzIHRoZSBlbmQgcG9zaXRpb24uXHJcbiAgICAgKi9cclxuICAgIHNldEVuZFBvc2l0aW9uKGVuZExpbmVOdW1iZXIsIGVuZENvbHVtbikge1xyXG4gICAgICAgIHJldHVybiBuZXcgUmFuZ2UodGhpcy5zdGFydExpbmVOdW1iZXIsIHRoaXMuc3RhcnRDb2x1bW4sIGVuZExpbmVOdW1iZXIsIGVuZENvbHVtbik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhIG5ldyByYW5nZSB1c2luZyB0aGlzIHJhbmdlJ3MgZW5kIHBvc2l0aW9uLCBhbmQgdXNpbmcgc3RhcnRMaW5lTnVtYmVyIGFuZCBzdGFydENvbHVtbiBhcyB0aGUgc3RhcnQgcG9zaXRpb24uXHJcbiAgICAgKi9cclxuICAgIHNldFN0YXJ0UG9zaXRpb24oc3RhcnRMaW5lTnVtYmVyLCBzdGFydENvbHVtbikge1xyXG4gICAgICAgIHJldHVybiBuZXcgUmFuZ2Uoc3RhcnRMaW5lTnVtYmVyLCBzdGFydENvbHVtbiwgdGhpcy5lbmRMaW5lTnVtYmVyLCB0aGlzLmVuZENvbHVtbik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhIG5ldyBlbXB0eSByYW5nZSB1c2luZyB0aGlzIHJhbmdlJ3Mgc3RhcnQgcG9zaXRpb24uXHJcbiAgICAgKi9cclxuICAgIGNvbGxhcHNlVG9TdGFydCgpIHtcclxuICAgICAgICByZXR1cm4gUmFuZ2UuY29sbGFwc2VUb1N0YXJ0KHRoaXMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBuZXcgZW1wdHkgcmFuZ2UgdXNpbmcgdGhpcyByYW5nZSdzIHN0YXJ0IHBvc2l0aW9uLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY29sbGFwc2VUb1N0YXJ0KHJhbmdlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSYW5nZShyYW5nZS5zdGFydExpbmVOdW1iZXIsIHJhbmdlLnN0YXJ0Q29sdW1uLCByYW5nZS5zdGFydExpbmVOdW1iZXIsIHJhbmdlLnN0YXJ0Q29sdW1uKTtcclxuICAgIH1cclxuICAgIC8vIC0tLVxyXG4gICAgc3RhdGljIGZyb21Qb3NpdGlvbnMoc3RhcnQsIGVuZCA9IHN0YXJ0KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSYW5nZShzdGFydC5saW5lTnVtYmVyLCBzdGFydC5jb2x1bW4sIGVuZC5saW5lTnVtYmVyLCBlbmQuY29sdW1uKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBsaWZ0KHJhbmdlKSB7XHJcbiAgICAgICAgaWYgKCFyYW5nZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSYW5nZShyYW5nZS5zdGFydExpbmVOdW1iZXIsIHJhbmdlLnN0YXJ0Q29sdW1uLCByYW5nZS5lbmRMaW5lTnVtYmVyLCByYW5nZS5lbmRDb2x1bW4pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0IGlmIGBvYmpgIGlzIGFuIGBJUmFuZ2VgLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaXNJUmFuZ2Uob2JqKSB7XHJcbiAgICAgICAgcmV0dXJuIChvYmpcclxuICAgICAgICAgICAgJiYgKHR5cGVvZiBvYmouc3RhcnRMaW5lTnVtYmVyID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgJiYgKHR5cGVvZiBvYmouc3RhcnRDb2x1bW4gPT09ICdudW1iZXInKVxyXG4gICAgICAgICAgICAmJiAodHlwZW9mIG9iai5lbmRMaW5lTnVtYmVyID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgJiYgKHR5cGVvZiBvYmouZW5kQ29sdW1uID09PSAnbnVtYmVyJykpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0IGlmIHRoZSB0d28gcmFuZ2VzIGFyZSB0b3VjaGluZyBpbiBhbnkgd2F5LlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYXJlSW50ZXJzZWN0aW5nT3JUb3VjaGluZyhhLCBiKSB7XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgYGFgIGlzIGJlZm9yZSBgYmBcclxuICAgICAgICBpZiAoYS5lbmRMaW5lTnVtYmVyIDwgYi5zdGFydExpbmVOdW1iZXIgfHwgKGEuZW5kTGluZU51bWJlciA9PT0gYi5zdGFydExpbmVOdW1iZXIgJiYgYS5lbmRDb2x1bW4gPCBiLnN0YXJ0Q29sdW1uKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIENoZWNrIGlmIGBiYCBpcyBiZWZvcmUgYGFgXHJcbiAgICAgICAgaWYgKGIuZW5kTGluZU51bWJlciA8IGEuc3RhcnRMaW5lTnVtYmVyIHx8IChiLmVuZExpbmVOdW1iZXIgPT09IGEuc3RhcnRMaW5lTnVtYmVyICYmIGIuZW5kQ29sdW1uIDwgYS5zdGFydENvbHVtbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUaGVzZSByYW5nZXMgbXVzdCBpbnRlcnNlY3RcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGVzdCBpZiB0aGUgdHdvIHJhbmdlcyBhcmUgaW50ZXJzZWN0aW5nLiBJZiB0aGUgcmFuZ2VzIGFyZSB0b3VjaGluZyBpdCByZXR1cm5zIHRydWUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBhcmVJbnRlcnNlY3RpbmcoYSwgYikge1xyXG4gICAgICAgIC8vIENoZWNrIGlmIGBhYCBpcyBiZWZvcmUgYGJgXHJcbiAgICAgICAgaWYgKGEuZW5kTGluZU51bWJlciA8IGIuc3RhcnRMaW5lTnVtYmVyIHx8IChhLmVuZExpbmVOdW1iZXIgPT09IGIuc3RhcnRMaW5lTnVtYmVyICYmIGEuZW5kQ29sdW1uIDw9IGIuc3RhcnRDb2x1bW4pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgYGJgIGlzIGJlZm9yZSBgYWBcclxuICAgICAgICBpZiAoYi5lbmRMaW5lTnVtYmVyIDwgYS5zdGFydExpbmVOdW1iZXIgfHwgKGIuZW5kTGluZU51bWJlciA9PT0gYS5zdGFydExpbmVOdW1iZXIgJiYgYi5lbmRDb2x1bW4gPD0gYS5zdGFydENvbHVtbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUaGVzZSByYW5nZXMgbXVzdCBpbnRlcnNlY3RcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQSBmdW5jdGlvbiB0aGF0IGNvbXBhcmVzIHJhbmdlcywgdXNlZnVsIGZvciBzb3J0aW5nIHJhbmdlc1xyXG4gICAgICogSXQgd2lsbCBmaXJzdCBjb21wYXJlIHJhbmdlcyBvbiB0aGUgc3RhcnRQb3NpdGlvbiBhbmQgdGhlbiBvbiB0aGUgZW5kUG9zaXRpb25cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNvbXBhcmVSYW5nZXNVc2luZ1N0YXJ0cyhhLCBiKSB7XHJcbiAgICAgICAgaWYgKGEgJiYgYikge1xyXG4gICAgICAgICAgICBjb25zdCBhU3RhcnRMaW5lTnVtYmVyID0gYS5zdGFydExpbmVOdW1iZXIgfCAwO1xyXG4gICAgICAgICAgICBjb25zdCBiU3RhcnRMaW5lTnVtYmVyID0gYi5zdGFydExpbmVOdW1iZXIgfCAwO1xyXG4gICAgICAgICAgICBpZiAoYVN0YXJ0TGluZU51bWJlciA9PT0gYlN0YXJ0TGluZU51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYVN0YXJ0Q29sdW1uID0gYS5zdGFydENvbHVtbiB8IDA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBiU3RhcnRDb2x1bW4gPSBiLnN0YXJ0Q29sdW1uIHwgMDtcclxuICAgICAgICAgICAgICAgIGlmIChhU3RhcnRDb2x1bW4gPT09IGJTdGFydENvbHVtbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFFbmRMaW5lTnVtYmVyID0gYS5lbmRMaW5lTnVtYmVyIHwgMDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBiRW5kTGluZU51bWJlciA9IGIuZW5kTGluZU51bWJlciB8IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFFbmRMaW5lTnVtYmVyID09PSBiRW5kTGluZU51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhRW5kQ29sdW1uID0gYS5lbmRDb2x1bW4gfCAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiRW5kQ29sdW1uID0gYi5lbmRDb2x1bW4gfCAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYUVuZENvbHVtbiAtIGJFbmRDb2x1bW47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhRW5kTGluZU51bWJlciAtIGJFbmRMaW5lTnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFTdGFydENvbHVtbiAtIGJTdGFydENvbHVtbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYVN0YXJ0TGluZU51bWJlciAtIGJTdGFydExpbmVOdW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGFFeGlzdHMgPSAoYSA/IDEgOiAwKTtcclxuICAgICAgICBjb25zdCBiRXhpc3RzID0gKGIgPyAxIDogMCk7XHJcbiAgICAgICAgcmV0dXJuIGFFeGlzdHMgLSBiRXhpc3RzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBIGZ1bmN0aW9uIHRoYXQgY29tcGFyZXMgcmFuZ2VzLCB1c2VmdWwgZm9yIHNvcnRpbmcgcmFuZ2VzXHJcbiAgICAgKiBJdCB3aWxsIGZpcnN0IGNvbXBhcmUgcmFuZ2VzIG9uIHRoZSBlbmRQb3NpdGlvbiBhbmQgdGhlbiBvbiB0aGUgc3RhcnRQb3NpdGlvblxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY29tcGFyZVJhbmdlc1VzaW5nRW5kcyhhLCBiKSB7XHJcbiAgICAgICAgaWYgKGEuZW5kTGluZU51bWJlciA9PT0gYi5lbmRMaW5lTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGlmIChhLmVuZENvbHVtbiA9PT0gYi5lbmRDb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChhLnN0YXJ0TGluZU51bWJlciA9PT0gYi5zdGFydExpbmVOdW1iZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5zdGFydENvbHVtbiAtIGIuc3RhcnRDb2x1bW47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYS5zdGFydExpbmVOdW1iZXIgLSBiLnN0YXJ0TGluZU51bWJlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYS5lbmRDb2x1bW4gLSBiLmVuZENvbHVtbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGEuZW5kTGluZU51bWJlciAtIGIuZW5kTGluZU51bWJlcjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGVzdCBpZiB0aGUgcmFuZ2Ugc3BhbnMgbXVsdGlwbGUgbGluZXMuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBzcGFuc011bHRpcGxlTGluZXMocmFuZ2UpIHtcclxuICAgICAgICByZXR1cm4gcmFuZ2UuZW5kTGluZU51bWJlciA+IHJhbmdlLnN0YXJ0TGluZU51bWJlcjtcclxuICAgIH1cclxufVxyXG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuaW1wb3J0IHsgTGNzRGlmZiB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL2RpZmYvZGlmZi5qcyc7XHJcbmltcG9ydCAqIGFzIHN0cmluZ3MgZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vc3RyaW5ncy5qcyc7XHJcbmNvbnN0IE1JTklNVU1fTUFUQ0hJTkdfQ0hBUkFDVEVSX0xFTkdUSCA9IDM7XHJcbmZ1bmN0aW9uIGNvbXB1dGVEaWZmKG9yaWdpbmFsU2VxdWVuY2UsIG1vZGlmaWVkU2VxdWVuY2UsIGNvbnRpbnVlUHJvY2Vzc2luZ1ByZWRpY2F0ZSwgcHJldHR5KSB7XHJcbiAgICBjb25zdCBkaWZmQWxnbyA9IG5ldyBMY3NEaWZmKG9yaWdpbmFsU2VxdWVuY2UsIG1vZGlmaWVkU2VxdWVuY2UsIGNvbnRpbnVlUHJvY2Vzc2luZ1ByZWRpY2F0ZSk7XHJcbiAgICByZXR1cm4gZGlmZkFsZ28uQ29tcHV0ZURpZmYocHJldHR5KTtcclxufVxyXG5jbGFzcyBMaW5lU2VxdWVuY2Uge1xyXG4gICAgY29uc3RydWN0b3IobGluZXMpIHtcclxuICAgICAgICBjb25zdCBzdGFydENvbHVtbnMgPSBbXTtcclxuICAgICAgICBjb25zdCBlbmRDb2x1bW5zID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IGxpbmVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0Q29sdW1uc1tpXSA9IGdldEZpcnN0Tm9uQmxhbmtDb2x1bW4obGluZXNbaV0sIDEpO1xyXG4gICAgICAgICAgICBlbmRDb2x1bW5zW2ldID0gZ2V0TGFzdE5vbkJsYW5rQ29sdW1uKGxpbmVzW2ldLCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5saW5lcyA9IGxpbmVzO1xyXG4gICAgICAgIHRoaXMuX3N0YXJ0Q29sdW1ucyA9IHN0YXJ0Q29sdW1ucztcclxuICAgICAgICB0aGlzLl9lbmRDb2x1bW5zID0gZW5kQ29sdW1ucztcclxuICAgIH1cclxuICAgIGdldEVsZW1lbnRzKCkge1xyXG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMubGluZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgZWxlbWVudHNbaV0gPSB0aGlzLmxpbmVzW2ldLnN1YnN0cmluZyh0aGlzLl9zdGFydENvbHVtbnNbaV0gLSAxLCB0aGlzLl9lbmRDb2x1bW5zW2ldIC0gMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlbGVtZW50cztcclxuICAgIH1cclxuICAgIGdldFN0YXJ0TGluZU51bWJlcihpKSB7XHJcbiAgICAgICAgcmV0dXJuIGkgKyAxO1xyXG4gICAgfVxyXG4gICAgZ2V0RW5kTGluZU51bWJlcihpKSB7XHJcbiAgICAgICAgcmV0dXJuIGkgKyAxO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlQ2hhclNlcXVlbmNlKHNob3VsZElnbm9yZVRyaW1XaGl0ZXNwYWNlLCBzdGFydEluZGV4LCBlbmRJbmRleCkge1xyXG4gICAgICAgIGNvbnN0IGNoYXJDb2RlcyA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGxpbmVOdW1iZXJzID0gW107XHJcbiAgICAgICAgY29uc3QgY29sdW1ucyA9IFtdO1xyXG4gICAgICAgIGxldCBsZW4gPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gc3RhcnRJbmRleDsgaW5kZXggPD0gZW5kSW5kZXg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSB0aGlzLmxpbmVzW2luZGV4XTtcclxuICAgICAgICAgICAgY29uc3Qgc3RhcnRDb2x1bW4gPSAoc2hvdWxkSWdub3JlVHJpbVdoaXRlc3BhY2UgPyB0aGlzLl9zdGFydENvbHVtbnNbaW5kZXhdIDogMSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZENvbHVtbiA9IChzaG91bGRJZ25vcmVUcmltV2hpdGVzcGFjZSA/IHRoaXMuX2VuZENvbHVtbnNbaW5kZXhdIDogbGluZUNvbnRlbnQubGVuZ3RoICsgMSk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGNvbCA9IHN0YXJ0Q29sdW1uOyBjb2wgPCBlbmRDb2x1bW47IGNvbCsrKSB7XHJcbiAgICAgICAgICAgICAgICBjaGFyQ29kZXNbbGVuXSA9IGxpbmVDb250ZW50LmNoYXJDb2RlQXQoY29sIC0gMSk7XHJcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyc1tsZW5dID0gaW5kZXggKyAxO1xyXG4gICAgICAgICAgICAgICAgY29sdW1uc1tsZW5dID0gY29sO1xyXG4gICAgICAgICAgICAgICAgbGVuKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDaGFyU2VxdWVuY2UoY2hhckNvZGVzLCBsaW5lTnVtYmVycywgY29sdW1ucyk7XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgQ2hhclNlcXVlbmNlIHtcclxuICAgIGNvbnN0cnVjdG9yKGNoYXJDb2RlcywgbGluZU51bWJlcnMsIGNvbHVtbnMpIHtcclxuICAgICAgICB0aGlzLl9jaGFyQ29kZXMgPSBjaGFyQ29kZXM7XHJcbiAgICAgICAgdGhpcy5fbGluZU51bWJlcnMgPSBsaW5lTnVtYmVycztcclxuICAgICAgICB0aGlzLl9jb2x1bW5zID0gY29sdW1ucztcclxuICAgIH1cclxuICAgIGdldEVsZW1lbnRzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jaGFyQ29kZXM7XHJcbiAgICB9XHJcbiAgICBnZXRTdGFydExpbmVOdW1iZXIoaSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9saW5lTnVtYmVyc1tpXTtcclxuICAgIH1cclxuICAgIGdldFN0YXJ0Q29sdW1uKGkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29sdW1uc1tpXTtcclxuICAgIH1cclxuICAgIGdldEVuZExpbmVOdW1iZXIoaSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9saW5lTnVtYmVyc1tpXTtcclxuICAgIH1cclxuICAgIGdldEVuZENvbHVtbihpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbHVtbnNbaV0gKyAxO1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIENoYXJDaGFuZ2Uge1xyXG4gICAgY29uc3RydWN0b3Iob3JpZ2luYWxTdGFydExpbmVOdW1iZXIsIG9yaWdpbmFsU3RhcnRDb2x1bW4sIG9yaWdpbmFsRW5kTGluZU51bWJlciwgb3JpZ2luYWxFbmRDb2x1bW4sIG1vZGlmaWVkU3RhcnRMaW5lTnVtYmVyLCBtb2RpZmllZFN0YXJ0Q29sdW1uLCBtb2RpZmllZEVuZExpbmVOdW1iZXIsIG1vZGlmaWVkRW5kQ29sdW1uKSB7XHJcbiAgICAgICAgdGhpcy5vcmlnaW5hbFN0YXJ0TGluZU51bWJlciA9IG9yaWdpbmFsU3RhcnRMaW5lTnVtYmVyO1xyXG4gICAgICAgIHRoaXMub3JpZ2luYWxTdGFydENvbHVtbiA9IG9yaWdpbmFsU3RhcnRDb2x1bW47XHJcbiAgICAgICAgdGhpcy5vcmlnaW5hbEVuZExpbmVOdW1iZXIgPSBvcmlnaW5hbEVuZExpbmVOdW1iZXI7XHJcbiAgICAgICAgdGhpcy5vcmlnaW5hbEVuZENvbHVtbiA9IG9yaWdpbmFsRW5kQ29sdW1uO1xyXG4gICAgICAgIHRoaXMubW9kaWZpZWRTdGFydExpbmVOdW1iZXIgPSBtb2RpZmllZFN0YXJ0TGluZU51bWJlcjtcclxuICAgICAgICB0aGlzLm1vZGlmaWVkU3RhcnRDb2x1bW4gPSBtb2RpZmllZFN0YXJ0Q29sdW1uO1xyXG4gICAgICAgIHRoaXMubW9kaWZpZWRFbmRMaW5lTnVtYmVyID0gbW9kaWZpZWRFbmRMaW5lTnVtYmVyO1xyXG4gICAgICAgIHRoaXMubW9kaWZpZWRFbmRDb2x1bW4gPSBtb2RpZmllZEVuZENvbHVtbjtcclxuICAgIH1cclxuICAgIHN0YXRpYyBjcmVhdGVGcm9tRGlmZkNoYW5nZShkaWZmQ2hhbmdlLCBvcmlnaW5hbENoYXJTZXF1ZW5jZSwgbW9kaWZpZWRDaGFyU2VxdWVuY2UpIHtcclxuICAgICAgICBsZXQgb3JpZ2luYWxTdGFydExpbmVOdW1iZXI7XHJcbiAgICAgICAgbGV0IG9yaWdpbmFsU3RhcnRDb2x1bW47XHJcbiAgICAgICAgbGV0IG9yaWdpbmFsRW5kTGluZU51bWJlcjtcclxuICAgICAgICBsZXQgb3JpZ2luYWxFbmRDb2x1bW47XHJcbiAgICAgICAgbGV0IG1vZGlmaWVkU3RhcnRMaW5lTnVtYmVyO1xyXG4gICAgICAgIGxldCBtb2RpZmllZFN0YXJ0Q29sdW1uO1xyXG4gICAgICAgIGxldCBtb2RpZmllZEVuZExpbmVOdW1iZXI7XHJcbiAgICAgICAgbGV0IG1vZGlmaWVkRW5kQ29sdW1uO1xyXG4gICAgICAgIGlmIChkaWZmQ2hhbmdlLm9yaWdpbmFsTGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIG9yaWdpbmFsU3RhcnRMaW5lTnVtYmVyID0gMDtcclxuICAgICAgICAgICAgb3JpZ2luYWxTdGFydENvbHVtbiA9IDA7XHJcbiAgICAgICAgICAgIG9yaWdpbmFsRW5kTGluZU51bWJlciA9IDA7XHJcbiAgICAgICAgICAgIG9yaWdpbmFsRW5kQ29sdW1uID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG9yaWdpbmFsU3RhcnRMaW5lTnVtYmVyID0gb3JpZ2luYWxDaGFyU2VxdWVuY2UuZ2V0U3RhcnRMaW5lTnVtYmVyKGRpZmZDaGFuZ2Uub3JpZ2luYWxTdGFydCk7XHJcbiAgICAgICAgICAgIG9yaWdpbmFsU3RhcnRDb2x1bW4gPSBvcmlnaW5hbENoYXJTZXF1ZW5jZS5nZXRTdGFydENvbHVtbihkaWZmQ2hhbmdlLm9yaWdpbmFsU3RhcnQpO1xyXG4gICAgICAgICAgICBvcmlnaW5hbEVuZExpbmVOdW1iZXIgPSBvcmlnaW5hbENoYXJTZXF1ZW5jZS5nZXRFbmRMaW5lTnVtYmVyKGRpZmZDaGFuZ2Uub3JpZ2luYWxTdGFydCArIGRpZmZDaGFuZ2Uub3JpZ2luYWxMZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgb3JpZ2luYWxFbmRDb2x1bW4gPSBvcmlnaW5hbENoYXJTZXF1ZW5jZS5nZXRFbmRDb2x1bW4oZGlmZkNoYW5nZS5vcmlnaW5hbFN0YXJ0ICsgZGlmZkNoYW5nZS5vcmlnaW5hbExlbmd0aCAtIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGlmZkNoYW5nZS5tb2RpZmllZExlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBtb2RpZmllZFN0YXJ0TGluZU51bWJlciA9IDA7XHJcbiAgICAgICAgICAgIG1vZGlmaWVkU3RhcnRDb2x1bW4gPSAwO1xyXG4gICAgICAgICAgICBtb2RpZmllZEVuZExpbmVOdW1iZXIgPSAwO1xyXG4gICAgICAgICAgICBtb2RpZmllZEVuZENvbHVtbiA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBtb2RpZmllZFN0YXJ0TGluZU51bWJlciA9IG1vZGlmaWVkQ2hhclNlcXVlbmNlLmdldFN0YXJ0TGluZU51bWJlcihkaWZmQ2hhbmdlLm1vZGlmaWVkU3RhcnQpO1xyXG4gICAgICAgICAgICBtb2RpZmllZFN0YXJ0Q29sdW1uID0gbW9kaWZpZWRDaGFyU2VxdWVuY2UuZ2V0U3RhcnRDb2x1bW4oZGlmZkNoYW5nZS5tb2RpZmllZFN0YXJ0KTtcclxuICAgICAgICAgICAgbW9kaWZpZWRFbmRMaW5lTnVtYmVyID0gbW9kaWZpZWRDaGFyU2VxdWVuY2UuZ2V0RW5kTGluZU51bWJlcihkaWZmQ2hhbmdlLm1vZGlmaWVkU3RhcnQgKyBkaWZmQ2hhbmdlLm1vZGlmaWVkTGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgIG1vZGlmaWVkRW5kQ29sdW1uID0gbW9kaWZpZWRDaGFyU2VxdWVuY2UuZ2V0RW5kQ29sdW1uKGRpZmZDaGFuZ2UubW9kaWZpZWRTdGFydCArIGRpZmZDaGFuZ2UubW9kaWZpZWRMZW5ndGggLSAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDaGFyQ2hhbmdlKG9yaWdpbmFsU3RhcnRMaW5lTnVtYmVyLCBvcmlnaW5hbFN0YXJ0Q29sdW1uLCBvcmlnaW5hbEVuZExpbmVOdW1iZXIsIG9yaWdpbmFsRW5kQ29sdW1uLCBtb2RpZmllZFN0YXJ0TGluZU51bWJlciwgbW9kaWZpZWRTdGFydENvbHVtbiwgbW9kaWZpZWRFbmRMaW5lTnVtYmVyLCBtb2RpZmllZEVuZENvbHVtbik7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcG9zdFByb2Nlc3NDaGFyQ2hhbmdlcyhyYXdDaGFuZ2VzKSB7XHJcbiAgICBpZiAocmF3Q2hhbmdlcy5sZW5ndGggPD0gMSkge1xyXG4gICAgICAgIHJldHVybiByYXdDaGFuZ2VzO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmVzdWx0ID0gW3Jhd0NoYW5nZXNbMF1dO1xyXG4gICAgbGV0IHByZXZDaGFuZ2UgPSByZXN1bHRbMF07XHJcbiAgICBmb3IgKGxldCBpID0gMSwgbGVuID0gcmF3Q2hhbmdlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGN1cnJDaGFuZ2UgPSByYXdDaGFuZ2VzW2ldO1xyXG4gICAgICAgIGNvbnN0IG9yaWdpbmFsTWF0Y2hpbmdMZW5ndGggPSBjdXJyQ2hhbmdlLm9yaWdpbmFsU3RhcnQgLSAocHJldkNoYW5nZS5vcmlnaW5hbFN0YXJ0ICsgcHJldkNoYW5nZS5vcmlnaW5hbExlbmd0aCk7XHJcbiAgICAgICAgY29uc3QgbW9kaWZpZWRNYXRjaGluZ0xlbmd0aCA9IGN1cnJDaGFuZ2UubW9kaWZpZWRTdGFydCAtIChwcmV2Q2hhbmdlLm1vZGlmaWVkU3RhcnQgKyBwcmV2Q2hhbmdlLm1vZGlmaWVkTGVuZ3RoKTtcclxuICAgICAgICAvLyBCb3RoIG9mIHRoZSBhYm92ZSBzaG91bGQgYmUgZXF1YWwsIGJ1dCB0aGUgY29udGludWVQcm9jZXNzaW5nUHJlZGljYXRlIG1heSBwcmV2ZW50IHRoaXMgZnJvbSBiZWluZyB0cnVlXHJcbiAgICAgICAgY29uc3QgbWF0Y2hpbmdMZW5ndGggPSBNYXRoLm1pbihvcmlnaW5hbE1hdGNoaW5nTGVuZ3RoLCBtb2RpZmllZE1hdGNoaW5nTGVuZ3RoKTtcclxuICAgICAgICBpZiAobWF0Y2hpbmdMZW5ndGggPCBNSU5JTVVNX01BVENISU5HX0NIQVJBQ1RFUl9MRU5HVEgpIHtcclxuICAgICAgICAgICAgLy8gTWVyZ2UgdGhlIGN1cnJlbnQgY2hhbmdlIGludG8gdGhlIHByZXZpb3VzIG9uZVxyXG4gICAgICAgICAgICBwcmV2Q2hhbmdlLm9yaWdpbmFsTGVuZ3RoID0gKGN1cnJDaGFuZ2Uub3JpZ2luYWxTdGFydCArIGN1cnJDaGFuZ2Uub3JpZ2luYWxMZW5ndGgpIC0gcHJldkNoYW5nZS5vcmlnaW5hbFN0YXJ0O1xyXG4gICAgICAgICAgICBwcmV2Q2hhbmdlLm1vZGlmaWVkTGVuZ3RoID0gKGN1cnJDaGFuZ2UubW9kaWZpZWRTdGFydCArIGN1cnJDaGFuZ2UubW9kaWZpZWRMZW5ndGgpIC0gcHJldkNoYW5nZS5tb2RpZmllZFN0YXJ0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gQWRkIHRoZSBjdXJyZW50IGNoYW5nZVxyXG4gICAgICAgICAgICByZXN1bHQucHVzaChjdXJyQ2hhbmdlKTtcclxuICAgICAgICAgICAgcHJldkNoYW5nZSA9IGN1cnJDaGFuZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5jbGFzcyBMaW5lQ2hhbmdlIHtcclxuICAgIGNvbnN0cnVjdG9yKG9yaWdpbmFsU3RhcnRMaW5lTnVtYmVyLCBvcmlnaW5hbEVuZExpbmVOdW1iZXIsIG1vZGlmaWVkU3RhcnRMaW5lTnVtYmVyLCBtb2RpZmllZEVuZExpbmVOdW1iZXIsIGNoYXJDaGFuZ2VzKSB7XHJcbiAgICAgICAgdGhpcy5vcmlnaW5hbFN0YXJ0TGluZU51bWJlciA9IG9yaWdpbmFsU3RhcnRMaW5lTnVtYmVyO1xyXG4gICAgICAgIHRoaXMub3JpZ2luYWxFbmRMaW5lTnVtYmVyID0gb3JpZ2luYWxFbmRMaW5lTnVtYmVyO1xyXG4gICAgICAgIHRoaXMubW9kaWZpZWRTdGFydExpbmVOdW1iZXIgPSBtb2RpZmllZFN0YXJ0TGluZU51bWJlcjtcclxuICAgICAgICB0aGlzLm1vZGlmaWVkRW5kTGluZU51bWJlciA9IG1vZGlmaWVkRW5kTGluZU51bWJlcjtcclxuICAgICAgICB0aGlzLmNoYXJDaGFuZ2VzID0gY2hhckNoYW5nZXM7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgY3JlYXRlRnJvbURpZmZSZXN1bHQoc2hvdWxkSWdub3JlVHJpbVdoaXRlc3BhY2UsIGRpZmZDaGFuZ2UsIG9yaWdpbmFsTGluZVNlcXVlbmNlLCBtb2RpZmllZExpbmVTZXF1ZW5jZSwgY29udGludWVDaGFyRGlmZiwgc2hvdWxkQ29tcHV0ZUNoYXJDaGFuZ2VzLCBzaG91bGRQb3N0UHJvY2Vzc0NoYXJDaGFuZ2VzKSB7XHJcbiAgICAgICAgbGV0IG9yaWdpbmFsU3RhcnRMaW5lTnVtYmVyO1xyXG4gICAgICAgIGxldCBvcmlnaW5hbEVuZExpbmVOdW1iZXI7XHJcbiAgICAgICAgbGV0IG1vZGlmaWVkU3RhcnRMaW5lTnVtYmVyO1xyXG4gICAgICAgIGxldCBtb2RpZmllZEVuZExpbmVOdW1iZXI7XHJcbiAgICAgICAgbGV0IGNoYXJDaGFuZ2VzID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmIChkaWZmQ2hhbmdlLm9yaWdpbmFsTGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIG9yaWdpbmFsU3RhcnRMaW5lTnVtYmVyID0gb3JpZ2luYWxMaW5lU2VxdWVuY2UuZ2V0U3RhcnRMaW5lTnVtYmVyKGRpZmZDaGFuZ2Uub3JpZ2luYWxTdGFydCkgLSAxO1xyXG4gICAgICAgICAgICBvcmlnaW5hbEVuZExpbmVOdW1iZXIgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb3JpZ2luYWxTdGFydExpbmVOdW1iZXIgPSBvcmlnaW5hbExpbmVTZXF1ZW5jZS5nZXRTdGFydExpbmVOdW1iZXIoZGlmZkNoYW5nZS5vcmlnaW5hbFN0YXJ0KTtcclxuICAgICAgICAgICAgb3JpZ2luYWxFbmRMaW5lTnVtYmVyID0gb3JpZ2luYWxMaW5lU2VxdWVuY2UuZ2V0RW5kTGluZU51bWJlcihkaWZmQ2hhbmdlLm9yaWdpbmFsU3RhcnQgKyBkaWZmQ2hhbmdlLm9yaWdpbmFsTGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkaWZmQ2hhbmdlLm1vZGlmaWVkTGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIG1vZGlmaWVkU3RhcnRMaW5lTnVtYmVyID0gbW9kaWZpZWRMaW5lU2VxdWVuY2UuZ2V0U3RhcnRMaW5lTnVtYmVyKGRpZmZDaGFuZ2UubW9kaWZpZWRTdGFydCkgLSAxO1xyXG4gICAgICAgICAgICBtb2RpZmllZEVuZExpbmVOdW1iZXIgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbW9kaWZpZWRTdGFydExpbmVOdW1iZXIgPSBtb2RpZmllZExpbmVTZXF1ZW5jZS5nZXRTdGFydExpbmVOdW1iZXIoZGlmZkNoYW5nZS5tb2RpZmllZFN0YXJ0KTtcclxuICAgICAgICAgICAgbW9kaWZpZWRFbmRMaW5lTnVtYmVyID0gbW9kaWZpZWRMaW5lU2VxdWVuY2UuZ2V0RW5kTGluZU51bWJlcihkaWZmQ2hhbmdlLm1vZGlmaWVkU3RhcnQgKyBkaWZmQ2hhbmdlLm1vZGlmaWVkTGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzaG91bGRDb21wdXRlQ2hhckNoYW5nZXMgJiYgZGlmZkNoYW5nZS5vcmlnaW5hbExlbmd0aCA+IDAgJiYgZGlmZkNoYW5nZS5vcmlnaW5hbExlbmd0aCA8IDIwICYmIGRpZmZDaGFuZ2UubW9kaWZpZWRMZW5ndGggPiAwICYmIGRpZmZDaGFuZ2UubW9kaWZpZWRMZW5ndGggPCAyMCAmJiBjb250aW51ZUNoYXJEaWZmKCkpIHtcclxuICAgICAgICAgICAgLy8gQ29tcHV0ZSBjaGFyYWN0ZXIgY2hhbmdlcyBmb3IgZGlmZiBjaHVua3Mgb2YgYXQgbW9zdCAyMCBsaW5lcy4uLlxyXG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbENoYXJTZXF1ZW5jZSA9IG9yaWdpbmFsTGluZVNlcXVlbmNlLmNyZWF0ZUNoYXJTZXF1ZW5jZShzaG91bGRJZ25vcmVUcmltV2hpdGVzcGFjZSwgZGlmZkNoYW5nZS5vcmlnaW5hbFN0YXJ0LCBkaWZmQ2hhbmdlLm9yaWdpbmFsU3RhcnQgKyBkaWZmQ2hhbmdlLm9yaWdpbmFsTGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vZGlmaWVkQ2hhclNlcXVlbmNlID0gbW9kaWZpZWRMaW5lU2VxdWVuY2UuY3JlYXRlQ2hhclNlcXVlbmNlKHNob3VsZElnbm9yZVRyaW1XaGl0ZXNwYWNlLCBkaWZmQ2hhbmdlLm1vZGlmaWVkU3RhcnQsIGRpZmZDaGFuZ2UubW9kaWZpZWRTdGFydCArIGRpZmZDaGFuZ2UubW9kaWZpZWRMZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgbGV0IHJhd0NoYW5nZXMgPSBjb21wdXRlRGlmZihvcmlnaW5hbENoYXJTZXF1ZW5jZSwgbW9kaWZpZWRDaGFyU2VxdWVuY2UsIGNvbnRpbnVlQ2hhckRpZmYsIHRydWUpLmNoYW5nZXM7XHJcbiAgICAgICAgICAgIGlmIChzaG91bGRQb3N0UHJvY2Vzc0NoYXJDaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICByYXdDaGFuZ2VzID0gcG9zdFByb2Nlc3NDaGFyQ2hhbmdlcyhyYXdDaGFuZ2VzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjaGFyQ2hhbmdlcyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gcmF3Q2hhbmdlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY2hhckNoYW5nZXMucHVzaChDaGFyQ2hhbmdlLmNyZWF0ZUZyb21EaWZmQ2hhbmdlKHJhd0NoYW5nZXNbaV0sIG9yaWdpbmFsQ2hhclNlcXVlbmNlLCBtb2RpZmllZENoYXJTZXF1ZW5jZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgTGluZUNoYW5nZShvcmlnaW5hbFN0YXJ0TGluZU51bWJlciwgb3JpZ2luYWxFbmRMaW5lTnVtYmVyLCBtb2RpZmllZFN0YXJ0TGluZU51bWJlciwgbW9kaWZpZWRFbmRMaW5lTnVtYmVyLCBjaGFyQ2hhbmdlcyk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIERpZmZDb21wdXRlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcmlnaW5hbExpbmVzLCBtb2RpZmllZExpbmVzLCBvcHRzKSB7XHJcbiAgICAgICAgdGhpcy5zaG91bGRDb21wdXRlQ2hhckNoYW5nZXMgPSBvcHRzLnNob3VsZENvbXB1dGVDaGFyQ2hhbmdlcztcclxuICAgICAgICB0aGlzLnNob3VsZFBvc3RQcm9jZXNzQ2hhckNoYW5nZXMgPSBvcHRzLnNob3VsZFBvc3RQcm9jZXNzQ2hhckNoYW5nZXM7XHJcbiAgICAgICAgdGhpcy5zaG91bGRJZ25vcmVUcmltV2hpdGVzcGFjZSA9IG9wdHMuc2hvdWxkSWdub3JlVHJpbVdoaXRlc3BhY2U7XHJcbiAgICAgICAgdGhpcy5zaG91bGRNYWtlUHJldHR5RGlmZiA9IG9wdHMuc2hvdWxkTWFrZVByZXR0eURpZmY7XHJcbiAgICAgICAgdGhpcy5vcmlnaW5hbExpbmVzID0gb3JpZ2luYWxMaW5lcztcclxuICAgICAgICB0aGlzLm1vZGlmaWVkTGluZXMgPSBtb2RpZmllZExpbmVzO1xyXG4gICAgICAgIHRoaXMub3JpZ2luYWwgPSBuZXcgTGluZVNlcXVlbmNlKG9yaWdpbmFsTGluZXMpO1xyXG4gICAgICAgIHRoaXMubW9kaWZpZWQgPSBuZXcgTGluZVNlcXVlbmNlKG1vZGlmaWVkTGluZXMpO1xyXG4gICAgICAgIHRoaXMuY29udGludWVMaW5lRGlmZiA9IGNyZWF0ZUNvbnRpbnVlUHJvY2Vzc2luZ1ByZWRpY2F0ZShvcHRzLm1heENvbXB1dGF0aW9uVGltZSk7XHJcbiAgICAgICAgdGhpcy5jb250aW51ZUNoYXJEaWZmID0gY3JlYXRlQ29udGludWVQcm9jZXNzaW5nUHJlZGljYXRlKG9wdHMubWF4Q29tcHV0YXRpb25UaW1lID09PSAwID8gMCA6IE1hdGgubWluKG9wdHMubWF4Q29tcHV0YXRpb25UaW1lLCA1MDAwKSk7IC8vIG5ldmVyIHJ1biBhZnRlciA1cyBmb3IgY2hhcmFjdGVyIGNoYW5nZXMuLi5cclxuICAgIH1cclxuICAgIGNvbXB1dGVEaWZmKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm9yaWdpbmFsLmxpbmVzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLm9yaWdpbmFsLmxpbmVzWzBdLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAvLyBlbXB0eSBvcmlnaW5hbCA9PiBmYXN0IHBhdGhcclxuICAgICAgICAgICAgaWYgKHRoaXMubW9kaWZpZWQubGluZXMubGVuZ3RoID09PSAxICYmIHRoaXMubW9kaWZpZWQubGluZXNbMF0ubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1aXRFYXJseTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlczogW11cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHF1aXRFYXJseTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VzOiBbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFN0YXJ0TGluZU51bWJlcjogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFbmRMaW5lTnVtYmVyOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllZFN0YXJ0TGluZU51bWJlcjogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWRFbmRMaW5lTnVtYmVyOiB0aGlzLm1vZGlmaWVkLmxpbmVzLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhckNoYW5nZXM6IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWRFbmRDb2x1bW46IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWRFbmRMaW5lTnVtYmVyOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkU3RhcnRDb2x1bW46IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWRTdGFydExpbmVOdW1iZXI6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFbmRDb2x1bW46IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFbmRMaW5lTnVtYmVyOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsU3RhcnRDb2x1bW46IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxTdGFydExpbmVOdW1iZXI6IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dXHJcbiAgICAgICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMubW9kaWZpZWQubGluZXMubGVuZ3RoID09PSAxICYmIHRoaXMubW9kaWZpZWQubGluZXNbMF0ubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIC8vIGVtcHR5IG1vZGlmaWVkID0+IGZhc3QgcGF0aFxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgcXVpdEVhcmx5OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGNoYW5nZXM6IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsU3RhcnRMaW5lTnVtYmVyOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEVuZExpbmVOdW1iZXI6IHRoaXMub3JpZ2luYWwubGluZXMubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllZFN0YXJ0TGluZU51bWJlcjogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWRFbmRMaW5lTnVtYmVyOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFyQ2hhbmdlczogW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllZEVuZENvbHVtbjogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllZEVuZExpbmVOdW1iZXI6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWRTdGFydENvbHVtbjogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllZFN0YXJ0TGluZU51bWJlcjogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEVuZENvbHVtbjogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEVuZExpbmVOdW1iZXI6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxTdGFydENvbHVtbjogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFN0YXJ0TGluZU51bWJlcjogMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgICAgICAgICB9XVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkaWZmUmVzdWx0ID0gY29tcHV0ZURpZmYodGhpcy5vcmlnaW5hbCwgdGhpcy5tb2RpZmllZCwgdGhpcy5jb250aW51ZUxpbmVEaWZmLCB0aGlzLnNob3VsZE1ha2VQcmV0dHlEaWZmKTtcclxuICAgICAgICBjb25zdCByYXdDaGFuZ2VzID0gZGlmZlJlc3VsdC5jaGFuZ2VzO1xyXG4gICAgICAgIGNvbnN0IHF1aXRFYXJseSA9IGRpZmZSZXN1bHQucXVpdEVhcmx5O1xyXG4gICAgICAgIC8vIFRoZSBkaWZmIGlzIGFsd2F5cyBjb21wdXRlZCB3aXRoIGlnbm9yaW5nIHRyaW0gd2hpdGVzcGFjZVxyXG4gICAgICAgIC8vIFRoaXMgZW5zdXJlcyB3ZSBnZXQgdGhlIHByZXR0aWVzdCBkaWZmXHJcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkSWdub3JlVHJpbVdoaXRlc3BhY2UpIHtcclxuICAgICAgICAgICAgY29uc3QgbGluZUNoYW5nZXMgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHJhd0NoYW5nZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxpbmVDaGFuZ2VzLnB1c2goTGluZUNoYW5nZS5jcmVhdGVGcm9tRGlmZlJlc3VsdCh0aGlzLnNob3VsZElnbm9yZVRyaW1XaGl0ZXNwYWNlLCByYXdDaGFuZ2VzW2ldLCB0aGlzLm9yaWdpbmFsLCB0aGlzLm1vZGlmaWVkLCB0aGlzLmNvbnRpbnVlQ2hhckRpZmYsIHRoaXMuc2hvdWxkQ29tcHV0ZUNoYXJDaGFuZ2VzLCB0aGlzLnNob3VsZFBvc3RQcm9jZXNzQ2hhckNoYW5nZXMpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgcXVpdEVhcmx5OiBxdWl0RWFybHksXHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VzOiBsaW5lQ2hhbmdlc1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBOZWVkIHRvIHBvc3QtcHJvY2VzcyBhbmQgaW50cm9kdWNlIGNoYW5nZXMgd2hlcmUgdGhlIHRyaW0gd2hpdGVzcGFjZSBpcyBkaWZmZXJlbnRcclxuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgYXJlIGxvb3Bpbmcgc3RhcnRpbmcgYXQgLTEgdG8gYWxzbyBjb3ZlciB0aGUgbGluZXMgYmVmb3JlIHRoZSBmaXJzdCBjaGFuZ2VcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuICAgICAgICBsZXQgb3JpZ2luYWxMaW5lSW5kZXggPSAwO1xyXG4gICAgICAgIGxldCBtb2RpZmllZExpbmVJbmRleCA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IC0xIC8qICEhISEgKi8sIGxlbiA9IHJhd0NoYW5nZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgbmV4dENoYW5nZSA9IChpICsgMSA8IGxlbiA/IHJhd0NoYW5nZXNbaSArIDFdIDogbnVsbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsU3RvcCA9IChuZXh0Q2hhbmdlID8gbmV4dENoYW5nZS5vcmlnaW5hbFN0YXJ0IDogdGhpcy5vcmlnaW5hbExpbmVzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vZGlmaWVkU3RvcCA9IChuZXh0Q2hhbmdlID8gbmV4dENoYW5nZS5tb2RpZmllZFN0YXJ0IDogdGhpcy5tb2RpZmllZExpbmVzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIHdoaWxlIChvcmlnaW5hbExpbmVJbmRleCA8IG9yaWdpbmFsU3RvcCAmJiBtb2RpZmllZExpbmVJbmRleCA8IG1vZGlmaWVkU3RvcCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxMaW5lID0gdGhpcy5vcmlnaW5hbExpbmVzW29yaWdpbmFsTGluZUluZGV4XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vZGlmaWVkTGluZSA9IHRoaXMubW9kaWZpZWRMaW5lc1ttb2RpZmllZExpbmVJbmRleF07XHJcbiAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxMaW5lICE9PSBtb2RpZmllZExpbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBUaGVzZSBsaW5lcyBkaWZmZXIgb25seSBpbiB0cmltIHdoaXRlc3BhY2VcclxuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayB0aGUgbGVhZGluZyB3aGl0ZXNwYWNlXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgb3JpZ2luYWxTdGFydENvbHVtbiA9IGdldEZpcnN0Tm9uQmxhbmtDb2x1bW4ob3JpZ2luYWxMaW5lLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1vZGlmaWVkU3RhcnRDb2x1bW4gPSBnZXRGaXJzdE5vbkJsYW5rQ29sdW1uKG1vZGlmaWVkTGluZSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChvcmlnaW5hbFN0YXJ0Q29sdW1uID4gMSAmJiBtb2RpZmllZFN0YXJ0Q29sdW1uID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxDaGFyID0gb3JpZ2luYWxMaW5lLmNoYXJDb2RlQXQob3JpZ2luYWxTdGFydENvbHVtbiAtIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9kaWZpZWRDaGFyID0gbW9kaWZpZWRMaW5lLmNoYXJDb2RlQXQobW9kaWZpZWRTdGFydENvbHVtbiAtIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsQ2hhciAhPT0gbW9kaWZpZWRDaGFyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFN0YXJ0Q29sdW1uLS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllZFN0YXJ0Q29sdW1uLS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsU3RhcnRDb2x1bW4gPiAxIHx8IG1vZGlmaWVkU3RhcnRDb2x1bW4gPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wdXNoVHJpbVdoaXRlc3BhY2VDaGFyQ2hhbmdlKHJlc3VsdCwgb3JpZ2luYWxMaW5lSW5kZXggKyAxLCAxLCBvcmlnaW5hbFN0YXJ0Q29sdW1uLCBtb2RpZmllZExpbmVJbmRleCArIDEsIDEsIG1vZGlmaWVkU3RhcnRDb2x1bW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHRoZSB0cmFpbGluZyB3aGl0ZXNwYWNlXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgb3JpZ2luYWxFbmRDb2x1bW4gPSBnZXRMYXN0Tm9uQmxhbmtDb2x1bW4ob3JpZ2luYWxMaW5lLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1vZGlmaWVkRW5kQ29sdW1uID0gZ2V0TGFzdE5vbkJsYW5rQ29sdW1uKG1vZGlmaWVkTGluZSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsTWF4Q29sdW1uID0gb3JpZ2luYWxMaW5lLmxlbmd0aCArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vZGlmaWVkTWF4Q29sdW1uID0gbW9kaWZpZWRMaW5lLmxlbmd0aCArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChvcmlnaW5hbEVuZENvbHVtbiA8IG9yaWdpbmFsTWF4Q29sdW1uICYmIG1vZGlmaWVkRW5kQ29sdW1uIDwgbW9kaWZpZWRNYXhDb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsQ2hhciA9IG9yaWdpbmFsTGluZS5jaGFyQ29kZUF0KG9yaWdpbmFsRW5kQ29sdW1uIC0gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2RpZmllZENoYXIgPSBvcmlnaW5hbExpbmUuY2hhckNvZGVBdChtb2RpZmllZEVuZENvbHVtbiAtIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsQ2hhciAhPT0gbW9kaWZpZWRDaGFyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEVuZENvbHVtbisrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWRFbmRDb2x1bW4rKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxFbmRDb2x1bW4gPCBvcmlnaW5hbE1heENvbHVtbiB8fCBtb2RpZmllZEVuZENvbHVtbiA8IG1vZGlmaWVkTWF4Q29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wdXNoVHJpbVdoaXRlc3BhY2VDaGFyQ2hhbmdlKHJlc3VsdCwgb3JpZ2luYWxMaW5lSW5kZXggKyAxLCBvcmlnaW5hbEVuZENvbHVtbiwgb3JpZ2luYWxNYXhDb2x1bW4sIG1vZGlmaWVkTGluZUluZGV4ICsgMSwgbW9kaWZpZWRFbmRDb2x1bW4sIG1vZGlmaWVkTWF4Q29sdW1uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG9yaWdpbmFsTGluZUluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICBtb2RpZmllZExpbmVJbmRleCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChuZXh0Q2hhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBFbWl0IHRoZSBhY3R1YWwgY2hhbmdlXHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChMaW5lQ2hhbmdlLmNyZWF0ZUZyb21EaWZmUmVzdWx0KHRoaXMuc2hvdWxkSWdub3JlVHJpbVdoaXRlc3BhY2UsIG5leHRDaGFuZ2UsIHRoaXMub3JpZ2luYWwsIHRoaXMubW9kaWZpZWQsIHRoaXMuY29udGludWVDaGFyRGlmZiwgdGhpcy5zaG91bGRDb21wdXRlQ2hhckNoYW5nZXMsIHRoaXMuc2hvdWxkUG9zdFByb2Nlc3NDaGFyQ2hhbmdlcykpO1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxMaW5lSW5kZXggKz0gbmV4dENoYW5nZS5vcmlnaW5hbExlbmd0aDtcclxuICAgICAgICAgICAgICAgIG1vZGlmaWVkTGluZUluZGV4ICs9IG5leHRDaGFuZ2UubW9kaWZpZWRMZW5ndGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcXVpdEVhcmx5OiBxdWl0RWFybHksXHJcbiAgICAgICAgICAgIGNoYW5nZXM6IHJlc3VsdFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBfcHVzaFRyaW1XaGl0ZXNwYWNlQ2hhckNoYW5nZShyZXN1bHQsIG9yaWdpbmFsTGluZU51bWJlciwgb3JpZ2luYWxTdGFydENvbHVtbiwgb3JpZ2luYWxFbmRDb2x1bW4sIG1vZGlmaWVkTGluZU51bWJlciwgbW9kaWZpZWRTdGFydENvbHVtbiwgbW9kaWZpZWRFbmRDb2x1bW4pIHtcclxuICAgICAgICBpZiAodGhpcy5fbWVyZ2VUcmltV2hpdGVzcGFjZUNoYXJDaGFuZ2UocmVzdWx0LCBvcmlnaW5hbExpbmVOdW1iZXIsIG9yaWdpbmFsU3RhcnRDb2x1bW4sIG9yaWdpbmFsRW5kQ29sdW1uLCBtb2RpZmllZExpbmVOdW1iZXIsIG1vZGlmaWVkU3RhcnRDb2x1bW4sIG1vZGlmaWVkRW5kQ29sdW1uKSkge1xyXG4gICAgICAgICAgICAvLyBNZXJnZWQgaW50byBwcmV2aW91c1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBjaGFyQ2hhbmdlcyA9IHVuZGVmaW5lZDtcclxuICAgICAgICBpZiAodGhpcy5zaG91bGRDb21wdXRlQ2hhckNoYW5nZXMpIHtcclxuICAgICAgICAgICAgY2hhckNoYW5nZXMgPSBbbmV3IENoYXJDaGFuZ2Uob3JpZ2luYWxMaW5lTnVtYmVyLCBvcmlnaW5hbFN0YXJ0Q29sdW1uLCBvcmlnaW5hbExpbmVOdW1iZXIsIG9yaWdpbmFsRW5kQ29sdW1uLCBtb2RpZmllZExpbmVOdW1iZXIsIG1vZGlmaWVkU3RhcnRDb2x1bW4sIG1vZGlmaWVkTGluZU51bWJlciwgbW9kaWZpZWRFbmRDb2x1bW4pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzdWx0LnB1c2gobmV3IExpbmVDaGFuZ2Uob3JpZ2luYWxMaW5lTnVtYmVyLCBvcmlnaW5hbExpbmVOdW1iZXIsIG1vZGlmaWVkTGluZU51bWJlciwgbW9kaWZpZWRMaW5lTnVtYmVyLCBjaGFyQ2hhbmdlcykpO1xyXG4gICAgfVxyXG4gICAgX21lcmdlVHJpbVdoaXRlc3BhY2VDaGFyQ2hhbmdlKHJlc3VsdCwgb3JpZ2luYWxMaW5lTnVtYmVyLCBvcmlnaW5hbFN0YXJ0Q29sdW1uLCBvcmlnaW5hbEVuZENvbHVtbiwgbW9kaWZpZWRMaW5lTnVtYmVyLCBtb2RpZmllZFN0YXJ0Q29sdW1uLCBtb2RpZmllZEVuZENvbHVtbikge1xyXG4gICAgICAgIGNvbnN0IGxlbiA9IHJlc3VsdC5sZW5ndGg7XHJcbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHByZXZDaGFuZ2UgPSByZXN1bHRbbGVuIC0gMV07XHJcbiAgICAgICAgaWYgKHByZXZDaGFuZ2Uub3JpZ2luYWxFbmRMaW5lTnVtYmVyID09PSAwIHx8IHByZXZDaGFuZ2UubW9kaWZpZWRFbmRMaW5lTnVtYmVyID09PSAwKSB7XHJcbiAgICAgICAgICAgIC8vIERvbid0IG1lcmdlIHdpdGggaW5zZXJ0cy9kZWxldGVzXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHByZXZDaGFuZ2Uub3JpZ2luYWxFbmRMaW5lTnVtYmVyICsgMSA9PT0gb3JpZ2luYWxMaW5lTnVtYmVyICYmIHByZXZDaGFuZ2UubW9kaWZpZWRFbmRMaW5lTnVtYmVyICsgMSA9PT0gbW9kaWZpZWRMaW5lTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHByZXZDaGFuZ2Uub3JpZ2luYWxFbmRMaW5lTnVtYmVyID0gb3JpZ2luYWxMaW5lTnVtYmVyO1xyXG4gICAgICAgICAgICBwcmV2Q2hhbmdlLm1vZGlmaWVkRW5kTGluZU51bWJlciA9IG1vZGlmaWVkTGluZU51bWJlcjtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2hvdWxkQ29tcHV0ZUNoYXJDaGFuZ2VzICYmIHByZXZDaGFuZ2UuY2hhckNoYW5nZXMpIHtcclxuICAgICAgICAgICAgICAgIHByZXZDaGFuZ2UuY2hhckNoYW5nZXMucHVzaChuZXcgQ2hhckNoYW5nZShvcmlnaW5hbExpbmVOdW1iZXIsIG9yaWdpbmFsU3RhcnRDb2x1bW4sIG9yaWdpbmFsTGluZU51bWJlciwgb3JpZ2luYWxFbmRDb2x1bW4sIG1vZGlmaWVkTGluZU51bWJlciwgbW9kaWZpZWRTdGFydENvbHVtbiwgbW9kaWZpZWRMaW5lTnVtYmVyLCBtb2RpZmllZEVuZENvbHVtbikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0Rmlyc3ROb25CbGFua0NvbHVtbih0eHQsIGRlZmF1bHRWYWx1ZSkge1xyXG4gICAgY29uc3QgciA9IHN0cmluZ3MuZmlyc3ROb25XaGl0ZXNwYWNlSW5kZXgodHh0KTtcclxuICAgIGlmIChyID09PSAtMSkge1xyXG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gciArIDE7XHJcbn1cclxuZnVuY3Rpb24gZ2V0TGFzdE5vbkJsYW5rQ29sdW1uKHR4dCwgZGVmYXVsdFZhbHVlKSB7XHJcbiAgICBjb25zdCByID0gc3RyaW5ncy5sYXN0Tm9uV2hpdGVzcGFjZUluZGV4KHR4dCk7XHJcbiAgICBpZiAociA9PT0gLTEpIHtcclxuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHIgKyAyO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUNvbnRpbnVlUHJvY2Vzc2luZ1ByZWRpY2F0ZShtYXhpbXVtUnVudGltZSkge1xyXG4gICAgaWYgKG1heGltdW1SdW50aW1lID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHRydWU7XHJcbiAgICB9XHJcbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICByZXR1cm4gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSA8IG1heGltdW1SdW50aW1lO1xyXG4gICAgfTtcclxufVxyXG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRvVWludDgodikge1xyXG4gICAgaWYgKHYgPCAwKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICBpZiAodiA+IDI1NSAvKiBNQVhfVUlOVF84ICovKSB7XHJcbiAgICAgICAgcmV0dXJuIDI1NSAvKiBNQVhfVUlOVF84ICovO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHYgfCAwO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiB0b1VpbnQzMih2KSB7XHJcbiAgICBpZiAodiA8IDApIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICAgIGlmICh2ID4gNDI5NDk2NzI5NSAvKiBNQVhfVUlOVF8zMiAqLykge1xyXG4gICAgICAgIHJldHVybiA0Mjk0OTY3Mjk1IC8qIE1BWF9VSU5UXzMyICovO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHYgfCAwO1xyXG59XHJcbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5pbXBvcnQgeyB0b1VpbnQzMiB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL3VpbnQuanMnO1xyXG5leHBvcnQgY2xhc3MgUHJlZml4U3VtSW5kZXhPZlJlc3VsdCB7XHJcbiAgICBjb25zdHJ1Y3RvcihpbmRleCwgcmVtYWluZGVyKSB7XHJcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xyXG4gICAgICAgIHRoaXMucmVtYWluZGVyID0gcmVtYWluZGVyO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBQcmVmaXhTdW1Db21wdXRlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZXMpIHtcclxuICAgICAgICB0aGlzLnZhbHVlcyA9IHZhbHVlcztcclxuICAgICAgICB0aGlzLnByZWZpeFN1bSA9IG5ldyBVaW50MzJBcnJheSh2YWx1ZXMubGVuZ3RoKTtcclxuICAgICAgICB0aGlzLnByZWZpeFN1bVZhbGlkSW5kZXggPSBuZXcgSW50MzJBcnJheSgxKTtcclxuICAgICAgICB0aGlzLnByZWZpeFN1bVZhbGlkSW5kZXhbMF0gPSAtMTtcclxuICAgIH1cclxuICAgIGluc2VydFZhbHVlcyhpbnNlcnRJbmRleCwgaW5zZXJ0VmFsdWVzKSB7XHJcbiAgICAgICAgaW5zZXJ0SW5kZXggPSB0b1VpbnQzMihpbnNlcnRJbmRleCk7XHJcbiAgICAgICAgY29uc3Qgb2xkVmFsdWVzID0gdGhpcy52YWx1ZXM7XHJcbiAgICAgICAgY29uc3Qgb2xkUHJlZml4U3VtID0gdGhpcy5wcmVmaXhTdW07XHJcbiAgICAgICAgY29uc3QgaW5zZXJ0VmFsdWVzTGVuID0gaW5zZXJ0VmFsdWVzLmxlbmd0aDtcclxuICAgICAgICBpZiAoaW5zZXJ0VmFsdWVzTGVuID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy52YWx1ZXMgPSBuZXcgVWludDMyQXJyYXkob2xkVmFsdWVzLmxlbmd0aCArIGluc2VydFZhbHVlc0xlbik7XHJcbiAgICAgICAgdGhpcy52YWx1ZXMuc2V0KG9sZFZhbHVlcy5zdWJhcnJheSgwLCBpbnNlcnRJbmRleCksIDApO1xyXG4gICAgICAgIHRoaXMudmFsdWVzLnNldChvbGRWYWx1ZXMuc3ViYXJyYXkoaW5zZXJ0SW5kZXgpLCBpbnNlcnRJbmRleCArIGluc2VydFZhbHVlc0xlbik7XHJcbiAgICAgICAgdGhpcy52YWx1ZXMuc2V0KGluc2VydFZhbHVlcywgaW5zZXJ0SW5kZXgpO1xyXG4gICAgICAgIGlmIChpbnNlcnRJbmRleCAtIDEgPCB0aGlzLnByZWZpeFN1bVZhbGlkSW5kZXhbMF0pIHtcclxuICAgICAgICAgICAgdGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdID0gaW5zZXJ0SW5kZXggLSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnByZWZpeFN1bSA9IG5ldyBVaW50MzJBcnJheSh0aGlzLnZhbHVlcy5sZW5ndGgpO1xyXG4gICAgICAgIGlmICh0aGlzLnByZWZpeFN1bVZhbGlkSW5kZXhbMF0gPj0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnByZWZpeFN1bS5zZXQob2xkUHJlZml4U3VtLnN1YmFycmF5KDAsIHRoaXMucHJlZml4U3VtVmFsaWRJbmRleFswXSArIDEpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBjaGFuZ2VWYWx1ZShpbmRleCwgdmFsdWUpIHtcclxuICAgICAgICBpbmRleCA9IHRvVWludDMyKGluZGV4KTtcclxuICAgICAgICB2YWx1ZSA9IHRvVWludDMyKHZhbHVlKTtcclxuICAgICAgICBpZiAodGhpcy52YWx1ZXNbaW5kZXhdID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudmFsdWVzW2luZGV4XSA9IHZhbHVlO1xyXG4gICAgICAgIGlmIChpbmRleCAtIDEgPCB0aGlzLnByZWZpeFN1bVZhbGlkSW5kZXhbMF0pIHtcclxuICAgICAgICAgICAgdGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdID0gaW5kZXggLSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJlbW92ZVZhbHVlcyhzdGFydEluZGV4LCBjbnQpIHtcclxuICAgICAgICBzdGFydEluZGV4ID0gdG9VaW50MzIoc3RhcnRJbmRleCk7XHJcbiAgICAgICAgY250ID0gdG9VaW50MzIoY250KTtcclxuICAgICAgICBjb25zdCBvbGRWYWx1ZXMgPSB0aGlzLnZhbHVlcztcclxuICAgICAgICBjb25zdCBvbGRQcmVmaXhTdW0gPSB0aGlzLnByZWZpeFN1bTtcclxuICAgICAgICBpZiAoc3RhcnRJbmRleCA+PSBvbGRWYWx1ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IG1heENudCA9IG9sZFZhbHVlcy5sZW5ndGggLSBzdGFydEluZGV4O1xyXG4gICAgICAgIGlmIChjbnQgPj0gbWF4Q250KSB7XHJcbiAgICAgICAgICAgIGNudCA9IG1heENudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNudCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudmFsdWVzID0gbmV3IFVpbnQzMkFycmF5KG9sZFZhbHVlcy5sZW5ndGggLSBjbnQpO1xyXG4gICAgICAgIHRoaXMudmFsdWVzLnNldChvbGRWYWx1ZXMuc3ViYXJyYXkoMCwgc3RhcnRJbmRleCksIDApO1xyXG4gICAgICAgIHRoaXMudmFsdWVzLnNldChvbGRWYWx1ZXMuc3ViYXJyYXkoc3RhcnRJbmRleCArIGNudCksIHN0YXJ0SW5kZXgpO1xyXG4gICAgICAgIHRoaXMucHJlZml4U3VtID0gbmV3IFVpbnQzMkFycmF5KHRoaXMudmFsdWVzLmxlbmd0aCk7XHJcbiAgICAgICAgaWYgKHN0YXJ0SW5kZXggLSAxIDwgdGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJlZml4U3VtVmFsaWRJbmRleFswXSA9IHN0YXJ0SW5kZXggLSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdID49IDApIHtcclxuICAgICAgICAgICAgdGhpcy5wcmVmaXhTdW0uc2V0KG9sZFByZWZpeFN1bS5zdWJhcnJheSgwLCB0aGlzLnByZWZpeFN1bVZhbGlkSW5kZXhbMF0gKyAxKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgZ2V0VG90YWxWYWx1ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy52YWx1ZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QWNjdW11bGF0ZWRWYWx1ZSh0aGlzLnZhbHVlcy5sZW5ndGggLSAxKTtcclxuICAgIH1cclxuICAgIGdldEFjY3VtdWxhdGVkVmFsdWUoaW5kZXgpIHtcclxuICAgICAgICBpZiAoaW5kZXggPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpbmRleCA9IHRvVWludDMyKGluZGV4KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QWNjdW11bGF0ZWRWYWx1ZShpbmRleCk7XHJcbiAgICB9XHJcbiAgICBfZ2V0QWNjdW11bGF0ZWRWYWx1ZShpbmRleCkge1xyXG4gICAgICAgIGlmIChpbmRleCA8PSB0aGlzLnByZWZpeFN1bVZhbGlkSW5kZXhbMF0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJlZml4U3VtW2luZGV4XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHN0YXJ0SW5kZXggPSB0aGlzLnByZWZpeFN1bVZhbGlkSW5kZXhbMF0gKyAxO1xyXG4gICAgICAgIGlmIChzdGFydEluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJlZml4U3VtWzBdID0gdGhpcy52YWx1ZXNbMF07XHJcbiAgICAgICAgICAgIHN0YXJ0SW5kZXgrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGluZGV4ID49IHRoaXMudmFsdWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBpbmRleCA9IHRoaXMudmFsdWVzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydEluZGV4OyBpIDw9IGluZGV4OyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5wcmVmaXhTdW1baV0gPSB0aGlzLnByZWZpeFN1bVtpIC0gMV0gKyB0aGlzLnZhbHVlc1tpXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdID0gTWF0aC5tYXgodGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdLCBpbmRleCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJlZml4U3VtW2luZGV4XTtcclxuICAgIH1cclxuICAgIGdldEluZGV4T2YoYWNjdW11bGF0ZWRWYWx1ZSkge1xyXG4gICAgICAgIGFjY3VtdWxhdGVkVmFsdWUgPSBNYXRoLmZsb29yKGFjY3VtdWxhdGVkVmFsdWUpOyAvL0BwZXJmXHJcbiAgICAgICAgLy8gQ29tcHV0ZSBhbGwgc3VtcyAodG8gZ2V0IGEgZnVsbHkgdmFsaWQgcHJlZml4U3VtKVxyXG4gICAgICAgIHRoaXMuZ2V0VG90YWxWYWx1ZSgpO1xyXG4gICAgICAgIGxldCBsb3cgPSAwO1xyXG4gICAgICAgIGxldCBoaWdoID0gdGhpcy52YWx1ZXMubGVuZ3RoIC0gMTtcclxuICAgICAgICBsZXQgbWlkID0gMDtcclxuICAgICAgICBsZXQgbWlkU3RvcCA9IDA7XHJcbiAgICAgICAgbGV0IG1pZFN0YXJ0ID0gMDtcclxuICAgICAgICB3aGlsZSAobG93IDw9IGhpZ2gpIHtcclxuICAgICAgICAgICAgbWlkID0gbG93ICsgKChoaWdoIC0gbG93KSAvIDIpIHwgMDtcclxuICAgICAgICAgICAgbWlkU3RvcCA9IHRoaXMucHJlZml4U3VtW21pZF07XHJcbiAgICAgICAgICAgIG1pZFN0YXJ0ID0gbWlkU3RvcCAtIHRoaXMudmFsdWVzW21pZF07XHJcbiAgICAgICAgICAgIGlmIChhY2N1bXVsYXRlZFZhbHVlIDwgbWlkU3RhcnQpIHtcclxuICAgICAgICAgICAgICAgIGhpZ2ggPSBtaWQgLSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGFjY3VtdWxhdGVkVmFsdWUgPj0gbWlkU3RvcCkge1xyXG4gICAgICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgUHJlZml4U3VtSW5kZXhPZlJlc3VsdChtaWQsIGFjY3VtdWxhdGVkVmFsdWUgLSBtaWRTdGFydCk7XHJcbiAgICB9XHJcbn1cclxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbmV4cG9ydCBjb25zdCBVU1VBTF9XT1JEX1NFUEFSQVRPUlMgPSAnYH4hQCMkJV4mKigpLT0rW3tdfVxcXFx8OzpcXCdcIiwuPD4vPyc7XHJcbi8qKlxyXG4gKiBDcmVhdGUgYSB3b3JkIGRlZmluaXRpb24gcmVndWxhciBleHByZXNzaW9uIGJhc2VkIG9uIGRlZmF1bHQgd29yZCBzZXBhcmF0b3JzLlxyXG4gKiBPcHRpb25hbGx5IHByb3ZpZGUgYWxsb3dlZCBzZXBhcmF0b3JzIHRoYXQgc2hvdWxkIGJlIGluY2x1ZGVkIGluIHdvcmRzLlxyXG4gKlxyXG4gKiBUaGUgZGVmYXVsdCB3b3VsZCBsb29rIGxpa2UgdGhpczpcclxuICogLygtP1xcZCpcXC5cXGRcXHcqKXwoW15cXGBcXH5cXCFcXEBcXCNcXCRcXCVcXF5cXCZcXCpcXChcXClcXC1cXD1cXCtcXFtcXHtcXF1cXH1cXFxcXFx8XFw7XFw6XFwnXFxcIlxcLFxcLlxcPFxcPlxcL1xcP1xcc10rKS9nXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVXb3JkUmVnRXhwKGFsbG93SW5Xb3JkcyA9ICcnKSB7XHJcbiAgICBsZXQgc291cmNlID0gJygtP1xcXFxkKlxcXFwuXFxcXGRcXFxcdyopfChbXic7XHJcbiAgICBmb3IgKGNvbnN0IHNlcCBvZiBVU1VBTF9XT1JEX1NFUEFSQVRPUlMpIHtcclxuICAgICAgICBpZiAoYWxsb3dJbldvcmRzLmluZGV4T2Yoc2VwKSA+PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzb3VyY2UgKz0gJ1xcXFwnICsgc2VwO1xyXG4gICAgfVxyXG4gICAgc291cmNlICs9ICdcXFxcc10rKSc7XHJcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChzb3VyY2UsICdnJyk7XHJcbn1cclxuLy8gY2F0Y2hlcyBudW1iZXJzIChpbmNsdWRpbmcgZmxvYXRpbmcgbnVtYmVycykgaW4gdGhlIGZpcnN0IGdyb3VwLCBhbmQgYWxwaGFudW0gaW4gdGhlIHNlY29uZFxyXG5leHBvcnQgY29uc3QgREVGQVVMVF9XT1JEX1JFR0VYUCA9IGNyZWF0ZVdvcmRSZWdFeHAoKTtcclxuZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZVZhbGlkV29yZERlZmluaXRpb24od29yZERlZmluaXRpb24pIHtcclxuICAgIGxldCByZXN1bHQgPSBERUZBVUxUX1dPUkRfUkVHRVhQO1xyXG4gICAgaWYgKHdvcmREZWZpbml0aW9uICYmICh3b3JkRGVmaW5pdGlvbiBpbnN0YW5jZW9mIFJlZ0V4cCkpIHtcclxuICAgICAgICBpZiAoIXdvcmREZWZpbml0aW9uLmdsb2JhbCkge1xyXG4gICAgICAgICAgICBsZXQgZmxhZ3MgPSAnZyc7XHJcbiAgICAgICAgICAgIGlmICh3b3JkRGVmaW5pdGlvbi5pZ25vcmVDYXNlKSB7XHJcbiAgICAgICAgICAgICAgICBmbGFncyArPSAnaSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHdvcmREZWZpbml0aW9uLm11bHRpbGluZSkge1xyXG4gICAgICAgICAgICAgICAgZmxhZ3MgKz0gJ20nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh3b3JkRGVmaW5pdGlvbi51bmljb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBmbGFncyArPSAndSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IFJlZ0V4cCh3b3JkRGVmaW5pdGlvbi5zb3VyY2UsIGZsYWdzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHdvcmREZWZpbml0aW9uO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJlc3VsdC5sYXN0SW5kZXggPSAwO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5jb25zdCBfZGVmYXVsdENvbmZpZyA9IHtcclxuICAgIG1heExlbjogMTAwMCxcclxuICAgIHdpbmRvd1NpemU6IDE1LFxyXG4gICAgdGltZUJ1ZGdldDogMTUwXHJcbn07XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRXb3JkQXRUZXh0KGNvbHVtbiwgd29yZERlZmluaXRpb24sIHRleHQsIHRleHRPZmZzZXQsIGNvbmZpZyA9IF9kZWZhdWx0Q29uZmlnKSB7XHJcbiAgICBpZiAodGV4dC5sZW5ndGggPiBjb25maWcubWF4TGVuKSB7XHJcbiAgICAgICAgLy8gZG9uJ3QgdGhyb3cgc3RyaW5ncyB0aGF0IGxvbmcgYXQgdGhlIHJlZ2V4cFxyXG4gICAgICAgIC8vIGJ1dCB1c2UgYSBzdWItc3RyaW5nIGluIHdoaWNoIGEgd29yZCBtdXN0IG9jY3VyXHJcbiAgICAgICAgbGV0IHN0YXJ0ID0gY29sdW1uIC0gY29uZmlnLm1heExlbiAvIDI7XHJcbiAgICAgICAgaWYgKHN0YXJ0IDwgMCkge1xyXG4gICAgICAgICAgICBzdGFydCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0ZXh0T2Zmc2V0ICs9IHN0YXJ0O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0ZXh0ID0gdGV4dC5zdWJzdHJpbmcoc3RhcnQsIGNvbHVtbiArIGNvbmZpZy5tYXhMZW4gLyAyKTtcclxuICAgICAgICByZXR1cm4gZ2V0V29yZEF0VGV4dChjb2x1bW4sIHdvcmREZWZpbml0aW9uLCB0ZXh0LCB0ZXh0T2Zmc2V0LCBjb25maWcpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdDEgPSBEYXRlLm5vdygpO1xyXG4gICAgY29uc3QgcG9zID0gY29sdW1uIC0gMSAtIHRleHRPZmZzZXQ7XHJcbiAgICBsZXQgcHJldlJlZ2V4SW5kZXggPSAtMTtcclxuICAgIGxldCBtYXRjaCA9IG51bGw7XHJcbiAgICBmb3IgKGxldCBpID0gMTs7IGkrKykge1xyXG4gICAgICAgIC8vIGNoZWNrIHRpbWUgYnVkZ2V0XHJcbiAgICAgICAgaWYgKERhdGUubm93KCkgLSB0MSA+PSBjb25maWcudGltZUJ1ZGdldCkge1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gcmVzZXQgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSByZWdleHAgc2hvdWxkIHN0YXJ0IG1hdGNoaW5nLCBhbHNvIGtub3cgd2hlcmUgaXRcclxuICAgICAgICAvLyBzaG91bGQgc3RvcCBzbyB0aGF0IHN1YnNlcXVlbnQgc2VhcmNoIGRvbid0IHJlcGVhdCBwcmV2aW91cyBzZWFyY2hlc1xyXG4gICAgICAgIGNvbnN0IHJlZ2V4SW5kZXggPSBwb3MgLSBjb25maWcud2luZG93U2l6ZSAqIGk7XHJcbiAgICAgICAgd29yZERlZmluaXRpb24ubGFzdEluZGV4ID0gTWF0aC5tYXgoMCwgcmVnZXhJbmRleCk7XHJcbiAgICAgICAgY29uc3QgdGhpc01hdGNoID0gX2ZpbmRSZWdleE1hdGNoRW5jbG9zaW5nUG9zaXRpb24od29yZERlZmluaXRpb24sIHRleHQsIHBvcywgcHJldlJlZ2V4SW5kZXgpO1xyXG4gICAgICAgIGlmICghdGhpc01hdGNoICYmIG1hdGNoKSB7XHJcbiAgICAgICAgICAgIC8vIHN0b3A6IHdlIGhhdmUgc29tZXRoaW5nXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtYXRjaCA9IHRoaXNNYXRjaDtcclxuICAgICAgICAvLyBzdG9wOiBzZWFyY2hlZCBhdCBzdGFydFxyXG4gICAgICAgIGlmIChyZWdleEluZGV4IDw9IDApIHtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByZXZSZWdleEluZGV4ID0gcmVnZXhJbmRleDtcclxuICAgIH1cclxuICAgIGlmIChtYXRjaCkge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSB7XHJcbiAgICAgICAgICAgIHdvcmQ6IG1hdGNoWzBdLFxyXG4gICAgICAgICAgICBzdGFydENvbHVtbjogdGV4dE9mZnNldCArIDEgKyBtYXRjaC5pbmRleCxcclxuICAgICAgICAgICAgZW5kQ29sdW1uOiB0ZXh0T2Zmc2V0ICsgMSArIG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoXHJcbiAgICAgICAgfTtcclxuICAgICAgICB3b3JkRGVmaW5pdGlvbi5sYXN0SW5kZXggPSAwO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5mdW5jdGlvbiBfZmluZFJlZ2V4TWF0Y2hFbmNsb3NpbmdQb3NpdGlvbih3b3JkRGVmaW5pdGlvbiwgdGV4dCwgcG9zLCBzdG9wUG9zKSB7XHJcbiAgICBsZXQgbWF0Y2g7XHJcbiAgICB3aGlsZSAobWF0Y2ggPSB3b3JkRGVmaW5pdGlvbi5leGVjKHRleHQpKSB7XHJcbiAgICAgICAgY29uc3QgbWF0Y2hJbmRleCA9IG1hdGNoLmluZGV4IHx8IDA7XHJcbiAgICAgICAgaWYgKG1hdGNoSW5kZXggPD0gcG9zICYmIHdvcmREZWZpbml0aW9uLmxhc3RJbmRleCA+PSBwb3MpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChzdG9wUG9zID4gMCAmJiBtYXRjaEluZGV4ID4gc3RvcFBvcykge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuaW1wb3J0IHsgdG9VaW50OCB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL3VpbnQuanMnO1xyXG4vKipcclxuICogQSBmYXN0IGNoYXJhY3RlciBjbGFzc2lmaWVyIHRoYXQgdXNlcyBhIGNvbXBhY3QgYXJyYXkgZm9yIEFTQ0lJIHZhbHVlcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBDaGFyYWN0ZXJDbGFzc2lmaWVyIHtcclxuICAgIGNvbnN0cnVjdG9yKF9kZWZhdWx0VmFsdWUpIHtcclxuICAgICAgICBsZXQgZGVmYXVsdFZhbHVlID0gdG9VaW50OChfZGVmYXVsdFZhbHVlKTtcclxuICAgICAgICB0aGlzLl9kZWZhdWx0VmFsdWUgPSBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgdGhpcy5fYXNjaWlNYXAgPSBDaGFyYWN0ZXJDbGFzc2lmaWVyLl9jcmVhdGVBc2NpaU1hcChkZWZhdWx0VmFsdWUpO1xyXG4gICAgICAgIHRoaXMuX21hcCA9IG5ldyBNYXAoKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBfY3JlYXRlQXNjaWlNYXAoZGVmYXVsdFZhbHVlKSB7XHJcbiAgICAgICAgbGV0IGFzY2lpTWFwID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGFzY2lpTWFwW2ldID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXNjaWlNYXA7XHJcbiAgICB9XHJcbiAgICBzZXQoY2hhckNvZGUsIF92YWx1ZSkge1xyXG4gICAgICAgIGxldCB2YWx1ZSA9IHRvVWludDgoX3ZhbHVlKTtcclxuICAgICAgICBpZiAoY2hhckNvZGUgPj0gMCAmJiBjaGFyQ29kZSA8IDI1Nikge1xyXG4gICAgICAgICAgICB0aGlzLl9hc2NpaU1hcFtjaGFyQ29kZV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21hcC5zZXQoY2hhckNvZGUsIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXQoY2hhckNvZGUpIHtcclxuICAgICAgICBpZiAoY2hhckNvZGUgPj0gMCAmJiBjaGFyQ29kZSA8IDI1Nikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYXNjaWlNYXBbY2hhckNvZGVdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLl9tYXAuZ2V0KGNoYXJDb2RlKSB8fCB0aGlzLl9kZWZhdWx0VmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgQ2hhcmFjdGVyU2V0IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuX2FjdHVhbCA9IG5ldyBDaGFyYWN0ZXJDbGFzc2lmaWVyKDAgLyogRmFsc2UgKi8pO1xyXG4gICAgfVxyXG4gICAgYWRkKGNoYXJDb2RlKSB7XHJcbiAgICAgICAgdGhpcy5fYWN0dWFsLnNldChjaGFyQ29kZSwgMSAvKiBUcnVlICovKTtcclxuICAgIH1cclxuICAgIGhhcyhjaGFyQ29kZSkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5fYWN0dWFsLmdldChjaGFyQ29kZSkgPT09IDEgLyogVHJ1ZSAqLyk7XHJcbiAgICB9XHJcbn1cclxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbmltcG9ydCB7IENoYXJhY3RlckNsYXNzaWZpZXIgfSBmcm9tICcuLi9jb3JlL2NoYXJhY3RlckNsYXNzaWZpZXIuanMnO1xyXG5leHBvcnQgY2xhc3MgVWludDhNYXRyaXgge1xyXG4gICAgY29uc3RydWN0b3Iocm93cywgY29scywgZGVmYXVsdFZhbHVlKSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KHJvd3MgKiBjb2xzKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcm93cyAqIGNvbHM7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBkYXRhW2ldID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLnJvd3MgPSByb3dzO1xyXG4gICAgICAgIHRoaXMuY29scyA9IGNvbHM7XHJcbiAgICB9XHJcbiAgICBnZXQocm93LCBjb2wpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YVtyb3cgKiB0aGlzLmNvbHMgKyBjb2xdO1xyXG4gICAgfVxyXG4gICAgc2V0KHJvdywgY29sLCB2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX2RhdGFbcm93ICogdGhpcy5jb2xzICsgY29sXSA9IHZhbHVlO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBTdGF0ZU1hY2hpbmUge1xyXG4gICAgY29uc3RydWN0b3IoZWRnZXMpIHtcclxuICAgICAgICBsZXQgbWF4Q2hhckNvZGUgPSAwO1xyXG4gICAgICAgIGxldCBtYXhTdGF0ZSA9IDAgLyogSW52YWxpZCAqLztcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZWRnZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IFtmcm9tLCBjaENvZGUsIHRvXSA9IGVkZ2VzW2ldO1xyXG4gICAgICAgICAgICBpZiAoY2hDb2RlID4gbWF4Q2hhckNvZGUpIHtcclxuICAgICAgICAgICAgICAgIG1heENoYXJDb2RlID0gY2hDb2RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChmcm9tID4gbWF4U3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIG1heFN0YXRlID0gZnJvbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodG8gPiBtYXhTdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgbWF4U3RhdGUgPSB0bztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBtYXhDaGFyQ29kZSsrO1xyXG4gICAgICAgIG1heFN0YXRlKys7XHJcbiAgICAgICAgbGV0IHN0YXRlcyA9IG5ldyBVaW50OE1hdHJpeChtYXhTdGF0ZSwgbWF4Q2hhckNvZGUsIDAgLyogSW52YWxpZCAqLyk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGVkZ2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBbZnJvbSwgY2hDb2RlLCB0b10gPSBlZGdlc1tpXTtcclxuICAgICAgICAgICAgc3RhdGVzLnNldChmcm9tLCBjaENvZGUsIHRvKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fc3RhdGVzID0gc3RhdGVzO1xyXG4gICAgICAgIHRoaXMuX21heENoYXJDb2RlID0gbWF4Q2hhckNvZGU7XHJcbiAgICB9XHJcbiAgICBuZXh0U3RhdGUoY3VycmVudFN0YXRlLCBjaENvZGUpIHtcclxuICAgICAgICBpZiAoY2hDb2RlIDwgMCB8fCBjaENvZGUgPj0gdGhpcy5fbWF4Q2hhckNvZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDAgLyogSW52YWxpZCAqLztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlcy5nZXQoY3VycmVudFN0YXRlLCBjaENvZGUpO1xyXG4gICAgfVxyXG59XHJcbi8vIFN0YXRlIG1hY2hpbmUgZm9yIGh0dHA6Ly8gb3IgaHR0cHM6Ly8gb3IgZmlsZTovL1xyXG5sZXQgX3N0YXRlTWFjaGluZSA9IG51bGw7XHJcbmZ1bmN0aW9uIGdldFN0YXRlTWFjaGluZSgpIHtcclxuICAgIGlmIChfc3RhdGVNYWNoaW5lID09PSBudWxsKSB7XHJcbiAgICAgICAgX3N0YXRlTWFjaGluZSA9IG5ldyBTdGF0ZU1hY2hpbmUoW1xyXG4gICAgICAgICAgICBbMSAvKiBTdGFydCAqLywgMTA0IC8qIGggKi8sIDIgLyogSCAqL10sXHJcbiAgICAgICAgICAgIFsxIC8qIFN0YXJ0ICovLCA3MiAvKiBIICovLCAyIC8qIEggKi9dLFxyXG4gICAgICAgICAgICBbMSAvKiBTdGFydCAqLywgMTAyIC8qIGYgKi8sIDYgLyogRiAqL10sXHJcbiAgICAgICAgICAgIFsxIC8qIFN0YXJ0ICovLCA3MCAvKiBGICovLCA2IC8qIEYgKi9dLFxyXG4gICAgICAgICAgICBbMiAvKiBIICovLCAxMTYgLyogdCAqLywgMyAvKiBIVCAqL10sXHJcbiAgICAgICAgICAgIFsyIC8qIEggKi8sIDg0IC8qIFQgKi8sIDMgLyogSFQgKi9dLFxyXG4gICAgICAgICAgICBbMyAvKiBIVCAqLywgMTE2IC8qIHQgKi8sIDQgLyogSFRUICovXSxcclxuICAgICAgICAgICAgWzMgLyogSFQgKi8sIDg0IC8qIFQgKi8sIDQgLyogSFRUICovXSxcclxuICAgICAgICAgICAgWzQgLyogSFRUICovLCAxMTIgLyogcCAqLywgNSAvKiBIVFRQICovXSxcclxuICAgICAgICAgICAgWzQgLyogSFRUICovLCA4MCAvKiBQICovLCA1IC8qIEhUVFAgKi9dLFxyXG4gICAgICAgICAgICBbNSAvKiBIVFRQICovLCAxMTUgLyogcyAqLywgOSAvKiBCZWZvcmVDb2xvbiAqL10sXHJcbiAgICAgICAgICAgIFs1IC8qIEhUVFAgKi8sIDgzIC8qIFMgKi8sIDkgLyogQmVmb3JlQ29sb24gKi9dLFxyXG4gICAgICAgICAgICBbNSAvKiBIVFRQICovLCA1OCAvKiBDb2xvbiAqLywgMTAgLyogQWZ0ZXJDb2xvbiAqL10sXHJcbiAgICAgICAgICAgIFs2IC8qIEYgKi8sIDEwNSAvKiBpICovLCA3IC8qIEZJICovXSxcclxuICAgICAgICAgICAgWzYgLyogRiAqLywgNzMgLyogSSAqLywgNyAvKiBGSSAqL10sXHJcbiAgICAgICAgICAgIFs3IC8qIEZJICovLCAxMDggLyogbCAqLywgOCAvKiBGSUwgKi9dLFxyXG4gICAgICAgICAgICBbNyAvKiBGSSAqLywgNzYgLyogTCAqLywgOCAvKiBGSUwgKi9dLFxyXG4gICAgICAgICAgICBbOCAvKiBGSUwgKi8sIDEwMSAvKiBlICovLCA5IC8qIEJlZm9yZUNvbG9uICovXSxcclxuICAgICAgICAgICAgWzggLyogRklMICovLCA2OSAvKiBFICovLCA5IC8qIEJlZm9yZUNvbG9uICovXSxcclxuICAgICAgICAgICAgWzkgLyogQmVmb3JlQ29sb24gKi8sIDU4IC8qIENvbG9uICovLCAxMCAvKiBBZnRlckNvbG9uICovXSxcclxuICAgICAgICAgICAgWzEwIC8qIEFmdGVyQ29sb24gKi8sIDQ3IC8qIFNsYXNoICovLCAxMSAvKiBBbG1vc3RUaGVyZSAqL10sXHJcbiAgICAgICAgICAgIFsxMSAvKiBBbG1vc3RUaGVyZSAqLywgNDcgLyogU2xhc2ggKi8sIDEyIC8qIEVuZCAqL10sXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX3N0YXRlTWFjaGluZTtcclxufVxyXG5sZXQgX2NsYXNzaWZpZXIgPSBudWxsO1xyXG5mdW5jdGlvbiBnZXRDbGFzc2lmaWVyKCkge1xyXG4gICAgaWYgKF9jbGFzc2lmaWVyID09PSBudWxsKSB7XHJcbiAgICAgICAgX2NsYXNzaWZpZXIgPSBuZXcgQ2hhcmFjdGVyQ2xhc3NpZmllcigwIC8qIE5vbmUgKi8pO1xyXG4gICAgICAgIGNvbnN0IEZPUkNFX1RFUk1JTkFUSU9OX0NIQVJBQ1RFUlMgPSAnIFxcdDw+XFwnXFxcIuOAgeOAgu+9oe+9pO+8jO+8ju+8mu+8m+KAmOOAiOOAjOOAjuOAlO+8iO+8u++9m++9ou+9o++9ne+8ve+8ieOAleOAj+OAjeOAieKAme+9gO+9nuKApic7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBGT1JDRV9URVJNSU5BVElPTl9DSEFSQUNURVJTLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIF9jbGFzc2lmaWVyLnNldChGT1JDRV9URVJNSU5BVElPTl9DSEFSQUNURVJTLmNoYXJDb2RlQXQoaSksIDEgLyogRm9yY2VUZXJtaW5hdGlvbiAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IENBTk5PVF9FTkRfV0lUSF9DSEFSQUNURVJTID0gJy4sOyc7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBDQU5OT1RfRU5EX1dJVEhfQ0hBUkFDVEVSUy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBfY2xhc3NpZmllci5zZXQoQ0FOTk9UX0VORF9XSVRIX0NIQVJBQ1RFUlMuY2hhckNvZGVBdChpKSwgMiAvKiBDYW5ub3RFbmRJbiAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9jbGFzc2lmaWVyO1xyXG59XHJcbmV4cG9ydCBjbGFzcyBMaW5rQ29tcHV0ZXIge1xyXG4gICAgc3RhdGljIF9jcmVhdGVMaW5rKGNsYXNzaWZpZXIsIGxpbmUsIGxpbmVOdW1iZXIsIGxpbmtCZWdpbkluZGV4LCBsaW5rRW5kSW5kZXgpIHtcclxuICAgICAgICAvLyBEbyBub3QgYWxsb3cgdG8gZW5kIGxpbmsgaW4gY2VydGFpbiBjaGFyYWN0ZXJzLi4uXHJcbiAgICAgICAgbGV0IGxhc3RJbmNsdWRlZENoYXJJbmRleCA9IGxpbmtFbmRJbmRleCAtIDE7XHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICBjb25zdCBjaENvZGUgPSBsaW5lLmNoYXJDb2RlQXQobGFzdEluY2x1ZGVkQ2hhckluZGV4KTtcclxuICAgICAgICAgICAgY29uc3QgY2hDbGFzcyA9IGNsYXNzaWZpZXIuZ2V0KGNoQ29kZSk7XHJcbiAgICAgICAgICAgIGlmIChjaENsYXNzICE9PSAyIC8qIENhbm5vdEVuZEluICovKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsYXN0SW5jbHVkZWRDaGFySW5kZXgtLTtcclxuICAgICAgICB9IHdoaWxlIChsYXN0SW5jbHVkZWRDaGFySW5kZXggPiBsaW5rQmVnaW5JbmRleCk7XHJcbiAgICAgICAgLy8gSGFuZGxlIGxpbmtzIGVuY2xvc2VkIGluIHBhcmVucywgc3F1YXJlIGJyYWNrZXRzIGFuZCBjdXJseXMuXHJcbiAgICAgICAgaWYgKGxpbmtCZWdpbkluZGV4ID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBjaGFyQ29kZUJlZm9yZUxpbmsgPSBsaW5lLmNoYXJDb2RlQXQobGlua0JlZ2luSW5kZXggLSAxKTtcclxuICAgICAgICAgICAgY29uc3QgbGFzdENoYXJDb2RlSW5MaW5rID0gbGluZS5jaGFyQ29kZUF0KGxhc3RJbmNsdWRlZENoYXJJbmRleCk7XHJcbiAgICAgICAgICAgIGlmICgoY2hhckNvZGVCZWZvcmVMaW5rID09PSA0MCAvKiBPcGVuUGFyZW4gKi8gJiYgbGFzdENoYXJDb2RlSW5MaW5rID09PSA0MSAvKiBDbG9zZVBhcmVuICovKVxyXG4gICAgICAgICAgICAgICAgfHwgKGNoYXJDb2RlQmVmb3JlTGluayA9PT0gOTEgLyogT3BlblNxdWFyZUJyYWNrZXQgKi8gJiYgbGFzdENoYXJDb2RlSW5MaW5rID09PSA5MyAvKiBDbG9zZVNxdWFyZUJyYWNrZXQgKi8pXHJcbiAgICAgICAgICAgICAgICB8fCAoY2hhckNvZGVCZWZvcmVMaW5rID09PSAxMjMgLyogT3BlbkN1cmx5QnJhY2UgKi8gJiYgbGFzdENoYXJDb2RlSW5MaW5rID09PSAxMjUgLyogQ2xvc2VDdXJseUJyYWNlICovKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gRG8gbm90IGVuZCBpbiApIGlmICggaXMgYmVmb3JlIHRoZSBsaW5rIHN0YXJ0XHJcbiAgICAgICAgICAgICAgICAvLyBEbyBub3QgZW5kIGluIF0gaWYgWyBpcyBiZWZvcmUgdGhlIGxpbmsgc3RhcnRcclxuICAgICAgICAgICAgICAgIC8vIERvIG5vdCBlbmQgaW4gfSBpZiB7IGlzIGJlZm9yZSB0aGUgbGluayBzdGFydFxyXG4gICAgICAgICAgICAgICAgbGFzdEluY2x1ZGVkQ2hhckluZGV4LS07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmFuZ2U6IHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0TGluZU51bWJlcjogbGluZU51bWJlcixcclxuICAgICAgICAgICAgICAgIHN0YXJ0Q29sdW1uOiBsaW5rQmVnaW5JbmRleCArIDEsXHJcbiAgICAgICAgICAgICAgICBlbmRMaW5lTnVtYmVyOiBsaW5lTnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgZW5kQ29sdW1uOiBsYXN0SW5jbHVkZWRDaGFySW5kZXggKyAyXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHVybDogbGluZS5zdWJzdHJpbmcobGlua0JlZ2luSW5kZXgsIGxhc3RJbmNsdWRlZENoYXJJbmRleCArIDEpXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBjb21wdXRlTGlua3MobW9kZWwsIHN0YXRlTWFjaGluZSA9IGdldFN0YXRlTWFjaGluZSgpKSB7XHJcbiAgICAgICAgY29uc3QgY2xhc3NpZmllciA9IGdldENsYXNzaWZpZXIoKTtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDEsIGxpbmVDb3VudCA9IG1vZGVsLmdldExpbmVDb3VudCgpOyBpIDw9IGxpbmVDb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBtb2RlbC5nZXRMaW5lQ29udGVudChpKTtcclxuICAgICAgICAgICAgY29uc3QgbGVuID0gbGluZS5sZW5ndGg7XHJcbiAgICAgICAgICAgIGxldCBqID0gMDtcclxuICAgICAgICAgICAgbGV0IGxpbmtCZWdpbkluZGV4ID0gMDtcclxuICAgICAgICAgICAgbGV0IGxpbmtCZWdpbkNoQ29kZSA9IDA7XHJcbiAgICAgICAgICAgIGxldCBzdGF0ZSA9IDEgLyogU3RhcnQgKi87XHJcbiAgICAgICAgICAgIGxldCBoYXNPcGVuUGFyZW5zID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGxldCBoYXNPcGVuU3F1YXJlQnJhY2tldCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgaW5TcXVhcmVCcmFja2V0cyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgaGFzT3BlbkN1cmx5QnJhY2tldCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB3aGlsZSAoaiA8IGxlbikge1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlc2V0U3RhdGVNYWNoaW5lID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaENvZGUgPSBsaW5lLmNoYXJDb2RlQXQoaik7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUgPT09IDEzIC8qIEFjY2VwdCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjaENsYXNzO1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY2hDb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDAgLyogT3BlblBhcmVuICovOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzT3BlblBhcmVucyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaENsYXNzID0gMCAvKiBOb25lICovO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDEgLyogQ2xvc2VQYXJlbiAqLzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoQ2xhc3MgPSAoaGFzT3BlblBhcmVucyA/IDAgLyogTm9uZSAqLyA6IDEgLyogRm9yY2VUZXJtaW5hdGlvbiAqLyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA5MSAvKiBPcGVuU3F1YXJlQnJhY2tldCAqLzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluU3F1YXJlQnJhY2tldHMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzT3BlblNxdWFyZUJyYWNrZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hDbGFzcyA9IDAgLyogTm9uZSAqLztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDkzIC8qIENsb3NlU3F1YXJlQnJhY2tldCAqLzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluU3F1YXJlQnJhY2tldHMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoQ2xhc3MgPSAoaGFzT3BlblNxdWFyZUJyYWNrZXQgPyAwIC8qIE5vbmUgKi8gOiAxIC8qIEZvcmNlVGVybWluYXRpb24gKi8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTIzIC8qIE9wZW5DdXJseUJyYWNlICovOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzT3BlbkN1cmx5QnJhY2tldCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaENsYXNzID0gMCAvKiBOb25lICovO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTI1IC8qIENsb3NlQ3VybHlCcmFjZSAqLzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoQ2xhc3MgPSAoaGFzT3BlbkN1cmx5QnJhY2tldCA/IDAgLyogTm9uZSAqLyA6IDEgLyogRm9yY2VUZXJtaW5hdGlvbiAqLyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgLyogVGhlIGZvbGxvd2luZyB0aHJlZSBydWxlcyBtYWtlIGl0IHRoYXQgJyBvciBcIiBvciBgIGFyZSBhbGxvd2VkIGluc2lkZSBsaW5rcyBpZiB0aGUgbGluayBiZWdhbiB3aXRoIGEgZGlmZmVyZW50IG9uZSAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM5IC8qIFNpbmdsZVF1b3RlICovOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hDbGFzcyA9IChsaW5rQmVnaW5DaENvZGUgPT09IDM0IC8qIERvdWJsZVF1b3RlICovIHx8IGxpbmtCZWdpbkNoQ29kZSA9PT0gOTYgLyogQmFja1RpY2sgKi8pID8gMCAvKiBOb25lICovIDogMSAvKiBGb3JjZVRlcm1pbmF0aW9uICovO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzQgLyogRG91YmxlUXVvdGUgKi86XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaENsYXNzID0gKGxpbmtCZWdpbkNoQ29kZSA9PT0gMzkgLyogU2luZ2xlUXVvdGUgKi8gfHwgbGlua0JlZ2luQ2hDb2RlID09PSA5NiAvKiBCYWNrVGljayAqLykgPyAwIC8qIE5vbmUgKi8gOiAxIC8qIEZvcmNlVGVybWluYXRpb24gKi87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA5NiAvKiBCYWNrVGljayAqLzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoQ2xhc3MgPSAobGlua0JlZ2luQ2hDb2RlID09PSAzOSAvKiBTaW5nbGVRdW90ZSAqLyB8fCBsaW5rQmVnaW5DaENvZGUgPT09IDM0IC8qIERvdWJsZVF1b3RlICovKSA/IDAgLyogTm9uZSAqLyA6IDEgLyogRm9yY2VUZXJtaW5hdGlvbiAqLztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQyIC8qIEFzdGVyaXNrICovOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYCpgIHRlcm1pbmF0ZXMgYSBsaW5rIGlmIHRoZSBsaW5rIGJlZ2FuIHdpdGggYCpgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaENsYXNzID0gKGxpbmtCZWdpbkNoQ29kZSA9PT0gNDIgLyogQXN0ZXJpc2sgKi8pID8gMSAvKiBGb3JjZVRlcm1pbmF0aW9uICovIDogMCAvKiBOb25lICovO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTI0IC8qIFBpcGUgKi86XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBgfGAgdGVybWluYXRlcyBhIGxpbmsgaWYgdGhlIGxpbmsgYmVnYW4gd2l0aCBgfGBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoQ2xhc3MgPSAobGlua0JlZ2luQ2hDb2RlID09PSAxMjQgLyogUGlwZSAqLykgPyAxIC8qIEZvcmNlVGVybWluYXRpb24gKi8gOiAwIC8qIE5vbmUgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzMiAvKiBTcGFjZSAqLzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGAgYCBhbGxvdyBzcGFjZSBpbiBiZXR3ZWVuIFsgYW5kIF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoQ2xhc3MgPSAoaW5TcXVhcmVCcmFja2V0cyA/IDAgLyogTm9uZSAqLyA6IDEgLyogRm9yY2VUZXJtaW5hdGlvbiAqLyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoQ2xhc3MgPSBjbGFzc2lmaWVyLmdldChjaENvZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBjaGFyYWN0ZXIgdGVybWluYXRlcyBsaW5rXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoQ2xhc3MgPT09IDEgLyogRm9yY2VUZXJtaW5hdGlvbiAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChMaW5rQ29tcHV0ZXIuX2NyZWF0ZUxpbmsoY2xhc3NpZmllciwgbGluZSwgaSwgbGlua0JlZ2luSW5kZXgsIGopKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRTdGF0ZU1hY2hpbmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0YXRlID09PSAxMiAvKiBFbmQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2hDbGFzcztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hDb2RlID09PSA5MSAvKiBPcGVuU3F1YXJlQnJhY2tldCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBbGxvdyBmb3IgdGhlIGF1dGhvcml0eSBwYXJ0IHRvIGNvbnRhaW4gaXB2NiBhZGRyZXNzZXMgd2hpY2ggY29udGFpbiBbIGFuZCBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc09wZW5TcXVhcmVCcmFja2V0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hDbGFzcyA9IDAgLyogTm9uZSAqLztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoQ2xhc3MgPSBjbGFzc2lmaWVyLmdldChjaENvZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBjaGFyYWN0ZXIgdGVybWluYXRlcyBsaW5rXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoQ2xhc3MgPT09IDEgLyogRm9yY2VUZXJtaW5hdGlvbiAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldFN0YXRlTWFjaGluZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IDEzIC8qIEFjY2VwdCAqLztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHN0YXRlTWFjaGluZS5uZXh0U3RhdGUoc3RhdGUsIGNoQ29kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlID09PSAwIC8qIEludmFsaWQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRTdGF0ZU1hY2hpbmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChyZXNldFN0YXRlTWFjaGluZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gMSAvKiBTdGFydCAqLztcclxuICAgICAgICAgICAgICAgICAgICBoYXNPcGVuUGFyZW5zID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFzT3BlblNxdWFyZUJyYWNrZXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBoYXNPcGVuQ3VybHlCcmFja2V0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVjb3JkIHdoZXJlIHRoZSBsaW5rIHN0YXJ0ZWRcclxuICAgICAgICAgICAgICAgICAgICBsaW5rQmVnaW5JbmRleCA9IGogKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmtCZWdpbkNoQ29kZSA9IGNoQ29kZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGorKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc3RhdGUgPT09IDEzIC8qIEFjY2VwdCAqLykge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goTGlua0NvbXB1dGVyLl9jcmVhdGVMaW5rKGNsYXNzaWZpZXIsIGxpbmUsIGksIGxpbmtCZWdpbkluZGV4LCBsZW4pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIGFsbCBsaW5rcyBjb250YWlucyBpbiB0aGUgcHJvdmlkZWRcclxuICogZG9jdW1lbnQuICpOb3RlKiB0aGF0IHRoaXMgb3BlcmF0aW9uIGlzIGNvbXB1dGF0aW9uYWxcclxuICogZXhwZW5zaXZlIGFuZCBzaG91bGQgbm90IHJ1biBpbiB0aGUgVUkgdGhyZWFkLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVMaW5rcyhtb2RlbCkge1xyXG4gICAgaWYgKCFtb2RlbCB8fCB0eXBlb2YgbW9kZWwuZ2V0TGluZUNvdW50ICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBtb2RlbC5nZXRMaW5lQ29udGVudCAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIC8vIFVua25vd24gY2FsbGVyIVxyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICAgIHJldHVybiBMaW5rQ29tcHV0ZXIuY29tcHV0ZUxpbmtzKG1vZGVsKTtcclxufVxyXG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuZXhwb3J0IGNsYXNzIEJhc2ljSW5wbGFjZVJlcGxhY2Uge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5fZGVmYXVsdFZhbHVlU2V0ID0gW1xyXG4gICAgICAgICAgICBbJ3RydWUnLCAnZmFsc2UnXSxcclxuICAgICAgICAgICAgWydUcnVlJywgJ0ZhbHNlJ10sXHJcbiAgICAgICAgICAgIFsnUHJpdmF0ZScsICdQdWJsaWMnLCAnRnJpZW5kJywgJ1JlYWRPbmx5JywgJ1BhcnRpYWwnLCAnUHJvdGVjdGVkJywgJ1dyaXRlT25seSddLFxyXG4gICAgICAgICAgICBbJ3B1YmxpYycsICdwcm90ZWN0ZWQnLCAncHJpdmF0ZSddLFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbiAgICBuYXZpZ2F0ZVZhbHVlU2V0KHJhbmdlMSwgdGV4dDEsIHJhbmdlMiwgdGV4dDIsIHVwKSB7XHJcbiAgICAgICAgaWYgKHJhbmdlMSAmJiB0ZXh0MSkge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5kb05hdmlnYXRlVmFsdWVTZXQodGV4dDEsIHVwKTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZTogcmFuZ2UxLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiByZXN1bHRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJhbmdlMiAmJiB0ZXh0Mikge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5kb05hdmlnYXRlVmFsdWVTZXQodGV4dDIsIHVwKTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZTogcmFuZ2UyLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiByZXN1bHRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBkb05hdmlnYXRlVmFsdWVTZXQodGV4dCwgdXApIHtcclxuICAgICAgICBsZXQgbnVtYmVyUmVzdWx0ID0gdGhpcy5udW1iZXJSZXBsYWNlKHRleHQsIHVwKTtcclxuICAgICAgICBpZiAobnVtYmVyUmVzdWx0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJSZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnRleHRSZXBsYWNlKHRleHQsIHVwKTtcclxuICAgIH1cclxuICAgIG51bWJlclJlcGxhY2UodmFsdWUsIHVwKSB7XHJcbiAgICAgICAgbGV0IHByZWNpc2lvbiA9IE1hdGgucG93KDEwLCB2YWx1ZS5sZW5ndGggLSAodmFsdWUubGFzdEluZGV4T2YoJy4nKSArIDEpKTtcclxuICAgICAgICBsZXQgbjEgPSBOdW1iZXIodmFsdWUpO1xyXG4gICAgICAgIGxldCBuMiA9IHBhcnNlRmxvYXQodmFsdWUpO1xyXG4gICAgICAgIGlmICghaXNOYU4objEpICYmICFpc05hTihuMikgJiYgbjEgPT09IG4yKSB7XHJcbiAgICAgICAgICAgIGlmIChuMSA9PT0gMCAmJiAhdXApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsOyAvLyBkb24ndCBkbyBuZWdhdGl2ZVxyXG4gICAgICAgICAgICAgICAgLy9cdFx0XHR9IGVsc2UgaWYobjEgPT09IDkgJiYgdXApIHtcclxuICAgICAgICAgICAgICAgIC8vXHRcdFx0XHRyZXR1cm4gbnVsbDsgLy8gZG9uJ3QgaW5zZXJ0IDEwIGludG8gYSBudW1iZXJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG4xID0gTWF0aC5mbG9vcihuMSAqIHByZWNpc2lvbik7XHJcbiAgICAgICAgICAgICAgICBuMSArPSB1cCA/IHByZWNpc2lvbiA6IC1wcmVjaXNpb247XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nKG4xIC8gcHJlY2lzaW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIHRleHRSZXBsYWNlKHZhbHVlLCB1cCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlU2V0c1JlcGxhY2UodGhpcy5fZGVmYXVsdFZhbHVlU2V0LCB2YWx1ZSwgdXApO1xyXG4gICAgfVxyXG4gICAgdmFsdWVTZXRzUmVwbGFjZSh2YWx1ZVNldHMsIHZhbHVlLCB1cCkge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB2YWx1ZVNldHMubGVuZ3RoOyByZXN1bHQgPT09IG51bGwgJiYgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMudmFsdWVTZXRSZXBsYWNlKHZhbHVlU2V0c1tpXSwgdmFsdWUsIHVwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIHZhbHVlU2V0UmVwbGFjZSh2YWx1ZVNldCwgdmFsdWUsIHVwKSB7XHJcbiAgICAgICAgbGV0IGlkeCA9IHZhbHVlU2V0LmluZGV4T2YodmFsdWUpO1xyXG4gICAgICAgIGlmIChpZHggPj0gMCkge1xyXG4gICAgICAgICAgICBpZHggKz0gdXAgPyArMSA6IC0xO1xyXG4gICAgICAgICAgICBpZiAoaWR4IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgaWR4ID0gdmFsdWVTZXQubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlkeCAlPSB2YWx1ZVNldC5sZW5ndGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlU2V0W2lkeF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59XHJcbkJhc2ljSW5wbGFjZVJlcGxhY2UuSU5TVEFOQ0UgPSBuZXcgQmFzaWNJbnBsYWNlUmVwbGFjZSgpO1xyXG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuY2xhc3MgTm9kZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICB0aGlzLm5leHQgPSBOb2RlLlVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLnByZXYgPSBOb2RlLlVuZGVmaW5lZDtcclxuICAgIH1cclxufVxyXG5Ob2RlLlVuZGVmaW5lZCA9IG5ldyBOb2RlKHVuZGVmaW5lZCk7XHJcbmV4cG9ydCBjbGFzcyBMaW5rZWRMaXN0IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuX2ZpcnN0ID0gTm9kZS5VbmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5fbGFzdCA9IE5vZGUuVW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuX3NpemUgPSAwO1xyXG4gICAgfVxyXG4gICAgZ2V0IHNpemUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpemU7XHJcbiAgICB9XHJcbiAgICBpc0VtcHR5KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9maXJzdCA9PT0gTm9kZS5VbmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICBjbGVhcigpIHtcclxuICAgICAgICBsZXQgbm9kZSA9IHRoaXMuX2ZpcnN0O1xyXG4gICAgICAgIHdoaWxlIChub2RlICE9PSBOb2RlLlVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gbm9kZS5uZXh0O1xyXG4gICAgICAgICAgICBub2RlLnByZXYgPSBOb2RlLlVuZGVmaW5lZDtcclxuICAgICAgICAgICAgbm9kZS5uZXh0ID0gTm9kZS5VbmRlZmluZWQ7XHJcbiAgICAgICAgICAgIG5vZGUgPSBuZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9maXJzdCA9IE5vZGUuVW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuX2xhc3QgPSBOb2RlLlVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLl9zaXplID0gMDtcclxuICAgIH1cclxuICAgIHVuc2hpZnQoZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbnNlcnQoZWxlbWVudCwgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgcHVzaChlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc2VydChlbGVtZW50LCB0cnVlKTtcclxuICAgIH1cclxuICAgIF9pbnNlcnQoZWxlbWVudCwgYXRUaGVFbmQpIHtcclxuICAgICAgICBjb25zdCBuZXdOb2RlID0gbmV3IE5vZGUoZWxlbWVudCk7XHJcbiAgICAgICAgaWYgKHRoaXMuX2ZpcnN0ID09PSBOb2RlLlVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9maXJzdCA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgIHRoaXMuX2xhc3QgPSBuZXdOb2RlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChhdFRoZUVuZCkge1xyXG4gICAgICAgICAgICAvLyBwdXNoXHJcbiAgICAgICAgICAgIGNvbnN0IG9sZExhc3QgPSB0aGlzLl9sYXN0O1xyXG4gICAgICAgICAgICB0aGlzLl9sYXN0ID0gbmV3Tm9kZTtcclxuICAgICAgICAgICAgbmV3Tm9kZS5wcmV2ID0gb2xkTGFzdDtcclxuICAgICAgICAgICAgb2xkTGFzdC5uZXh0ID0gbmV3Tm9kZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHVuc2hpZnRcclxuICAgICAgICAgICAgY29uc3Qgb2xkRmlyc3QgPSB0aGlzLl9maXJzdDtcclxuICAgICAgICAgICAgdGhpcy5fZmlyc3QgPSBuZXdOb2RlO1xyXG4gICAgICAgICAgICBuZXdOb2RlLm5leHQgPSBvbGRGaXJzdDtcclxuICAgICAgICAgICAgb2xkRmlyc3QucHJldiA9IG5ld05vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3NpemUgKz0gMTtcclxuICAgICAgICBsZXQgZGlkUmVtb3ZlID0gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFkaWRSZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgIGRpZFJlbW92ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmUobmV3Tm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgc2hpZnQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2ZpcnN0ID09PSBOb2RlLlVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzID0gdGhpcy5fZmlyc3QuZWxlbWVudDtcclxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlKHRoaXMuX2ZpcnN0KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwb3AoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2xhc3QgPT09IE5vZGUuVW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCByZXMgPSB0aGlzLl9sYXN0LmVsZW1lbnQ7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZSh0aGlzLl9sYXN0KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBfcmVtb3ZlKG5vZGUpIHtcclxuICAgICAgICBpZiAobm9kZS5wcmV2ICE9PSBOb2RlLlVuZGVmaW5lZCAmJiBub2RlLm5leHQgIT09IE5vZGUuVW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIC8vIG1pZGRsZVxyXG4gICAgICAgICAgICBjb25zdCBhbmNob3IgPSBub2RlLnByZXY7XHJcbiAgICAgICAgICAgIGFuY2hvci5uZXh0ID0gbm9kZS5uZXh0O1xyXG4gICAgICAgICAgICBub2RlLm5leHQucHJldiA9IGFuY2hvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobm9kZS5wcmV2ID09PSBOb2RlLlVuZGVmaW5lZCAmJiBub2RlLm5leHQgPT09IE5vZGUuVW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIC8vIG9ubHkgbm9kZVxyXG4gICAgICAgICAgICB0aGlzLl9maXJzdCA9IE5vZGUuVW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB0aGlzLl9sYXN0ID0gTm9kZS5VbmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG5vZGUubmV4dCA9PT0gTm9kZS5VbmRlZmluZWQpIHtcclxuICAgICAgICAgICAgLy8gbGFzdFxyXG4gICAgICAgICAgICB0aGlzLl9sYXN0ID0gdGhpcy5fbGFzdC5wcmV2O1xyXG4gICAgICAgICAgICB0aGlzLl9sYXN0Lm5leHQgPSBOb2RlLlVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobm9kZS5wcmV2ID09PSBOb2RlLlVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAvLyBmaXJzdFxyXG4gICAgICAgICAgICB0aGlzLl9maXJzdCA9IHRoaXMuX2ZpcnN0Lm5leHQ7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZpcnN0LnByZXYgPSBOb2RlLlVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZG9uZVxyXG4gICAgICAgIHRoaXMuX3NpemUgLT0gMTtcclxuICAgIH1cclxuICAgICpbU3ltYm9sLml0ZXJhdG9yXSgpIHtcclxuICAgICAgICBsZXQgbm9kZSA9IHRoaXMuX2ZpcnN0O1xyXG4gICAgICAgIHdoaWxlIChub2RlICE9PSBOb2RlLlVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB5aWVsZCBub2RlLmVsZW1lbnQ7XHJcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLm5leHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5pbXBvcnQgeyBnbG9iYWxzIH0gZnJvbSAnLi9wbGF0Zm9ybS5qcyc7XHJcbmNvbnN0IGhhc1BlcmZvcm1hbmNlTm93ID0gKGdsb2JhbHMucGVyZm9ybWFuY2UgJiYgdHlwZW9mIGdsb2JhbHMucGVyZm9ybWFuY2Uubm93ID09PSAnZnVuY3Rpb24nKTtcclxuZXhwb3J0IGNsYXNzIFN0b3BXYXRjaCB7XHJcbiAgICBjb25zdHJ1Y3RvcihoaWdoUmVzb2x1dGlvbikge1xyXG4gICAgICAgIHRoaXMuX2hpZ2hSZXNvbHV0aW9uID0gaGFzUGVyZm9ybWFuY2VOb3cgJiYgaGlnaFJlc29sdXRpb247XHJcbiAgICAgICAgdGhpcy5fc3RhcnRUaW1lID0gdGhpcy5fbm93KCk7XHJcbiAgICAgICAgdGhpcy5fc3RvcFRpbWUgPSAtMTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBjcmVhdGUoaGlnaFJlc29sdXRpb24gPSB0cnVlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTdG9wV2F0Y2goaGlnaFJlc29sdXRpb24pO1xyXG4gICAgfVxyXG4gICAgc3RvcCgpIHtcclxuICAgICAgICB0aGlzLl9zdG9wVGltZSA9IHRoaXMuX25vdygpO1xyXG4gICAgfVxyXG4gICAgZWxhcHNlZCgpIHtcclxuICAgICAgICBpZiAodGhpcy5fc3RvcFRpbWUgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdG9wVGltZSAtIHRoaXMuX3N0YXJ0VGltZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX25vdygpIC0gdGhpcy5fc3RhcnRUaW1lO1xyXG4gICAgfVxyXG4gICAgX25vdygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faGlnaFJlc29sdXRpb24gPyBnbG9iYWxzLnBlcmZvcm1hbmNlLm5vdygpIDogRGF0ZS5ub3coKTtcclxuICAgIH1cclxufVxyXG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuaW1wb3J0IHsgb25VbmV4cGVjdGVkRXJyb3IgfSBmcm9tICcuL2Vycm9ycy5qcyc7XHJcbmltcG9ydCB7IERpc3Bvc2FibGUsIGNvbWJpbmVkRGlzcG9zYWJsZSwgRGlzcG9zYWJsZVN0b3JlIH0gZnJvbSAnLi9saWZlY3ljbGUuanMnO1xyXG5pbXBvcnQgeyBMaW5rZWRMaXN0IH0gZnJvbSAnLi9saW5rZWRMaXN0LmpzJztcclxuaW1wb3J0IHsgU3RvcFdhdGNoIH0gZnJvbSAnLi9zdG9wd2F0Y2guanMnO1xyXG5leHBvcnQgdmFyIEV2ZW50O1xyXG4oZnVuY3Rpb24gKEV2ZW50KSB7XHJcbiAgICBFdmVudC5Ob25lID0gKCkgPT4gRGlzcG9zYWJsZS5Ob25lO1xyXG4gICAgLyoqXHJcbiAgICAgKiBHaXZlbiBhbiBldmVudCwgcmV0dXJucyBhbm90aGVyIGV2ZW50IHdoaWNoIG9ubHkgZmlyZXMgb25jZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gb25jZShldmVudCkge1xyXG4gICAgICAgIHJldHVybiAobGlzdGVuZXIsIHRoaXNBcmdzID0gbnVsbCwgZGlzcG9zYWJsZXMpID0+IHtcclxuICAgICAgICAgICAgLy8gd2UgbmVlZCB0aGlzLCBpbiBjYXNlIHRoZSBldmVudCBmaXJlcyBkdXJpbmcgdGhlIGxpc3RlbmVyIGNhbGxcclxuICAgICAgICAgICAgbGV0IGRpZEZpcmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDtcclxuICAgICAgICAgICAgcmVzdWx0ID0gZXZlbnQoZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGlkRmlyZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkaWRGaXJlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBsaXN0ZW5lci5jYWxsKHRoaXNBcmdzLCBlKTtcclxuICAgICAgICAgICAgfSwgbnVsbCwgZGlzcG9zYWJsZXMpO1xyXG4gICAgICAgICAgICBpZiAoZGlkRmlyZSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBFdmVudC5vbmNlID0gb25jZTtcclxuICAgIC8qKlxyXG4gICAgICogR2l2ZW4gYW4gZXZlbnQgYW5kIGEgYG1hcGAgZnVuY3Rpb24sIHJldHVybnMgYW5vdGhlciBldmVudCB3aGljaCBtYXBzIGVhY2ggZWxlbWVudFxyXG4gICAgICogdGhyb3VnaCB0aGUgbWFwcGluZyBmdW5jdGlvbi5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gbWFwKGV2ZW50LCBtYXApIHtcclxuICAgICAgICByZXR1cm4gc25hcHNob3QoKGxpc3RlbmVyLCB0aGlzQXJncyA9IG51bGwsIGRpc3Bvc2FibGVzKSA9PiBldmVudChpID0+IGxpc3RlbmVyLmNhbGwodGhpc0FyZ3MsIG1hcChpKSksIG51bGwsIGRpc3Bvc2FibGVzKSk7XHJcbiAgICB9XHJcbiAgICBFdmVudC5tYXAgPSBtYXA7XHJcbiAgICAvKipcclxuICAgICAqIEdpdmVuIGFuIGV2ZW50IGFuZCBhbiBgZWFjaGAgZnVuY3Rpb24sIHJldHVybnMgYW5vdGhlciBpZGVudGljYWwgZXZlbnQgYW5kIGNhbGxzXHJcbiAgICAgKiB0aGUgYGVhY2hgIGZ1bmN0aW9uIHBlciBlYWNoIGVsZW1lbnQuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGZvckVhY2goZXZlbnQsIGVhY2gpIHtcclxuICAgICAgICByZXR1cm4gc25hcHNob3QoKGxpc3RlbmVyLCB0aGlzQXJncyA9IG51bGwsIGRpc3Bvc2FibGVzKSA9PiBldmVudChpID0+IHsgZWFjaChpKTsgbGlzdGVuZXIuY2FsbCh0aGlzQXJncywgaSk7IH0sIG51bGwsIGRpc3Bvc2FibGVzKSk7XHJcbiAgICB9XHJcbiAgICBFdmVudC5mb3JFYWNoID0gZm9yRWFjaDtcclxuICAgIGZ1bmN0aW9uIGZpbHRlcihldmVudCwgZmlsdGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHNuYXBzaG90KChsaXN0ZW5lciwgdGhpc0FyZ3MgPSBudWxsLCBkaXNwb3NhYmxlcykgPT4gZXZlbnQoZSA9PiBmaWx0ZXIoZSkgJiYgbGlzdGVuZXIuY2FsbCh0aGlzQXJncywgZSksIG51bGwsIGRpc3Bvc2FibGVzKSk7XHJcbiAgICB9XHJcbiAgICBFdmVudC5maWx0ZXIgPSBmaWx0ZXI7XHJcbiAgICAvKipcclxuICAgICAqIEdpdmVuIGFuIGV2ZW50LCByZXR1cm5zIHRoZSBzYW1lIGV2ZW50IGJ1dCB0eXBlZCBhcyBgRXZlbnQ8dm9pZD5gLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBzaWduYWwoZXZlbnQpIHtcclxuICAgICAgICByZXR1cm4gZXZlbnQ7XHJcbiAgICB9XHJcbiAgICBFdmVudC5zaWduYWwgPSBzaWduYWw7XHJcbiAgICBmdW5jdGlvbiBhbnkoLi4uZXZlbnRzKSB7XHJcbiAgICAgICAgcmV0dXJuIChsaXN0ZW5lciwgdGhpc0FyZ3MgPSBudWxsLCBkaXNwb3NhYmxlcykgPT4gY29tYmluZWREaXNwb3NhYmxlKC4uLmV2ZW50cy5tYXAoZXZlbnQgPT4gZXZlbnQoZSA9PiBsaXN0ZW5lci5jYWxsKHRoaXNBcmdzLCBlKSwgbnVsbCwgZGlzcG9zYWJsZXMpKSk7XHJcbiAgICB9XHJcbiAgICBFdmVudC5hbnkgPSBhbnk7XHJcbiAgICAvKipcclxuICAgICAqIEdpdmVuIGFuIGV2ZW50IGFuZCBhIGBtZXJnZWAgZnVuY3Rpb24sIHJldHVybnMgYW5vdGhlciBldmVudCB3aGljaCBtYXBzIGVhY2ggZWxlbWVudFxyXG4gICAgICogYW5kIHRoZSBjdW11bGF0aXZlIHJlc3VsdCB0aHJvdWdoIHRoZSBgbWVyZ2VgIGZ1bmN0aW9uLiBTaW1pbGFyIHRvIGBtYXBgLCBidXQgd2l0aCBtZW1vcnkuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHJlZHVjZShldmVudCwgbWVyZ2UsIGluaXRpYWwpIHtcclxuICAgICAgICBsZXQgb3V0cHV0ID0gaW5pdGlhbDtcclxuICAgICAgICByZXR1cm4gbWFwKGV2ZW50LCBlID0+IHtcclxuICAgICAgICAgICAgb3V0cHV0ID0gbWVyZ2Uob3V0cHV0LCBlKTtcclxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIEV2ZW50LnJlZHVjZSA9IHJlZHVjZTtcclxuICAgIC8qKlxyXG4gICAgICogR2l2ZW4gYSBjaGFpbiBvZiBldmVudCBwcm9jZXNzaW5nIGZ1bmN0aW9ucyAoZmlsdGVyLCBtYXAsIGV0YyksIGVhY2hcclxuICAgICAqIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCBwZXIgZXZlbnQgJiBwZXIgbGlzdGVuZXIuIFNuYXBzaG90dGluZyBhbiBldmVudFxyXG4gICAgICogY2hhaW4gYWxsb3dzIGVhY2ggZnVuY3Rpb24gdG8gYmUgaW52b2tlZCBqdXN0IG9uY2UgcGVyIGV2ZW50LlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBzbmFwc2hvdChldmVudCkge1xyXG4gICAgICAgIGxldCBsaXN0ZW5lcjtcclxuICAgICAgICBjb25zdCBlbWl0dGVyID0gbmV3IEVtaXR0ZXIoe1xyXG4gICAgICAgICAgICBvbkZpcnN0TGlzdGVuZXJBZGQoKSB7XHJcbiAgICAgICAgICAgICAgICBsaXN0ZW5lciA9IGV2ZW50KGVtaXR0ZXIuZmlyZSwgZW1pdHRlcik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uTGFzdExpc3RlbmVyUmVtb3ZlKCkge1xyXG4gICAgICAgICAgICAgICAgbGlzdGVuZXIuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGVtaXR0ZXIuZXZlbnQ7XHJcbiAgICB9XHJcbiAgICBFdmVudC5zbmFwc2hvdCA9IHNuYXBzaG90O1xyXG4gICAgZnVuY3Rpb24gZGVib3VuY2UoZXZlbnQsIG1lcmdlLCBkZWxheSA9IDEwMCwgbGVhZGluZyA9IGZhbHNlLCBsZWFrV2FybmluZ1RocmVzaG9sZCkge1xyXG4gICAgICAgIGxldCBzdWJzY3JpcHRpb247XHJcbiAgICAgICAgbGV0IG91dHB1dCA9IHVuZGVmaW5lZDtcclxuICAgICAgICBsZXQgaGFuZGxlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGxldCBudW1EZWJvdW5jZWRDYWxscyA9IDA7XHJcbiAgICAgICAgY29uc3QgZW1pdHRlciA9IG5ldyBFbWl0dGVyKHtcclxuICAgICAgICAgICAgbGVha1dhcm5pbmdUaHJlc2hvbGQsXHJcbiAgICAgICAgICAgIG9uRmlyc3RMaXN0ZW5lckFkZCgpIHtcclxuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IGV2ZW50KGN1ciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbnVtRGVib3VuY2VkQ2FsbHMrKztcclxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSBtZXJnZShvdXRwdXQsIGN1cik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxlYWRpbmcgJiYgIWhhbmRsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbWl0dGVyLmZpcmUob3V0cHV0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoaGFuZGxlKTtcclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGUgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgX291dHB1dCA9IG91dHB1dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGVhZGluZyB8fCBudW1EZWJvdW5jZWRDYWxscyA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtaXR0ZXIuZmlyZShfb3V0cHV0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBudW1EZWJvdW5jZWRDYWxscyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZGVsYXkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uTGFzdExpc3RlbmVyUmVtb3ZlKCkge1xyXG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBlbWl0dGVyLmV2ZW50O1xyXG4gICAgfVxyXG4gICAgRXZlbnQuZGVib3VuY2UgPSBkZWJvdW5jZTtcclxuICAgIC8qKlxyXG4gICAgICogR2l2ZW4gYW4gZXZlbnQsIGl0IHJldHVybnMgYW5vdGhlciBldmVudCB3aGljaCBmaXJlcyBvbmx5IG9uY2UgYW5kIGFzIHNvb24gYXNcclxuICAgICAqIHRoZSBpbnB1dCBldmVudCBlbWl0cy4gVGhlIGV2ZW50IGRhdGEgaXMgdGhlIG51bWJlciBvZiBtaWxsaXMgaXQgdG9vayBmb3IgdGhlXHJcbiAgICAgKiBldmVudCB0byBmaXJlLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBzdG9wd2F0Y2goZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBzdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgIHJldHVybiBtYXAob25jZShldmVudCksIF8gPT4gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzdGFydCk7XHJcbiAgICB9XHJcbiAgICBFdmVudC5zdG9wd2F0Y2ggPSBzdG9wd2F0Y2g7XHJcbiAgICAvKipcclxuICAgICAqIEdpdmVuIGFuIGV2ZW50LCBpdCByZXR1cm5zIGFub3RoZXIgZXZlbnQgd2hpY2ggZmlyZXMgb25seSB3aGVuIHRoZSBldmVudFxyXG4gICAgICogZWxlbWVudCBjaGFuZ2VzLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBsYXRjaChldmVudCwgZXF1YWxzID0gKGEsIGIpID0+IGEgPT09IGIpIHtcclxuICAgICAgICBsZXQgZmlyc3RDYWxsID0gdHJ1ZTtcclxuICAgICAgICBsZXQgY2FjaGU7XHJcbiAgICAgICAgcmV0dXJuIGZpbHRlcihldmVudCwgdmFsdWUgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBzaG91bGRFbWl0ID0gZmlyc3RDYWxsIHx8ICFlcXVhbHModmFsdWUsIGNhY2hlKTtcclxuICAgICAgICAgICAgZmlyc3RDYWxsID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNhY2hlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHJldHVybiBzaG91bGRFbWl0O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgRXZlbnQubGF0Y2ggPSBsYXRjaDtcclxuICAgIC8qKlxyXG4gICAgICogR2l2ZW4gYW4gZXZlbnQsIGl0IHJldHVybnMgYW5vdGhlciBldmVudCB3aGljaCBmaXJlcyBvbmx5IHdoZW4gdGhlIGV2ZW50XHJcbiAgICAgKiBlbGVtZW50IGNoYW5nZXMuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHNwbGl0KGV2ZW50LCBpc1QpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBFdmVudC5maWx0ZXIoZXZlbnQsIGlzVCksXHJcbiAgICAgICAgICAgIEV2ZW50LmZpbHRlcihldmVudCwgZSA9PiAhaXNUKGUpKSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG4gICAgRXZlbnQuc3BsaXQgPSBzcGxpdDtcclxuICAgIC8qKlxyXG4gICAgICogQnVmZmVycyB0aGUgcHJvdmlkZWQgZXZlbnQgdW50aWwgYSBmaXJzdCBsaXN0ZW5lciBjb21lc1xyXG4gICAgICogYWxvbmcsIGF0IHdoaWNoIHBvaW50IGZpcmUgYWxsIHRoZSBldmVudHMgYXQgb25jZSBhbmRcclxuICAgICAqIHBpcGUgdGhlIGV2ZW50IGZyb20gdGhlbiBvbi5cclxuICAgICAqXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiBjb25zdCBlbWl0dGVyID0gbmV3IEVtaXR0ZXI8bnVtYmVyPigpO1xyXG4gICAgICogY29uc3QgZXZlbnQgPSBlbWl0dGVyLmV2ZW50O1xyXG4gICAgICogY29uc3QgYnVmZmVyZWRFdmVudCA9IGJ1ZmZlcihldmVudCk7XHJcbiAgICAgKlxyXG4gICAgICogZW1pdHRlci5maXJlKDEpO1xyXG4gICAgICogZW1pdHRlci5maXJlKDIpO1xyXG4gICAgICogZW1pdHRlci5maXJlKDMpO1xyXG4gICAgICogLy8gbm90aGluZy4uLlxyXG4gICAgICpcclxuICAgICAqIGNvbnN0IGxpc3RlbmVyID0gYnVmZmVyZWRFdmVudChudW0gPT4gY29uc29sZS5sb2cobnVtKSk7XHJcbiAgICAgKiAvLyAxLCAyLCAzXHJcbiAgICAgKlxyXG4gICAgICogZW1pdHRlci5maXJlKDQpO1xyXG4gICAgICogLy8gNFxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGJ1ZmZlcihldmVudCwgbmV4dFRpY2sgPSBmYWxzZSwgX2J1ZmZlciA9IFtdKSB7XHJcbiAgICAgICAgbGV0IGJ1ZmZlciA9IF9idWZmZXIuc2xpY2UoKTtcclxuICAgICAgICBsZXQgbGlzdGVuZXIgPSBldmVudChlID0+IHtcclxuICAgICAgICAgICAgaWYgKGJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgYnVmZmVyLnB1c2goZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlbWl0dGVyLmZpcmUoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCBmbHVzaCA9ICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKGJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgYnVmZmVyLmZvckVhY2goZSA9PiBlbWl0dGVyLmZpcmUoZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJ1ZmZlciA9IG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBlbWl0dGVyID0gbmV3IEVtaXR0ZXIoe1xyXG4gICAgICAgICAgICBvbkZpcnN0TGlzdGVuZXJBZGQoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWxpc3RlbmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIgPSBldmVudChlID0+IGVtaXR0ZXIuZmlyZShlKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uRmlyc3RMaXN0ZW5lckRpZEFkZCgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChidWZmZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFRpY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmbHVzaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbHVzaCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25MYXN0TGlzdGVuZXJSZW1vdmUoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lci5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsaXN0ZW5lciA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gZW1pdHRlci5ldmVudDtcclxuICAgIH1cclxuICAgIEV2ZW50LmJ1ZmZlciA9IGJ1ZmZlcjtcclxuICAgIGNsYXNzIENoYWluYWJsZUV2ZW50IHtcclxuICAgICAgICBjb25zdHJ1Y3RvcihldmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50ID0gZXZlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1hcChmbikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENoYWluYWJsZUV2ZW50KG1hcCh0aGlzLmV2ZW50LCBmbikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3JFYWNoKGZuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ2hhaW5hYmxlRXZlbnQoZm9yRWFjaCh0aGlzLmV2ZW50LCBmbikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaWx0ZXIoZm4pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDaGFpbmFibGVFdmVudChmaWx0ZXIodGhpcy5ldmVudCwgZm4pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVkdWNlKG1lcmdlLCBpbml0aWFsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ2hhaW5hYmxlRXZlbnQocmVkdWNlKHRoaXMuZXZlbnQsIG1lcmdlLCBpbml0aWFsKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxhdGNoKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENoYWluYWJsZUV2ZW50KGxhdGNoKHRoaXMuZXZlbnQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVib3VuY2UobWVyZ2UsIGRlbGF5ID0gMTAwLCBsZWFkaW5nID0gZmFsc2UsIGxlYWtXYXJuaW5nVGhyZXNob2xkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ2hhaW5hYmxlRXZlbnQoZGVib3VuY2UodGhpcy5ldmVudCwgbWVyZ2UsIGRlbGF5LCBsZWFkaW5nLCBsZWFrV2FybmluZ1RocmVzaG9sZCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvbihsaXN0ZW5lciwgdGhpc0FyZ3MsIGRpc3Bvc2FibGVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV2ZW50KGxpc3RlbmVyLCB0aGlzQXJncywgZGlzcG9zYWJsZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvbmNlKGxpc3RlbmVyLCB0aGlzQXJncywgZGlzcG9zYWJsZXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9uY2UodGhpcy5ldmVudCkobGlzdGVuZXIsIHRoaXNBcmdzLCBkaXNwb3NhYmxlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gY2hhaW4oZXZlbnQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IENoYWluYWJsZUV2ZW50KGV2ZW50KTtcclxuICAgIH1cclxuICAgIEV2ZW50LmNoYWluID0gY2hhaW47XHJcbiAgICBmdW5jdGlvbiBmcm9tTm9kZUV2ZW50RW1pdHRlcihlbWl0dGVyLCBldmVudE5hbWUsIG1hcCA9IGlkID0+IGlkKSB7XHJcbiAgICAgICAgY29uc3QgZm4gPSAoLi4uYXJncykgPT4gcmVzdWx0LmZpcmUobWFwKC4uLmFyZ3MpKTtcclxuICAgICAgICBjb25zdCBvbkZpcnN0TGlzdGVuZXJBZGQgPSAoKSA9PiBlbWl0dGVyLm9uKGV2ZW50TmFtZSwgZm4pO1xyXG4gICAgICAgIGNvbnN0IG9uTGFzdExpc3RlbmVyUmVtb3ZlID0gKCkgPT4gZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihldmVudE5hbWUsIGZuKTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgRW1pdHRlcih7IG9uRmlyc3RMaXN0ZW5lckFkZCwgb25MYXN0TGlzdGVuZXJSZW1vdmUgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5ldmVudDtcclxuICAgIH1cclxuICAgIEV2ZW50LmZyb21Ob2RlRXZlbnRFbWl0dGVyID0gZnJvbU5vZGVFdmVudEVtaXR0ZXI7XHJcbiAgICBmdW5jdGlvbiBmcm9tRE9NRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGV2ZW50TmFtZSwgbWFwID0gaWQgPT4gaWQpIHtcclxuICAgICAgICBjb25zdCBmbiA9ICguLi5hcmdzKSA9PiByZXN1bHQuZmlyZShtYXAoLi4uYXJncykpO1xyXG4gICAgICAgIGNvbnN0IG9uRmlyc3RMaXN0ZW5lckFkZCA9ICgpID0+IGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGZuKTtcclxuICAgICAgICBjb25zdCBvbkxhc3RMaXN0ZW5lclJlbW92ZSA9ICgpID0+IGVtaXR0ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGZuKTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgRW1pdHRlcih7IG9uRmlyc3RMaXN0ZW5lckFkZCwgb25MYXN0TGlzdGVuZXJSZW1vdmUgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5ldmVudDtcclxuICAgIH1cclxuICAgIEV2ZW50LmZyb21ET01FdmVudEVtaXR0ZXIgPSBmcm9tRE9NRXZlbnRFbWl0dGVyO1xyXG4gICAgZnVuY3Rpb24gZnJvbVByb21pc2UocHJvbWlzZSkge1xyXG4gICAgICAgIGNvbnN0IGVtaXR0ZXIgPSBuZXcgRW1pdHRlcigpO1xyXG4gICAgICAgIGxldCBzaG91bGRFbWl0ID0gZmFsc2U7XHJcbiAgICAgICAgcHJvbWlzZVxyXG4gICAgICAgICAgICAudGhlbih1bmRlZmluZWQsICgpID0+IG51bGwpXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFzaG91bGRFbWl0KSB7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGVtaXR0ZXIuZmlyZSh1bmRlZmluZWQpLCAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVtaXR0ZXIuZmlyZSh1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgc2hvdWxkRW1pdCA9IHRydWU7XHJcbiAgICAgICAgcmV0dXJuIGVtaXR0ZXIuZXZlbnQ7XHJcbiAgICB9XHJcbiAgICBFdmVudC5mcm9tUHJvbWlzZSA9IGZyb21Qcm9taXNlO1xyXG4gICAgZnVuY3Rpb24gdG9Qcm9taXNlKGV2ZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gb25jZShldmVudCkocmVzb2x2ZSkpO1xyXG4gICAgfVxyXG4gICAgRXZlbnQudG9Qcm9taXNlID0gdG9Qcm9taXNlO1xyXG59KShFdmVudCB8fCAoRXZlbnQgPSB7fSkpO1xyXG5jbGFzcyBFdmVudFByb2ZpbGluZyB7XHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lKSB7XHJcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJDb3VudCA9IDA7XHJcbiAgICAgICAgdGhpcy5faW52b2NhdGlvbkNvdW50ID0gMDtcclxuICAgICAgICB0aGlzLl9lbGFwc2VkT3ZlcmFsbCA9IDA7XHJcbiAgICAgICAgdGhpcy5fbmFtZSA9IGAke25hbWV9XyR7RXZlbnRQcm9maWxpbmcuX2lkUG9vbCsrfWA7XHJcbiAgICB9XHJcbiAgICBzdGFydChsaXN0ZW5lckNvdW50KSB7XHJcbiAgICAgICAgdGhpcy5fc3RvcFdhdGNoID0gbmV3IFN0b3BXYXRjaCh0cnVlKTtcclxuICAgICAgICB0aGlzLl9saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcclxuICAgIH1cclxuICAgIHN0b3AoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3N0b3BXYXRjaCkge1xyXG4gICAgICAgICAgICBjb25zdCBlbGFwc2VkID0gdGhpcy5fc3RvcFdhdGNoLmVsYXBzZWQoKTtcclxuICAgICAgICAgICAgdGhpcy5fZWxhcHNlZE92ZXJhbGwgKz0gZWxhcHNlZDtcclxuICAgICAgICAgICAgdGhpcy5faW52b2NhdGlvbkNvdW50ICs9IDE7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhgZGlkIEZJUkUgJHt0aGlzLl9uYW1lfTogZWxhcHNlZF9tczogJHtlbGFwc2VkLnRvRml4ZWQoNSl9LCBsaXN0ZW5lcjogJHt0aGlzLl9saXN0ZW5lckNvdW50fSAoZWxhcHNlZF9vdmVyYWxsOiAke3RoaXMuX2VsYXBzZWRPdmVyYWxsLnRvRml4ZWQoMil9LCBpbnZvY2F0aW9uczogJHt0aGlzLl9pbnZvY2F0aW9uQ291bnR9KWApO1xyXG4gICAgICAgICAgICB0aGlzLl9zdG9wV2F0Y2ggPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbkV2ZW50UHJvZmlsaW5nLl9pZFBvb2wgPSAwO1xyXG5sZXQgX2dsb2JhbExlYWtXYXJuaW5nVGhyZXNob2xkID0gLTE7XHJcbmNsYXNzIExlYWthZ2VNb25pdG9yIHtcclxuICAgIGNvbnN0cnVjdG9yKGN1c3RvbVRocmVzaG9sZCwgbmFtZSA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMTgpLnNsaWNlKDIsIDUpKSB7XHJcbiAgICAgICAgdGhpcy5jdXN0b21UaHJlc2hvbGQgPSBjdXN0b21UaHJlc2hvbGQ7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLl93YXJuQ291bnRkb3duID0gMDtcclxuICAgIH1cclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3N0YWNrcykge1xyXG4gICAgICAgICAgICB0aGlzLl9zdGFja3MuY2xlYXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjaGVjayhsaXN0ZW5lckNvdW50KSB7XHJcbiAgICAgICAgbGV0IHRocmVzaG9sZCA9IF9nbG9iYWxMZWFrV2FybmluZ1RocmVzaG9sZDtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuY3VzdG9tVGhyZXNob2xkID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICB0aHJlc2hvbGQgPSB0aGlzLmN1c3RvbVRocmVzaG9sZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRocmVzaG9sZCA8PSAwIHx8IGxpc3RlbmVyQ291bnQgPCB0aHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLl9zdGFja3MpIHtcclxuICAgICAgICAgICAgdGhpcy5fc3RhY2tzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrLnNwbGl0KCdcXG4nKS5zbGljZSgzKS5qb2luKCdcXG4nKTtcclxuICAgICAgICBjb25zdCBjb3VudCA9ICh0aGlzLl9zdGFja3MuZ2V0KHN0YWNrKSB8fCAwKTtcclxuICAgICAgICB0aGlzLl9zdGFja3Muc2V0KHN0YWNrLCBjb3VudCArIDEpO1xyXG4gICAgICAgIHRoaXMuX3dhcm5Db3VudGRvd24gLT0gMTtcclxuICAgICAgICBpZiAodGhpcy5fd2FybkNvdW50ZG93biA8PSAwKSB7XHJcbiAgICAgICAgICAgIC8vIG9ubHkgd2FybiBvbiBmaXJzdCBleGNlZWQgYW5kIHRoZW4gZXZlcnkgdGltZSB0aGUgbGltaXRcclxuICAgICAgICAgICAgLy8gaXMgZXhjZWVkZWQgYnkgNTAlIGFnYWluXHJcbiAgICAgICAgICAgIHRoaXMuX3dhcm5Db3VudGRvd24gPSB0aHJlc2hvbGQgKiAwLjU7XHJcbiAgICAgICAgICAgIC8vIGZpbmQgbW9zdCBmcmVxdWVudCBsaXN0ZW5lciBhbmQgcHJpbnQgd2FybmluZ1xyXG4gICAgICAgICAgICBsZXQgdG9wU3RhY2s7XHJcbiAgICAgICAgICAgIGxldCB0b3BDb3VudCA9IDA7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgW3N0YWNrLCBjb3VudF0gb2YgdGhpcy5fc3RhY2tzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRvcFN0YWNrIHx8IHRvcENvdW50IDwgY291bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b3BTdGFjayA9IHN0YWNrO1xyXG4gICAgICAgICAgICAgICAgICAgIHRvcENvdW50ID0gY291bnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBbJHt0aGlzLm5hbWV9XSBwb3RlbnRpYWwgbGlzdGVuZXIgTEVBSyBkZXRlY3RlZCwgaGF2aW5nICR7bGlzdGVuZXJDb3VudH0gbGlzdGVuZXJzIGFscmVhZHkuIE1PU1QgZnJlcXVlbnQgbGlzdGVuZXIgKCR7dG9wQ291bnR9KTpgKTtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKHRvcFN0YWNrKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY291bnQgPSAodGhpcy5fc3RhY2tzLmdldChzdGFjaykgfHwgMCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0YWNrcy5zZXQoc3RhY2ssIGNvdW50IC0gMSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogVGhlIEVtaXR0ZXIgY2FuIGJlIHVzZWQgdG8gZXhwb3NlIGFuIEV2ZW50IHRvIHRoZSBwdWJsaWNcclxuICogdG8gZmlyZSBpdCBmcm9tIHRoZSBpbnNpZGVzLlxyXG4gKiBTYW1wbGU6XHJcbiAgICBjbGFzcyBEb2N1bWVudCB7XHJcblxyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX29uRGlkQ2hhbmdlID0gbmV3IEVtaXR0ZXI8KHZhbHVlOnN0cmluZyk9PmFueT4oKTtcclxuXHJcbiAgICAgICAgcHVibGljIG9uRGlkQ2hhbmdlID0gdGhpcy5fb25EaWRDaGFuZ2UuZXZlbnQ7XHJcblxyXG4gICAgICAgIC8vIGdldHRlci1zdHlsZVxyXG4gICAgICAgIC8vIGdldCBvbkRpZENoYW5nZSgpOiBFdmVudDwodmFsdWU6c3RyaW5nKT0+YW55PiB7XHJcbiAgICAgICAgLy8gXHRyZXR1cm4gdGhpcy5fb25EaWRDaGFuZ2UuZXZlbnQ7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICBwcml2YXRlIF9kb0l0KCkge1xyXG4gICAgICAgICAgICAvLy4uLlxyXG4gICAgICAgICAgICB0aGlzLl9vbkRpZENoYW5nZS5maXJlKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRW1pdHRlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIHRoaXMuX2Rpc3Bvc2VkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICAgICAgdGhpcy5fbGVha2FnZU1vbiA9IF9nbG9iYWxMZWFrV2FybmluZ1RocmVzaG9sZCA+IDAgPyBuZXcgTGVha2FnZU1vbml0b3IodGhpcy5fb3B0aW9ucyAmJiB0aGlzLl9vcHRpb25zLmxlYWtXYXJuaW5nVGhyZXNob2xkKSA6IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLl9wZXJmTW9uID0gKChfYSA9IHRoaXMuX29wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5fcHJvZk5hbWUpID8gbmV3IEV2ZW50UHJvZmlsaW5nKHRoaXMuX29wdGlvbnMuX3Byb2ZOYW1lKSA6IHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRm9yIHRoZSBwdWJsaWMgdG8gYWxsb3cgdG8gc3Vic2NyaWJlXHJcbiAgICAgKiB0byBldmVudHMgZnJvbSB0aGlzIEVtaXR0ZXJcclxuICAgICAqL1xyXG4gICAgZ2V0IGV2ZW50KCkge1xyXG4gICAgICAgIGlmICghdGhpcy5fZXZlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5fZXZlbnQgPSAobGlzdGVuZXIsIHRoaXNBcmdzLCBkaXNwb3NhYmxlcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSBuZXcgTGlua2VkTGlzdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgZmlyc3RMaXN0ZW5lciA9IHRoaXMuX2xpc3RlbmVycy5pc0VtcHR5KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZmlyc3RMaXN0ZW5lciAmJiB0aGlzLl9vcHRpb25zICYmIHRoaXMuX29wdGlvbnMub25GaXJzdExpc3RlbmVyQWRkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5vbkZpcnN0TGlzdGVuZXJBZGQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZW1vdmUgPSB0aGlzLl9saXN0ZW5lcnMucHVzaCghdGhpc0FyZ3MgPyBsaXN0ZW5lciA6IFtsaXN0ZW5lciwgdGhpc0FyZ3NdKTtcclxuICAgICAgICAgICAgICAgIGlmIChmaXJzdExpc3RlbmVyICYmIHRoaXMuX29wdGlvbnMgJiYgdGhpcy5fb3B0aW9ucy5vbkZpcnN0TGlzdGVuZXJEaWRBZGQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLm9uRmlyc3RMaXN0ZW5lckRpZEFkZCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zICYmIHRoaXMuX29wdGlvbnMub25MaXN0ZW5lckRpZEFkZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMub25MaXN0ZW5lckRpZEFkZCh0aGlzLCBsaXN0ZW5lciwgdGhpc0FyZ3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgYW5kIHJlY29yZCB0aGlzIGVtaXR0ZXIgZm9yIHBvdGVudGlhbCBsZWFrYWdlXHJcbiAgICAgICAgICAgICAgICBjb25zdCByZW1vdmVNb25pdG9yID0gKF9hID0gdGhpcy5fbGVha2FnZU1vbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNoZWNrKHRoaXMuX2xpc3RlbmVycy5zaXplKTtcclxuICAgICAgICAgICAgICAgIGxldCByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVtb3ZlTW9uaXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlTW9uaXRvcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5kaXNwb3NlID0gRW1pdHRlci5fbm9vcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9kaXNwb3NlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucyAmJiB0aGlzLl9vcHRpb25zLm9uTGFzdExpc3RlbmVyUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFzTGlzdGVuZXJzID0gKHRoaXMuX2xpc3RlbmVycyAmJiAhdGhpcy5fbGlzdGVuZXJzLmlzRW1wdHkoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNMaXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5vbkxhc3RMaXN0ZW5lclJlbW92ZSh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgaWYgKGRpc3Bvc2FibGVzIGluc3RhbmNlb2YgRGlzcG9zYWJsZVN0b3JlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcG9zYWJsZXMuYWRkKHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRpc3Bvc2FibGVzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3Bvc2FibGVzLnB1c2gocmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVG8gYmUga2VwdCBwcml2YXRlIHRvIGZpcmUgYW4gZXZlbnQgdG9cclxuICAgICAqIHN1YnNjcmliZXJzXHJcbiAgICAgKi9cclxuICAgIGZpcmUoZXZlbnQpIHtcclxuICAgICAgICB2YXIgX2EsIF9iO1xyXG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgLy8gcHV0IGFsbCBbbGlzdGVuZXIsZXZlbnRdLXBhaXJzIGludG8gZGVsaXZlcnkgcXVldWVcclxuICAgICAgICAgICAgLy8gdGhlbiBlbWl0IGFsbCBldmVudC4gYW4gaW5uZXIvbmVzdGVkIGV2ZW50IG1pZ2h0IGJlXHJcbiAgICAgICAgICAgIC8vIHRoZSBkcml2ZXIgb2YgdGhpc1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2RlbGl2ZXJ5UXVldWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RlbGl2ZXJ5UXVldWUgPSBuZXcgTGlua2VkTGlzdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IGxpc3RlbmVyIG9mIHRoaXMuX2xpc3RlbmVycykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVsaXZlcnlRdWV1ZS5wdXNoKFtsaXN0ZW5lciwgZXZlbnRdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBzdGFydC9zdG9wIHBlcmZvcm1hbmNlIGluc2lnaHQgY29sbGVjdGlvblxyXG4gICAgICAgICAgICAoX2EgPSB0aGlzLl9wZXJmTW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3RhcnQodGhpcy5fZGVsaXZlcnlRdWV1ZS5zaXplKTtcclxuICAgICAgICAgICAgd2hpbGUgKHRoaXMuX2RlbGl2ZXJ5UXVldWUuc2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IFtsaXN0ZW5lciwgZXZlbnRdID0gdGhpcy5fZGVsaXZlcnlRdWV1ZS5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmNhbGwodW5kZWZpbmVkLCBldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lclswXS5jYWxsKGxpc3RlbmVyWzFdLCBldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBvblVuZXhwZWN0ZWRFcnJvcihlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAoX2IgPSB0aGlzLl9wZXJmTW9uKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuc3RvcCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcclxuICAgICAgICBpZiAoIXRoaXMuX2Rpc3Bvc2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Rpc3Bvc2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgKF9hID0gdGhpcy5fbGlzdGVuZXJzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2xlYXIoKTtcclxuICAgICAgICAgICAgKF9iID0gdGhpcy5fZGVsaXZlcnlRdWV1ZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIChfZCA9IChfYyA9IHRoaXMuX29wdGlvbnMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5vbkxhc3RMaXN0ZW5lclJlbW92ZSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmNhbGwoX2MpO1xyXG4gICAgICAgICAgICAoX2UgPSB0aGlzLl9sZWFrYWdlTW9uKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UuZGlzcG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5FbWl0dGVyLl9ub29wID0gZnVuY3Rpb24gKCkgeyB9O1xyXG5leHBvcnQgY2xhc3MgUGF1c2VhYmxlRW1pdHRlciBleHRlbmRzIEVtaXR0ZXIge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuX2lzUGF1c2VkID0gMDtcclxuICAgICAgICB0aGlzLl9ldmVudFF1ZXVlID0gbmV3IExpbmtlZExpc3QoKTtcclxuICAgICAgICB0aGlzLl9tZXJnZUZuID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm1lcmdlO1xyXG4gICAgfVxyXG4gICAgcGF1c2UoKSB7XHJcbiAgICAgICAgdGhpcy5faXNQYXVzZWQrKztcclxuICAgIH1cclxuICAgIHJlc3VtZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5faXNQYXVzZWQgIT09IDAgJiYgLS10aGlzLl9pc1BhdXNlZCA9PT0gMCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbWVyZ2VGbikge1xyXG4gICAgICAgICAgICAgICAgLy8gdXNlIHRoZSBtZXJnZSBmdW5jdGlvbiB0byBjcmVhdGUgYSBzaW5nbGUgY29tcG9zaXRlXHJcbiAgICAgICAgICAgICAgICAvLyBldmVudC4gbWFrZSBhIGNvcHkgaW4gY2FzZSBmaXJpbmcgcGF1c2VzIHRoaXMgZW1pdHRlclxyXG4gICAgICAgICAgICAgICAgY29uc3QgZXZlbnRzID0gQXJyYXkuZnJvbSh0aGlzLl9ldmVudFF1ZXVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50UXVldWUuY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgIHN1cGVyLmZpcmUodGhpcy5fbWVyZ2VGbihldmVudHMpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIG5vIG1lcmdpbmcsIGZpcmUgZWFjaCBldmVudCBpbmRpdmlkdWFsbHkgYW5kIHRlc3RcclxuICAgICAgICAgICAgICAgIC8vIHRoYXQgdGhpcyBlbWl0dGVyIGlzbid0IHBhdXNlZCBoYWxmd2F5IHRocm91Z2hcclxuICAgICAgICAgICAgICAgIHdoaWxlICghdGhpcy5faXNQYXVzZWQgJiYgdGhpcy5fZXZlbnRRdWV1ZS5zaXplICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VwZXIuZmlyZSh0aGlzLl9ldmVudFF1ZXVlLnNoaWZ0KCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZmlyZShldmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2lzUGF1c2VkICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudFF1ZXVlLnB1c2goZXZlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIuZmlyZShldmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFRoZSBFdmVudEJ1ZmZlcmVyIGlzIHVzZWZ1bCBpbiBzaXR1YXRpb25zIGluIHdoaWNoIHlvdSB3YW50XHJcbiAqIHRvIGRlbGF5IGZpcmluZyB5b3VyIGV2ZW50cyBkdXJpbmcgc29tZSBjb2RlLlxyXG4gKiBZb3UgY2FuIHdyYXAgdGhhdCBjb2RlIGFuZCBiZSBzdXJlIHRoYXQgdGhlIGV2ZW50IHdpbGwgbm90XHJcbiAqIGJlIGZpcmVkIGR1cmluZyB0aGF0IHdyYXAuXHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBjb25zdCBlbWl0dGVyOiBFbWl0dGVyO1xyXG4gKiBjb25zdCBkZWxheWVyID0gbmV3IEV2ZW50RGVsYXllcigpO1xyXG4gKiBjb25zdCBkZWxheWVkRXZlbnQgPSBkZWxheWVyLndyYXBFdmVudChlbWl0dGVyLmV2ZW50KTtcclxuICpcclxuICogZGVsYXllZEV2ZW50KGNvbnNvbGUubG9nKTtcclxuICpcclxuICogZGVsYXllci5idWZmZXJFdmVudHMoKCkgPT4ge1xyXG4gKiAgIGVtaXR0ZXIuZmlyZSgpOyAvLyBldmVudCB3aWxsIG5vdCBiZSBmaXJlZCB5ZXRcclxuICogfSk7XHJcbiAqXHJcbiAqIC8vIGV2ZW50IHdpbGwgb25seSBiZSBmaXJlZCBhdCB0aGlzIHBvaW50XHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEV2ZW50QnVmZmVyZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5idWZmZXJzID0gW107XHJcbiAgICB9XHJcbiAgICB3cmFwRXZlbnQoZXZlbnQpIHtcclxuICAgICAgICByZXR1cm4gKGxpc3RlbmVyLCB0aGlzQXJncywgZGlzcG9zYWJsZXMpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGV2ZW50KGkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYnVmZmVyID0gdGhpcy5idWZmZXJzW3RoaXMuYnVmZmVycy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgIGlmIChidWZmZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBidWZmZXIucHVzaCgoKSA9PiBsaXN0ZW5lci5jYWxsKHRoaXNBcmdzLCBpKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lci5jYWxsKHRoaXNBcmdzLCBpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgdW5kZWZpbmVkLCBkaXNwb3NhYmxlcyk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGJ1ZmZlckV2ZW50cyhmbikge1xyXG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IFtdO1xyXG4gICAgICAgIHRoaXMuYnVmZmVycy5wdXNoKGJ1ZmZlcik7XHJcbiAgICAgICAgY29uc3QgciA9IGZuKCk7XHJcbiAgICAgICAgdGhpcy5idWZmZXJzLnBvcCgpO1xyXG4gICAgICAgIGJ1ZmZlci5mb3JFYWNoKGZsdXNoID0+IGZsdXNoKCkpO1xyXG4gICAgICAgIHJldHVybiByO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBIFJlbGF5IGlzIGFuIGV2ZW50IGZvcndhcmRlciB3aGljaCBmdW5jdGlvbnMgYXMgYSByZXBsdWdhYmJsZSBldmVudCBwaXBlLlxyXG4gKiBPbmNlIGNyZWF0ZWQsIHlvdSBjYW4gY29ubmVjdCBhbiBpbnB1dCBldmVudCB0byBpdCBhbmQgaXQgd2lsbCBzaW1wbHkgZm9yd2FyZFxyXG4gKiBldmVudHMgZnJvbSB0aGF0IGlucHV0IGV2ZW50IHRocm91Z2ggaXRzIG93biBgZXZlbnRgIHByb3BlcnR5LiBUaGUgYGlucHV0YFxyXG4gKiBjYW4gYmUgY2hhbmdlZCBhdCBhbnkgcG9pbnQgaW4gdGltZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBSZWxheSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmxpc3RlbmluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaW5wdXRFdmVudCA9IEV2ZW50Lk5vbmU7XHJcbiAgICAgICAgdGhpcy5pbnB1dEV2ZW50TGlzdGVuZXIgPSBEaXNwb3NhYmxlLk5vbmU7XHJcbiAgICAgICAgdGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXIoe1xyXG4gICAgICAgICAgICBvbkZpcnN0TGlzdGVuZXJEaWRBZGQ6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRFdmVudExpc3RlbmVyID0gdGhpcy5pbnB1dEV2ZW50KHRoaXMuZW1pdHRlci5maXJlLCB0aGlzLmVtaXR0ZXIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbkxhc3RMaXN0ZW5lclJlbW92ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5pbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRFdmVudExpc3RlbmVyLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZXZlbnQgPSB0aGlzLmVtaXR0ZXIuZXZlbnQ7XHJcbiAgICB9XHJcbiAgICBzZXQgaW5wdXQoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLmlucHV0RXZlbnQgPSBldmVudDtcclxuICAgICAgICBpZiAodGhpcy5saXN0ZW5pbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5pbnB1dEV2ZW50TGlzdGVuZXIuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmlucHV0RXZlbnRMaXN0ZW5lciA9IGV2ZW50KHRoaXMuZW1pdHRlci5maXJlLCB0aGlzLmVtaXR0ZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5pbnB1dEV2ZW50TGlzdGVuZXIuZGlzcG9zZSgpO1xyXG4gICAgICAgIHRoaXMuZW1pdHRlci5kaXNwb3NlKCk7XHJcbiAgICB9XHJcbn1cclxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbmltcG9ydCB7IEVtaXR0ZXIsIEV2ZW50IH0gZnJvbSAnLi9ldmVudC5qcyc7XHJcbmNvbnN0IHNob3J0Y3V0RXZlbnQgPSBPYmplY3QuZnJlZXplKGZ1bmN0aW9uIChjYWxsYmFjaywgY29udGV4dCkge1xyXG4gICAgY29uc3QgaGFuZGxlID0gc2V0VGltZW91dChjYWxsYmFjay5iaW5kKGNvbnRleHQpLCAwKTtcclxuICAgIHJldHVybiB7IGRpc3Bvc2UoKSB7IGNsZWFyVGltZW91dChoYW5kbGUpOyB9IH07XHJcbn0pO1xyXG5leHBvcnQgdmFyIENhbmNlbGxhdGlvblRva2VuO1xyXG4oZnVuY3Rpb24gKENhbmNlbGxhdGlvblRva2VuKSB7XHJcbiAgICBmdW5jdGlvbiBpc0NhbmNlbGxhdGlvblRva2VuKHRoaW5nKSB7XHJcbiAgICAgICAgaWYgKHRoaW5nID09PSBDYW5jZWxsYXRpb25Ub2tlbi5Ob25lIHx8IHRoaW5nID09PSBDYW5jZWxsYXRpb25Ub2tlbi5DYW5jZWxsZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGluZyBpbnN0YW5jZW9mIE11dGFibGVUb2tlbikge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGluZyB8fCB0eXBlb2YgdGhpbmcgIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGluZy5pc0NhbmNlbGxhdGlvblJlcXVlc3RlZCA9PT0gJ2Jvb2xlYW4nXHJcbiAgICAgICAgICAgICYmIHR5cGVvZiB0aGluZy5vbkNhbmNlbGxhdGlvblJlcXVlc3RlZCA9PT0gJ2Z1bmN0aW9uJztcclxuICAgIH1cclxuICAgIENhbmNlbGxhdGlvblRva2VuLmlzQ2FuY2VsbGF0aW9uVG9rZW4gPSBpc0NhbmNlbGxhdGlvblRva2VuO1xyXG4gICAgQ2FuY2VsbGF0aW9uVG9rZW4uTm9uZSA9IE9iamVjdC5mcmVlemUoe1xyXG4gICAgICAgIGlzQ2FuY2VsbGF0aW9uUmVxdWVzdGVkOiBmYWxzZSxcclxuICAgICAgICBvbkNhbmNlbGxhdGlvblJlcXVlc3RlZDogRXZlbnQuTm9uZVxyXG4gICAgfSk7XHJcbiAgICBDYW5jZWxsYXRpb25Ub2tlbi5DYW5jZWxsZWQgPSBPYmplY3QuZnJlZXplKHtcclxuICAgICAgICBpc0NhbmNlbGxhdGlvblJlcXVlc3RlZDogdHJ1ZSxcclxuICAgICAgICBvbkNhbmNlbGxhdGlvblJlcXVlc3RlZDogc2hvcnRjdXRFdmVudFxyXG4gICAgfSk7XHJcbn0pKENhbmNlbGxhdGlvblRva2VuIHx8IChDYW5jZWxsYXRpb25Ub2tlbiA9IHt9KSk7XHJcbmNsYXNzIE11dGFibGVUb2tlbiB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLl9pc0NhbmNlbGxlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2VtaXR0ZXIgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgY2FuY2VsKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5faXNDYW5jZWxsZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5faXNDYW5jZWxsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZW1pdHRlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdHRlci5maXJlKHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldCBpc0NhbmNlbGxhdGlvblJlcXVlc3RlZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faXNDYW5jZWxsZWQ7XHJcbiAgICB9XHJcbiAgICBnZXQgb25DYW5jZWxsYXRpb25SZXF1ZXN0ZWQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzQ2FuY2VsbGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzaG9ydGN1dEV2ZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuX2VtaXR0ZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5fZW1pdHRlciA9IG5ldyBFbWl0dGVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbWl0dGVyLmV2ZW50O1xyXG4gICAgfVxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5fZW1pdHRlcikge1xyXG4gICAgICAgICAgICB0aGlzLl9lbWl0dGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5fZW1pdHRlciA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQpIHtcclxuICAgICAgICB0aGlzLl90b2tlbiA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLl9wYXJlbnRMaXN0ZW5lciA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLl9wYXJlbnRMaXN0ZW5lciA9IHBhcmVudCAmJiBwYXJlbnQub25DYW5jZWxsYXRpb25SZXF1ZXN0ZWQodGhpcy5jYW5jZWwsIHRoaXMpO1xyXG4gICAgfVxyXG4gICAgZ2V0IHRva2VuKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5fdG9rZW4pIHtcclxuICAgICAgICAgICAgLy8gYmUgbGF6eSBhbmQgY3JlYXRlIHRoZSB0b2tlbiBvbmx5IHdoZW5cclxuICAgICAgICAgICAgLy8gYWN0dWFsbHkgbmVlZGVkXHJcbiAgICAgICAgICAgIHRoaXMuX3Rva2VuID0gbmV3IE11dGFibGVUb2tlbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fdG9rZW47XHJcbiAgICB9XHJcbiAgICBjYW5jZWwoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl90b2tlbikge1xyXG4gICAgICAgICAgICAvLyBzYXZlIGFuIG9iamVjdCBieSByZXR1cm5pbmcgdGhlIGRlZmF1bHRcclxuICAgICAgICAgICAgLy8gY2FuY2VsbGVkIHRva2VuIHdoZW4gY2FuY2VsbGF0aW9uIGhhcHBlbnNcclxuICAgICAgICAgICAgLy8gYmVmb3JlIHNvbWVvbmUgYXNrcyBmb3IgdGhlIHRva2VuXHJcbiAgICAgICAgICAgIHRoaXMuX3Rva2VuID0gQ2FuY2VsbGF0aW9uVG9rZW4uQ2FuY2VsbGVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLl90b2tlbiBpbnN0YW5jZW9mIE11dGFibGVUb2tlbikge1xyXG4gICAgICAgICAgICAvLyBhY3R1YWxseSBjYW5jZWxcclxuICAgICAgICAgICAgdGhpcy5fdG9rZW4uY2FuY2VsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZGlzcG9zZShjYW5jZWwgPSBmYWxzZSkge1xyXG4gICAgICAgIGlmIChjYW5jZWwpIHtcclxuICAgICAgICAgICAgdGhpcy5jYW5jZWwoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX3BhcmVudExpc3RlbmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudExpc3RlbmVyLmRpc3Bvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLl90b2tlbikge1xyXG4gICAgICAgICAgICAvLyBlbnN1cmUgdG8gaW5pdGlhbGl6ZSB3aXRoIGFuIGVtcHR5IHRva2VuIGlmIHdlIGhhZCBub25lXHJcbiAgICAgICAgICAgIHRoaXMuX3Rva2VuID0gQ2FuY2VsbGF0aW9uVG9rZW4uTm9uZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5fdG9rZW4gaW5zdGFuY2VvZiBNdXRhYmxlVG9rZW4pIHtcclxuICAgICAgICAgICAgLy8gYWN0dWFsbHkgZGlzcG9zZVxyXG4gICAgICAgICAgICB0aGlzLl90b2tlbi5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5pbXBvcnQgeyBpbGxlZ2FsQXJndW1lbnQgfSBmcm9tICcuL2Vycm9ycy5qcyc7XHJcbmNsYXNzIEtleUNvZGVTdHJNYXAge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5fa2V5Q29kZVRvU3RyID0gW107XHJcbiAgICAgICAgdGhpcy5fc3RyVG9LZXlDb2RlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIH1cclxuICAgIGRlZmluZShrZXlDb2RlLCBzdHIpIHtcclxuICAgICAgICB0aGlzLl9rZXlDb2RlVG9TdHJba2V5Q29kZV0gPSBzdHI7XHJcbiAgICAgICAgdGhpcy5fc3RyVG9LZXlDb2RlW3N0ci50b0xvd2VyQ2FzZSgpXSA9IGtleUNvZGU7XHJcbiAgICB9XHJcbiAgICBrZXlDb2RlVG9TdHIoa2V5Q29kZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9rZXlDb2RlVG9TdHJba2V5Q29kZV07XHJcbiAgICB9XHJcbiAgICBzdHJUb0tleUNvZGUoc3RyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0clRvS2V5Q29kZVtzdHIudG9Mb3dlckNhc2UoKV0gfHwgMCAvKiBVbmtub3duICovO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IHVpTWFwID0gbmV3IEtleUNvZGVTdHJNYXAoKTtcclxuY29uc3QgdXNlclNldHRpbmdzVVNNYXAgPSBuZXcgS2V5Q29kZVN0ck1hcCgpO1xyXG5jb25zdCB1c2VyU2V0dGluZ3NHZW5lcmFsTWFwID0gbmV3IEtleUNvZGVTdHJNYXAoKTtcclxuKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIGRlZmluZShrZXlDb2RlLCB1aUxhYmVsLCB1c1VzZXJTZXR0aW5nc0xhYmVsID0gdWlMYWJlbCwgZ2VuZXJhbFVzZXJTZXR0aW5nc0xhYmVsID0gdXNVc2VyU2V0dGluZ3NMYWJlbCkge1xyXG4gICAgICAgIHVpTWFwLmRlZmluZShrZXlDb2RlLCB1aUxhYmVsKTtcclxuICAgICAgICB1c2VyU2V0dGluZ3NVU01hcC5kZWZpbmUoa2V5Q29kZSwgdXNVc2VyU2V0dGluZ3NMYWJlbCk7XHJcbiAgICAgICAgdXNlclNldHRpbmdzR2VuZXJhbE1hcC5kZWZpbmUoa2V5Q29kZSwgZ2VuZXJhbFVzZXJTZXR0aW5nc0xhYmVsKTtcclxuICAgIH1cclxuICAgIGRlZmluZSgwIC8qIFVua25vd24gKi8sICd1bmtub3duJyk7XHJcbiAgICBkZWZpbmUoMSAvKiBCYWNrc3BhY2UgKi8sICdCYWNrc3BhY2UnKTtcclxuICAgIGRlZmluZSgyIC8qIFRhYiAqLywgJ1RhYicpO1xyXG4gICAgZGVmaW5lKDMgLyogRW50ZXIgKi8sICdFbnRlcicpO1xyXG4gICAgZGVmaW5lKDQgLyogU2hpZnQgKi8sICdTaGlmdCcpO1xyXG4gICAgZGVmaW5lKDUgLyogQ3RybCAqLywgJ0N0cmwnKTtcclxuICAgIGRlZmluZSg2IC8qIEFsdCAqLywgJ0FsdCcpO1xyXG4gICAgZGVmaW5lKDcgLyogUGF1c2VCcmVhayAqLywgJ1BhdXNlQnJlYWsnKTtcclxuICAgIGRlZmluZSg4IC8qIENhcHNMb2NrICovLCAnQ2Fwc0xvY2snKTtcclxuICAgIGRlZmluZSg5IC8qIEVzY2FwZSAqLywgJ0VzY2FwZScpO1xyXG4gICAgZGVmaW5lKDEwIC8qIFNwYWNlICovLCAnU3BhY2UnKTtcclxuICAgIGRlZmluZSgxMSAvKiBQYWdlVXAgKi8sICdQYWdlVXAnKTtcclxuICAgIGRlZmluZSgxMiAvKiBQYWdlRG93biAqLywgJ1BhZ2VEb3duJyk7XHJcbiAgICBkZWZpbmUoMTMgLyogRW5kICovLCAnRW5kJyk7XHJcbiAgICBkZWZpbmUoMTQgLyogSG9tZSAqLywgJ0hvbWUnKTtcclxuICAgIGRlZmluZSgxNSAvKiBMZWZ0QXJyb3cgKi8sICdMZWZ0QXJyb3cnLCAnTGVmdCcpO1xyXG4gICAgZGVmaW5lKDE2IC8qIFVwQXJyb3cgKi8sICdVcEFycm93JywgJ1VwJyk7XHJcbiAgICBkZWZpbmUoMTcgLyogUmlnaHRBcnJvdyAqLywgJ1JpZ2h0QXJyb3cnLCAnUmlnaHQnKTtcclxuICAgIGRlZmluZSgxOCAvKiBEb3duQXJyb3cgKi8sICdEb3duQXJyb3cnLCAnRG93bicpO1xyXG4gICAgZGVmaW5lKDE5IC8qIEluc2VydCAqLywgJ0luc2VydCcpO1xyXG4gICAgZGVmaW5lKDIwIC8qIERlbGV0ZSAqLywgJ0RlbGV0ZScpO1xyXG4gICAgZGVmaW5lKDIxIC8qIEtFWV8wICovLCAnMCcpO1xyXG4gICAgZGVmaW5lKDIyIC8qIEtFWV8xICovLCAnMScpO1xyXG4gICAgZGVmaW5lKDIzIC8qIEtFWV8yICovLCAnMicpO1xyXG4gICAgZGVmaW5lKDI0IC8qIEtFWV8zICovLCAnMycpO1xyXG4gICAgZGVmaW5lKDI1IC8qIEtFWV80ICovLCAnNCcpO1xyXG4gICAgZGVmaW5lKDI2IC8qIEtFWV81ICovLCAnNScpO1xyXG4gICAgZGVmaW5lKDI3IC8qIEtFWV82ICovLCAnNicpO1xyXG4gICAgZGVmaW5lKDI4IC8qIEtFWV83ICovLCAnNycpO1xyXG4gICAgZGVmaW5lKDI5IC8qIEtFWV84ICovLCAnOCcpO1xyXG4gICAgZGVmaW5lKDMwIC8qIEtFWV85ICovLCAnOScpO1xyXG4gICAgZGVmaW5lKDMxIC8qIEtFWV9BICovLCAnQScpO1xyXG4gICAgZGVmaW5lKDMyIC8qIEtFWV9CICovLCAnQicpO1xyXG4gICAgZGVmaW5lKDMzIC8qIEtFWV9DICovLCAnQycpO1xyXG4gICAgZGVmaW5lKDM0IC8qIEtFWV9EICovLCAnRCcpO1xyXG4gICAgZGVmaW5lKDM1IC8qIEtFWV9FICovLCAnRScpO1xyXG4gICAgZGVmaW5lKDM2IC8qIEtFWV9GICovLCAnRicpO1xyXG4gICAgZGVmaW5lKDM3IC8qIEtFWV9HICovLCAnRycpO1xyXG4gICAgZGVmaW5lKDM4IC8qIEtFWV9IICovLCAnSCcpO1xyXG4gICAgZGVmaW5lKDM5IC8qIEtFWV9JICovLCAnSScpO1xyXG4gICAgZGVmaW5lKDQwIC8qIEtFWV9KICovLCAnSicpO1xyXG4gICAgZGVmaW5lKDQxIC8qIEtFWV9LICovLCAnSycpO1xyXG4gICAgZGVmaW5lKDQyIC8qIEtFWV9MICovLCAnTCcpO1xyXG4gICAgZGVmaW5lKDQzIC8qIEtFWV9NICovLCAnTScpO1xyXG4gICAgZGVmaW5lKDQ0IC8qIEtFWV9OICovLCAnTicpO1xyXG4gICAgZGVmaW5lKDQ1IC8qIEtFWV9PICovLCAnTycpO1xyXG4gICAgZGVmaW5lKDQ2IC8qIEtFWV9QICovLCAnUCcpO1xyXG4gICAgZGVmaW5lKDQ3IC8qIEtFWV9RICovLCAnUScpO1xyXG4gICAgZGVmaW5lKDQ4IC8qIEtFWV9SICovLCAnUicpO1xyXG4gICAgZGVmaW5lKDQ5IC8qIEtFWV9TICovLCAnUycpO1xyXG4gICAgZGVmaW5lKDUwIC8qIEtFWV9UICovLCAnVCcpO1xyXG4gICAgZGVmaW5lKDUxIC8qIEtFWV9VICovLCAnVScpO1xyXG4gICAgZGVmaW5lKDUyIC8qIEtFWV9WICovLCAnVicpO1xyXG4gICAgZGVmaW5lKDUzIC8qIEtFWV9XICovLCAnVycpO1xyXG4gICAgZGVmaW5lKDU0IC8qIEtFWV9YICovLCAnWCcpO1xyXG4gICAgZGVmaW5lKDU1IC8qIEtFWV9ZICovLCAnWScpO1xyXG4gICAgZGVmaW5lKDU2IC8qIEtFWV9aICovLCAnWicpO1xyXG4gICAgZGVmaW5lKDU3IC8qIE1ldGEgKi8sICdNZXRhJyk7XHJcbiAgICBkZWZpbmUoNTggLyogQ29udGV4dE1lbnUgKi8sICdDb250ZXh0TWVudScpO1xyXG4gICAgZGVmaW5lKDU5IC8qIEYxICovLCAnRjEnKTtcclxuICAgIGRlZmluZSg2MCAvKiBGMiAqLywgJ0YyJyk7XHJcbiAgICBkZWZpbmUoNjEgLyogRjMgKi8sICdGMycpO1xyXG4gICAgZGVmaW5lKDYyIC8qIEY0ICovLCAnRjQnKTtcclxuICAgIGRlZmluZSg2MyAvKiBGNSAqLywgJ0Y1Jyk7XHJcbiAgICBkZWZpbmUoNjQgLyogRjYgKi8sICdGNicpO1xyXG4gICAgZGVmaW5lKDY1IC8qIEY3ICovLCAnRjcnKTtcclxuICAgIGRlZmluZSg2NiAvKiBGOCAqLywgJ0Y4Jyk7XHJcbiAgICBkZWZpbmUoNjcgLyogRjkgKi8sICdGOScpO1xyXG4gICAgZGVmaW5lKDY4IC8qIEYxMCAqLywgJ0YxMCcpO1xyXG4gICAgZGVmaW5lKDY5IC8qIEYxMSAqLywgJ0YxMScpO1xyXG4gICAgZGVmaW5lKDcwIC8qIEYxMiAqLywgJ0YxMicpO1xyXG4gICAgZGVmaW5lKDcxIC8qIEYxMyAqLywgJ0YxMycpO1xyXG4gICAgZGVmaW5lKDcyIC8qIEYxNCAqLywgJ0YxNCcpO1xyXG4gICAgZGVmaW5lKDczIC8qIEYxNSAqLywgJ0YxNScpO1xyXG4gICAgZGVmaW5lKDc0IC8qIEYxNiAqLywgJ0YxNicpO1xyXG4gICAgZGVmaW5lKDc1IC8qIEYxNyAqLywgJ0YxNycpO1xyXG4gICAgZGVmaW5lKDc2IC8qIEYxOCAqLywgJ0YxOCcpO1xyXG4gICAgZGVmaW5lKDc3IC8qIEYxOSAqLywgJ0YxOScpO1xyXG4gICAgZGVmaW5lKDc4IC8qIE51bUxvY2sgKi8sICdOdW1Mb2NrJyk7XHJcbiAgICBkZWZpbmUoNzkgLyogU2Nyb2xsTG9jayAqLywgJ1Njcm9sbExvY2snKTtcclxuICAgIGRlZmluZSg4MCAvKiBVU19TRU1JQ09MT04gKi8sICc7JywgJzsnLCAnT0VNXzEnKTtcclxuICAgIGRlZmluZSg4MSAvKiBVU19FUVVBTCAqLywgJz0nLCAnPScsICdPRU1fUExVUycpO1xyXG4gICAgZGVmaW5lKDgyIC8qIFVTX0NPTU1BICovLCAnLCcsICcsJywgJ09FTV9DT01NQScpO1xyXG4gICAgZGVmaW5lKDgzIC8qIFVTX01JTlVTICovLCAnLScsICctJywgJ09FTV9NSU5VUycpO1xyXG4gICAgZGVmaW5lKDg0IC8qIFVTX0RPVCAqLywgJy4nLCAnLicsICdPRU1fUEVSSU9EJyk7XHJcbiAgICBkZWZpbmUoODUgLyogVVNfU0xBU0ggKi8sICcvJywgJy8nLCAnT0VNXzInKTtcclxuICAgIGRlZmluZSg4NiAvKiBVU19CQUNLVElDSyAqLywgJ2AnLCAnYCcsICdPRU1fMycpO1xyXG4gICAgZGVmaW5lKDExMCAvKiBBQk5UX0MxICovLCAnQUJOVF9DMScpO1xyXG4gICAgZGVmaW5lKDExMSAvKiBBQk5UX0MyICovLCAnQUJOVF9DMicpO1xyXG4gICAgZGVmaW5lKDg3IC8qIFVTX09QRU5fU1FVQVJFX0JSQUNLRVQgKi8sICdbJywgJ1snLCAnT0VNXzQnKTtcclxuICAgIGRlZmluZSg4OCAvKiBVU19CQUNLU0xBU0ggKi8sICdcXFxcJywgJ1xcXFwnLCAnT0VNXzUnKTtcclxuICAgIGRlZmluZSg4OSAvKiBVU19DTE9TRV9TUVVBUkVfQlJBQ0tFVCAqLywgJ10nLCAnXScsICdPRU1fNicpO1xyXG4gICAgZGVmaW5lKDkwIC8qIFVTX1FVT1RFICovLCAnXFwnJywgJ1xcJycsICdPRU1fNycpO1xyXG4gICAgZGVmaW5lKDkxIC8qIE9FTV84ICovLCAnT0VNXzgnKTtcclxuICAgIGRlZmluZSg5MiAvKiBPRU1fMTAyICovLCAnT0VNXzEwMicpO1xyXG4gICAgZGVmaW5lKDkzIC8qIE5VTVBBRF8wICovLCAnTnVtUGFkMCcpO1xyXG4gICAgZGVmaW5lKDk0IC8qIE5VTVBBRF8xICovLCAnTnVtUGFkMScpO1xyXG4gICAgZGVmaW5lKDk1IC8qIE5VTVBBRF8yICovLCAnTnVtUGFkMicpO1xyXG4gICAgZGVmaW5lKDk2IC8qIE5VTVBBRF8zICovLCAnTnVtUGFkMycpO1xyXG4gICAgZGVmaW5lKDk3IC8qIE5VTVBBRF80ICovLCAnTnVtUGFkNCcpO1xyXG4gICAgZGVmaW5lKDk4IC8qIE5VTVBBRF81ICovLCAnTnVtUGFkNScpO1xyXG4gICAgZGVmaW5lKDk5IC8qIE5VTVBBRF82ICovLCAnTnVtUGFkNicpO1xyXG4gICAgZGVmaW5lKDEwMCAvKiBOVU1QQURfNyAqLywgJ051bVBhZDcnKTtcclxuICAgIGRlZmluZSgxMDEgLyogTlVNUEFEXzggKi8sICdOdW1QYWQ4Jyk7XHJcbiAgICBkZWZpbmUoMTAyIC8qIE5VTVBBRF85ICovLCAnTnVtUGFkOScpO1xyXG4gICAgZGVmaW5lKDEwMyAvKiBOVU1QQURfTVVMVElQTFkgKi8sICdOdW1QYWRfTXVsdGlwbHknKTtcclxuICAgIGRlZmluZSgxMDQgLyogTlVNUEFEX0FERCAqLywgJ051bVBhZF9BZGQnKTtcclxuICAgIGRlZmluZSgxMDUgLyogTlVNUEFEX1NFUEFSQVRPUiAqLywgJ051bVBhZF9TZXBhcmF0b3InKTtcclxuICAgIGRlZmluZSgxMDYgLyogTlVNUEFEX1NVQlRSQUNUICovLCAnTnVtUGFkX1N1YnRyYWN0Jyk7XHJcbiAgICBkZWZpbmUoMTA3IC8qIE5VTVBBRF9ERUNJTUFMICovLCAnTnVtUGFkX0RlY2ltYWwnKTtcclxuICAgIGRlZmluZSgxMDggLyogTlVNUEFEX0RJVklERSAqLywgJ051bVBhZF9EaXZpZGUnKTtcclxufSkoKTtcclxuZXhwb3J0IHZhciBLZXlDb2RlVXRpbHM7XHJcbihmdW5jdGlvbiAoS2V5Q29kZVV0aWxzKSB7XHJcbiAgICBmdW5jdGlvbiB0b1N0cmluZyhrZXlDb2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIHVpTWFwLmtleUNvZGVUb1N0cihrZXlDb2RlKTtcclxuICAgIH1cclxuICAgIEtleUNvZGVVdGlscy50b1N0cmluZyA9IHRvU3RyaW5nO1xyXG4gICAgZnVuY3Rpb24gZnJvbVN0cmluZyhrZXkpIHtcclxuICAgICAgICByZXR1cm4gdWlNYXAuc3RyVG9LZXlDb2RlKGtleSk7XHJcbiAgICB9XHJcbiAgICBLZXlDb2RlVXRpbHMuZnJvbVN0cmluZyA9IGZyb21TdHJpbmc7XHJcbiAgICBmdW5jdGlvbiB0b1VzZXJTZXR0aW5nc1VTKGtleUNvZGUpIHtcclxuICAgICAgICByZXR1cm4gdXNlclNldHRpbmdzVVNNYXAua2V5Q29kZVRvU3RyKGtleUNvZGUpO1xyXG4gICAgfVxyXG4gICAgS2V5Q29kZVV0aWxzLnRvVXNlclNldHRpbmdzVVMgPSB0b1VzZXJTZXR0aW5nc1VTO1xyXG4gICAgZnVuY3Rpb24gdG9Vc2VyU2V0dGluZ3NHZW5lcmFsKGtleUNvZGUpIHtcclxuICAgICAgICByZXR1cm4gdXNlclNldHRpbmdzR2VuZXJhbE1hcC5rZXlDb2RlVG9TdHIoa2V5Q29kZSk7XHJcbiAgICB9XHJcbiAgICBLZXlDb2RlVXRpbHMudG9Vc2VyU2V0dGluZ3NHZW5lcmFsID0gdG9Vc2VyU2V0dGluZ3NHZW5lcmFsO1xyXG4gICAgZnVuY3Rpb24gZnJvbVVzZXJTZXR0aW5ncyhrZXkpIHtcclxuICAgICAgICByZXR1cm4gdXNlclNldHRpbmdzVVNNYXAuc3RyVG9LZXlDb2RlKGtleSkgfHwgdXNlclNldHRpbmdzR2VuZXJhbE1hcC5zdHJUb0tleUNvZGUoa2V5KTtcclxuICAgIH1cclxuICAgIEtleUNvZGVVdGlscy5mcm9tVXNlclNldHRpbmdzID0gZnJvbVVzZXJTZXR0aW5ncztcclxufSkoS2V5Q29kZVV0aWxzIHx8IChLZXlDb2RlVXRpbHMgPSB7fSkpO1xyXG5leHBvcnQgZnVuY3Rpb24gS2V5Q2hvcmQoZmlyc3RQYXJ0LCBzZWNvbmRQYXJ0KSB7XHJcbiAgICBjb25zdCBjaG9yZFBhcnQgPSAoKHNlY29uZFBhcnQgJiAweDAwMDBGRkZGKSA8PCAxNikgPj4+IDA7XHJcbiAgICByZXR1cm4gKGZpcnN0UGFydCB8IGNob3JkUGFydCkgPj4+IDA7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUtleWJpbmRpbmcoa2V5YmluZGluZywgT1MpIHtcclxuICAgIGlmIChrZXliaW5kaW5nID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBjb25zdCBmaXJzdFBhcnQgPSAoa2V5YmluZGluZyAmIDB4MDAwMEZGRkYpID4+PiAwO1xyXG4gICAgY29uc3QgY2hvcmRQYXJ0ID0gKGtleWJpbmRpbmcgJiAweEZGRkYwMDAwKSA+Pj4gMTY7XHJcbiAgICBpZiAoY2hvcmRQYXJ0ICE9PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDaG9yZEtleWJpbmRpbmcoW1xyXG4gICAgICAgICAgICBjcmVhdGVTaW1wbGVLZXliaW5kaW5nKGZpcnN0UGFydCwgT1MpLFxyXG4gICAgICAgICAgICBjcmVhdGVTaW1wbGVLZXliaW5kaW5nKGNob3JkUGFydCwgT1MpXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IENob3JkS2V5YmluZGluZyhbY3JlYXRlU2ltcGxlS2V5YmluZGluZyhmaXJzdFBhcnQsIE9TKV0pO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTaW1wbGVLZXliaW5kaW5nKGtleWJpbmRpbmcsIE9TKSB7XHJcbiAgICBjb25zdCBjdHJsQ21kID0gKGtleWJpbmRpbmcgJiAyMDQ4IC8qIEN0cmxDbWQgKi8gPyB0cnVlIDogZmFsc2UpO1xyXG4gICAgY29uc3Qgd2luQ3RybCA9IChrZXliaW5kaW5nICYgMjU2IC8qIFdpbkN0cmwgKi8gPyB0cnVlIDogZmFsc2UpO1xyXG4gICAgY29uc3QgY3RybEtleSA9IChPUyA9PT0gMiAvKiBNYWNpbnRvc2ggKi8gPyB3aW5DdHJsIDogY3RybENtZCk7XHJcbiAgICBjb25zdCBzaGlmdEtleSA9IChrZXliaW5kaW5nICYgMTAyNCAvKiBTaGlmdCAqLyA/IHRydWUgOiBmYWxzZSk7XHJcbiAgICBjb25zdCBhbHRLZXkgPSAoa2V5YmluZGluZyAmIDUxMiAvKiBBbHQgKi8gPyB0cnVlIDogZmFsc2UpO1xyXG4gICAgY29uc3QgbWV0YUtleSA9IChPUyA9PT0gMiAvKiBNYWNpbnRvc2ggKi8gPyBjdHJsQ21kIDogd2luQ3RybCk7XHJcbiAgICBjb25zdCBrZXlDb2RlID0gKGtleWJpbmRpbmcgJiAyNTUgLyogS2V5Q29kZSAqLyk7XHJcbiAgICByZXR1cm4gbmV3IFNpbXBsZUtleWJpbmRpbmcoY3RybEtleSwgc2hpZnRLZXksIGFsdEtleSwgbWV0YUtleSwga2V5Q29kZSk7XHJcbn1cclxuZXhwb3J0IGNsYXNzIFNpbXBsZUtleWJpbmRpbmcge1xyXG4gICAgY29uc3RydWN0b3IoY3RybEtleSwgc2hpZnRLZXksIGFsdEtleSwgbWV0YUtleSwga2V5Q29kZSkge1xyXG4gICAgICAgIHRoaXMuY3RybEtleSA9IGN0cmxLZXk7XHJcbiAgICAgICAgdGhpcy5zaGlmdEtleSA9IHNoaWZ0S2V5O1xyXG4gICAgICAgIHRoaXMuYWx0S2V5ID0gYWx0S2V5O1xyXG4gICAgICAgIHRoaXMubWV0YUtleSA9IG1ldGFLZXk7XHJcbiAgICAgICAgdGhpcy5rZXlDb2RlID0ga2V5Q29kZTtcclxuICAgIH1cclxuICAgIGVxdWFscyhvdGhlcikge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5jdHJsS2V5ID09PSBvdGhlci5jdHJsS2V5XHJcbiAgICAgICAgICAgICYmIHRoaXMuc2hpZnRLZXkgPT09IG90aGVyLnNoaWZ0S2V5XHJcbiAgICAgICAgICAgICYmIHRoaXMuYWx0S2V5ID09PSBvdGhlci5hbHRLZXlcclxuICAgICAgICAgICAgJiYgdGhpcy5tZXRhS2V5ID09PSBvdGhlci5tZXRhS2V5XHJcbiAgICAgICAgICAgICYmIHRoaXMua2V5Q29kZSA9PT0gb3RoZXIua2V5Q29kZSk7XHJcbiAgICB9XHJcbiAgICBpc01vZGlmaWVyS2V5KCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5rZXlDb2RlID09PSAwIC8qIFVua25vd24gKi9cclxuICAgICAgICAgICAgfHwgdGhpcy5rZXlDb2RlID09PSA1IC8qIEN0cmwgKi9cclxuICAgICAgICAgICAgfHwgdGhpcy5rZXlDb2RlID09PSA1NyAvKiBNZXRhICovXHJcbiAgICAgICAgICAgIHx8IHRoaXMua2V5Q29kZSA9PT0gNiAvKiBBbHQgKi9cclxuICAgICAgICAgICAgfHwgdGhpcy5rZXlDb2RlID09PSA0IC8qIFNoaWZ0ICovKTtcclxuICAgIH1cclxuICAgIHRvQ2hvcmQoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDaG9yZEtleWJpbmRpbmcoW3RoaXNdKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRG9lcyB0aGlzIGtleWJpbmRpbmcgcmVmZXIgdG8gdGhlIGtleSBjb2RlIG9mIGEgbW9kaWZpZXIgYW5kIGl0IGFsc28gaGFzIHRoZSBtb2RpZmllciBmbGFnP1xyXG4gICAgICovXHJcbiAgICBpc0R1cGxpY2F0ZU1vZGlmaWVyQ2FzZSgpIHtcclxuICAgICAgICByZXR1cm4gKCh0aGlzLmN0cmxLZXkgJiYgdGhpcy5rZXlDb2RlID09PSA1IC8qIEN0cmwgKi8pXHJcbiAgICAgICAgICAgIHx8ICh0aGlzLnNoaWZ0S2V5ICYmIHRoaXMua2V5Q29kZSA9PT0gNCAvKiBTaGlmdCAqLylcclxuICAgICAgICAgICAgfHwgKHRoaXMuYWx0S2V5ICYmIHRoaXMua2V5Q29kZSA9PT0gNiAvKiBBbHQgKi8pXHJcbiAgICAgICAgICAgIHx8ICh0aGlzLm1ldGFLZXkgJiYgdGhpcy5rZXlDb2RlID09PSA1NyAvKiBNZXRhICovKSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIENob3JkS2V5YmluZGluZyB7XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJ0cykge1xyXG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbEFyZ3VtZW50KGBwYXJ0c2ApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBhcnRzID0gcGFydHM7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIFJlc29sdmVkS2V5YmluZGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoY3RybEtleSwgc2hpZnRLZXksIGFsdEtleSwgbWV0YUtleSwga2JMYWJlbCwga2JBcmlhTGFiZWwpIHtcclxuICAgICAgICB0aGlzLmN0cmxLZXkgPSBjdHJsS2V5O1xyXG4gICAgICAgIHRoaXMuc2hpZnRLZXkgPSBzaGlmdEtleTtcclxuICAgICAgICB0aGlzLmFsdEtleSA9IGFsdEtleTtcclxuICAgICAgICB0aGlzLm1ldGFLZXkgPSBtZXRhS2V5O1xyXG4gICAgICAgIHRoaXMua2V5TGFiZWwgPSBrYkxhYmVsO1xyXG4gICAgICAgIHRoaXMua2V5QXJpYUxhYmVsID0ga2JBcmlhTGFiZWw7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEEgcmVzb2x2ZWQga2V5YmluZGluZy4gQ2FuIGJlIGEgc2ltcGxlIGtleWJpbmRpbmcgb3IgYSBjaG9yZCBrZXliaW5kaW5nLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJlc29sdmVkS2V5YmluZGluZyB7XHJcbn1cclxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbi8vIFRISVMgSVMgQSBHRU5FUkFURUQgRklMRS4gRE8gTk9UIEVESVQgRElSRUNUTFkuXHJcbmV4cG9ydCB2YXIgQWNjZXNzaWJpbGl0eVN1cHBvcnQ7XHJcbihmdW5jdGlvbiAoQWNjZXNzaWJpbGl0eVN1cHBvcnQpIHtcclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBzaG91bGQgYmUgdGhlIGJyb3dzZXIgY2FzZSB3aGVyZSBpdCBpcyBub3Qga25vd24gaWYgYSBzY3JlZW4gcmVhZGVyIGlzIGF0dGFjaGVkIG9yIG5vLlxyXG4gICAgICovXHJcbiAgICBBY2Nlc3NpYmlsaXR5U3VwcG9ydFtBY2Nlc3NpYmlsaXR5U3VwcG9ydFtcIlVua25vd25cIl0gPSAwXSA9IFwiVW5rbm93blwiO1xyXG4gICAgQWNjZXNzaWJpbGl0eVN1cHBvcnRbQWNjZXNzaWJpbGl0eVN1cHBvcnRbXCJEaXNhYmxlZFwiXSA9IDFdID0gXCJEaXNhYmxlZFwiO1xyXG4gICAgQWNjZXNzaWJpbGl0eVN1cHBvcnRbQWNjZXNzaWJpbGl0eVN1cHBvcnRbXCJFbmFibGVkXCJdID0gMl0gPSBcIkVuYWJsZWRcIjtcclxufSkoQWNjZXNzaWJpbGl0eVN1cHBvcnQgfHwgKEFjY2Vzc2liaWxpdHlTdXBwb3J0ID0ge30pKTtcclxuZXhwb3J0IHZhciBDb21wbGV0aW9uSXRlbUluc2VydFRleHRSdWxlO1xyXG4oZnVuY3Rpb24gKENvbXBsZXRpb25JdGVtSW5zZXJ0VGV4dFJ1bGUpIHtcclxuICAgIC8qKlxyXG4gICAgICogQWRqdXN0IHdoaXRlc3BhY2UvaW5kZW50YXRpb24gb2YgbXVsdGlsaW5lIGluc2VydCB0ZXh0cyB0b1xyXG4gICAgICogbWF0Y2ggdGhlIGN1cnJlbnQgbGluZSBpbmRlbnRhdGlvbi5cclxuICAgICAqL1xyXG4gICAgQ29tcGxldGlvbkl0ZW1JbnNlcnRUZXh0UnVsZVtDb21wbGV0aW9uSXRlbUluc2VydFRleHRSdWxlW1wiS2VlcFdoaXRlc3BhY2VcIl0gPSAxXSA9IFwiS2VlcFdoaXRlc3BhY2VcIjtcclxuICAgIC8qKlxyXG4gICAgICogYGluc2VydFRleHRgIGlzIGEgc25pcHBldC5cclxuICAgICAqL1xyXG4gICAgQ29tcGxldGlvbkl0ZW1JbnNlcnRUZXh0UnVsZVtDb21wbGV0aW9uSXRlbUluc2VydFRleHRSdWxlW1wiSW5zZXJ0QXNTbmlwcGV0XCJdID0gNF0gPSBcIkluc2VydEFzU25pcHBldFwiO1xyXG59KShDb21wbGV0aW9uSXRlbUluc2VydFRleHRSdWxlIHx8IChDb21wbGV0aW9uSXRlbUluc2VydFRleHRSdWxlID0ge30pKTtcclxuZXhwb3J0IHZhciBDb21wbGV0aW9uSXRlbUtpbmQ7XHJcbihmdW5jdGlvbiAoQ29tcGxldGlvbkl0ZW1LaW5kKSB7XHJcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiTWV0aG9kXCJdID0gMF0gPSBcIk1ldGhvZFwiO1xyXG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIkZ1bmN0aW9uXCJdID0gMV0gPSBcIkZ1bmN0aW9uXCI7XHJcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiQ29uc3RydWN0b3JcIl0gPSAyXSA9IFwiQ29uc3RydWN0b3JcIjtcclxuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJGaWVsZFwiXSA9IDNdID0gXCJGaWVsZFwiO1xyXG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIlZhcmlhYmxlXCJdID0gNF0gPSBcIlZhcmlhYmxlXCI7XHJcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiQ2xhc3NcIl0gPSA1XSA9IFwiQ2xhc3NcIjtcclxuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJTdHJ1Y3RcIl0gPSA2XSA9IFwiU3RydWN0XCI7XHJcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiSW50ZXJmYWNlXCJdID0gN10gPSBcIkludGVyZmFjZVwiO1xyXG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIk1vZHVsZVwiXSA9IDhdID0gXCJNb2R1bGVcIjtcclxuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJQcm9wZXJ0eVwiXSA9IDldID0gXCJQcm9wZXJ0eVwiO1xyXG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIkV2ZW50XCJdID0gMTBdID0gXCJFdmVudFwiO1xyXG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIk9wZXJhdG9yXCJdID0gMTFdID0gXCJPcGVyYXRvclwiO1xyXG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIlVuaXRcIl0gPSAxMl0gPSBcIlVuaXRcIjtcclxuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJWYWx1ZVwiXSA9IDEzXSA9IFwiVmFsdWVcIjtcclxuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJDb25zdGFudFwiXSA9IDE0XSA9IFwiQ29uc3RhbnRcIjtcclxuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJFbnVtXCJdID0gMTVdID0gXCJFbnVtXCI7XHJcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiRW51bU1lbWJlclwiXSA9IDE2XSA9IFwiRW51bU1lbWJlclwiO1xyXG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIktleXdvcmRcIl0gPSAxN10gPSBcIktleXdvcmRcIjtcclxuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJUZXh0XCJdID0gMThdID0gXCJUZXh0XCI7XHJcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiQ29sb3JcIl0gPSAxOV0gPSBcIkNvbG9yXCI7XHJcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiRmlsZVwiXSA9IDIwXSA9IFwiRmlsZVwiO1xyXG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIlJlZmVyZW5jZVwiXSA9IDIxXSA9IFwiUmVmZXJlbmNlXCI7XHJcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiQ3VzdG9tY29sb3JcIl0gPSAyMl0gPSBcIkN1c3RvbWNvbG9yXCI7XHJcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiRm9sZGVyXCJdID0gMjNdID0gXCJGb2xkZXJcIjtcclxuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJUeXBlUGFyYW1ldGVyXCJdID0gMjRdID0gXCJUeXBlUGFyYW1ldGVyXCI7XHJcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiVXNlclwiXSA9IDI1XSA9IFwiVXNlclwiO1xyXG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIklzc3VlXCJdID0gMjZdID0gXCJJc3N1ZVwiO1xyXG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIlNuaXBwZXRcIl0gPSAyN10gPSBcIlNuaXBwZXRcIjtcclxufSkoQ29tcGxldGlvbkl0ZW1LaW5kIHx8IChDb21wbGV0aW9uSXRlbUtpbmQgPSB7fSkpO1xyXG5leHBvcnQgdmFyIENvbXBsZXRpb25JdGVtVGFnO1xyXG4oZnVuY3Rpb24gKENvbXBsZXRpb25JdGVtVGFnKSB7XHJcbiAgICBDb21wbGV0aW9uSXRlbVRhZ1tDb21wbGV0aW9uSXRlbVRhZ1tcIkRlcHJlY2F0ZWRcIl0gPSAxXSA9IFwiRGVwcmVjYXRlZFwiO1xyXG59KShDb21wbGV0aW9uSXRlbVRhZyB8fCAoQ29tcGxldGlvbkl0ZW1UYWcgPSB7fSkpO1xyXG4vKipcclxuICogSG93IGEgc3VnZ2VzdCBwcm92aWRlciB3YXMgdHJpZ2dlcmVkLlxyXG4gKi9cclxuZXhwb3J0IHZhciBDb21wbGV0aW9uVHJpZ2dlcktpbmQ7XHJcbihmdW5jdGlvbiAoQ29tcGxldGlvblRyaWdnZXJLaW5kKSB7XHJcbiAgICBDb21wbGV0aW9uVHJpZ2dlcktpbmRbQ29tcGxldGlvblRyaWdnZXJLaW5kW1wiSW52b2tlXCJdID0gMF0gPSBcIkludm9rZVwiO1xyXG4gICAgQ29tcGxldGlvblRyaWdnZXJLaW5kW0NvbXBsZXRpb25UcmlnZ2VyS2luZFtcIlRyaWdnZXJDaGFyYWN0ZXJcIl0gPSAxXSA9IFwiVHJpZ2dlckNoYXJhY3RlclwiO1xyXG4gICAgQ29tcGxldGlvblRyaWdnZXJLaW5kW0NvbXBsZXRpb25UcmlnZ2VyS2luZFtcIlRyaWdnZXJGb3JJbmNvbXBsZXRlQ29tcGxldGlvbnNcIl0gPSAyXSA9IFwiVHJpZ2dlckZvckluY29tcGxldGVDb21wbGV0aW9uc1wiO1xyXG59KShDb21wbGV0aW9uVHJpZ2dlcktpbmQgfHwgKENvbXBsZXRpb25UcmlnZ2VyS2luZCA9IHt9KSk7XHJcbi8qKlxyXG4gKiBBIHBvc2l0aW9uaW5nIHByZWZlcmVuY2UgZm9yIHJlbmRlcmluZyBjb250ZW50IHdpZGdldHMuXHJcbiAqL1xyXG5leHBvcnQgdmFyIENvbnRlbnRXaWRnZXRQb3NpdGlvblByZWZlcmVuY2U7XHJcbihmdW5jdGlvbiAoQ29udGVudFdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBQbGFjZSB0aGUgY29udGVudCB3aWRnZXQgZXhhY3RseSBhdCBhIHBvc2l0aW9uXHJcbiAgICAgKi9cclxuICAgIENvbnRlbnRXaWRnZXRQb3NpdGlvblByZWZlcmVuY2VbQ29udGVudFdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZVtcIkVYQUNUXCJdID0gMF0gPSBcIkVYQUNUXCI7XHJcbiAgICAvKipcclxuICAgICAqIFBsYWNlIHRoZSBjb250ZW50IHdpZGdldCBhYm92ZSBhIHBvc2l0aW9uXHJcbiAgICAgKi9cclxuICAgIENvbnRlbnRXaWRnZXRQb3NpdGlvblByZWZlcmVuY2VbQ29udGVudFdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZVtcIkFCT1ZFXCJdID0gMV0gPSBcIkFCT1ZFXCI7XHJcbiAgICAvKipcclxuICAgICAqIFBsYWNlIHRoZSBjb250ZW50IHdpZGdldCBiZWxvdyBhIHBvc2l0aW9uXHJcbiAgICAgKi9cclxuICAgIENvbnRlbnRXaWRnZXRQb3NpdGlvblByZWZlcmVuY2VbQ29udGVudFdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZVtcIkJFTE9XXCJdID0gMl0gPSBcIkJFTE9XXCI7XHJcbn0pKENvbnRlbnRXaWRnZXRQb3NpdGlvblByZWZlcmVuY2UgfHwgKENvbnRlbnRXaWRnZXRQb3NpdGlvblByZWZlcmVuY2UgPSB7fSkpO1xyXG4vKipcclxuICogRGVzY3JpYmVzIHRoZSByZWFzb24gdGhlIGN1cnNvciBoYXMgY2hhbmdlZCBpdHMgcG9zaXRpb24uXHJcbiAqL1xyXG5leHBvcnQgdmFyIEN1cnNvckNoYW5nZVJlYXNvbjtcclxuKGZ1bmN0aW9uIChDdXJzb3JDaGFuZ2VSZWFzb24pIHtcclxuICAgIC8qKlxyXG4gICAgICogVW5rbm93biBvciBub3Qgc2V0LlxyXG4gICAgICovXHJcbiAgICBDdXJzb3JDaGFuZ2VSZWFzb25bQ3Vyc29yQ2hhbmdlUmVhc29uW1wiTm90U2V0XCJdID0gMF0gPSBcIk5vdFNldFwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIGBtb2RlbC5zZXRWYWx1ZSgpYCB3YXMgY2FsbGVkLlxyXG4gICAgICovXHJcbiAgICBDdXJzb3JDaGFuZ2VSZWFzb25bQ3Vyc29yQ2hhbmdlUmVhc29uW1wiQ29udGVudEZsdXNoXCJdID0gMV0gPSBcIkNvbnRlbnRGbHVzaFwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgYG1vZGVsYCBoYXMgYmVlbiBjaGFuZ2VkIG91dHNpZGUgb2YgdGhpcyBjdXJzb3IgYW5kIHRoZSBjdXJzb3IgcmVjb3ZlcnMgaXRzIHBvc2l0aW9uIGZyb20gYXNzb2NpYXRlZCBtYXJrZXJzLlxyXG4gICAgICovXHJcbiAgICBDdXJzb3JDaGFuZ2VSZWFzb25bQ3Vyc29yQ2hhbmdlUmVhc29uW1wiUmVjb3ZlckZyb21NYXJrZXJzXCJdID0gMl0gPSBcIlJlY292ZXJGcm9tTWFya2Vyc1wiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGVyZSB3YXMgYW4gZXhwbGljaXQgdXNlciBnZXN0dXJlLlxyXG4gICAgICovXHJcbiAgICBDdXJzb3JDaGFuZ2VSZWFzb25bQ3Vyc29yQ2hhbmdlUmVhc29uW1wiRXhwbGljaXRcIl0gPSAzXSA9IFwiRXhwbGljaXRcIjtcclxuICAgIC8qKlxyXG4gICAgICogVGhlcmUgd2FzIGEgUGFzdGUuXHJcbiAgICAgKi9cclxuICAgIEN1cnNvckNoYW5nZVJlYXNvbltDdXJzb3JDaGFuZ2VSZWFzb25bXCJQYXN0ZVwiXSA9IDRdID0gXCJQYXN0ZVwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGVyZSB3YXMgYW4gVW5kby5cclxuICAgICAqL1xyXG4gICAgQ3Vyc29yQ2hhbmdlUmVhc29uW0N1cnNvckNoYW5nZVJlYXNvbltcIlVuZG9cIl0gPSA1XSA9IFwiVW5kb1wiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGVyZSB3YXMgYSBSZWRvLlxyXG4gICAgICovXHJcbiAgICBDdXJzb3JDaGFuZ2VSZWFzb25bQ3Vyc29yQ2hhbmdlUmVhc29uW1wiUmVkb1wiXSA9IDZdID0gXCJSZWRvXCI7XHJcbn0pKEN1cnNvckNoYW5nZVJlYXNvbiB8fCAoQ3Vyc29yQ2hhbmdlUmVhc29uID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBkZWZhdWx0IGVuZCBvZiBsaW5lIHRvIHVzZSB3aGVuIGluc3RhbnRpYXRpbmcgbW9kZWxzLlxyXG4gKi9cclxuZXhwb3J0IHZhciBEZWZhdWx0RW5kT2ZMaW5lO1xyXG4oZnVuY3Rpb24gKERlZmF1bHRFbmRPZkxpbmUpIHtcclxuICAgIC8qKlxyXG4gICAgICogVXNlIGxpbmUgZmVlZCAoXFxuKSBhcyB0aGUgZW5kIG9mIGxpbmUgY2hhcmFjdGVyLlxyXG4gICAgICovXHJcbiAgICBEZWZhdWx0RW5kT2ZMaW5lW0RlZmF1bHRFbmRPZkxpbmVbXCJMRlwiXSA9IDFdID0gXCJMRlwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBVc2UgY2FycmlhZ2UgcmV0dXJuIGFuZCBsaW5lIGZlZWQgKFxcclxcbikgYXMgdGhlIGVuZCBvZiBsaW5lIGNoYXJhY3Rlci5cclxuICAgICAqL1xyXG4gICAgRGVmYXVsdEVuZE9mTGluZVtEZWZhdWx0RW5kT2ZMaW5lW1wiQ1JMRlwiXSA9IDJdID0gXCJDUkxGXCI7XHJcbn0pKERlZmF1bHRFbmRPZkxpbmUgfHwgKERlZmF1bHRFbmRPZkxpbmUgPSB7fSkpO1xyXG4vKipcclxuICogQSBkb2N1bWVudCBoaWdobGlnaHQga2luZC5cclxuICovXHJcbmV4cG9ydCB2YXIgRG9jdW1lbnRIaWdobGlnaHRLaW5kO1xyXG4oZnVuY3Rpb24gKERvY3VtZW50SGlnaGxpZ2h0S2luZCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIHRleHR1YWwgb2NjdXJyZW5jZS5cclxuICAgICAqL1xyXG4gICAgRG9jdW1lbnRIaWdobGlnaHRLaW5kW0RvY3VtZW50SGlnaGxpZ2h0S2luZFtcIlRleHRcIl0gPSAwXSA9IFwiVGV4dFwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkLWFjY2VzcyBvZiBhIHN5bWJvbCwgbGlrZSByZWFkaW5nIGEgdmFyaWFibGUuXHJcbiAgICAgKi9cclxuICAgIERvY3VtZW50SGlnaGxpZ2h0S2luZFtEb2N1bWVudEhpZ2hsaWdodEtpbmRbXCJSZWFkXCJdID0gMV0gPSBcIlJlYWRcIjtcclxuICAgIC8qKlxyXG4gICAgICogV3JpdGUtYWNjZXNzIG9mIGEgc3ltYm9sLCBsaWtlIHdyaXRpbmcgdG8gYSB2YXJpYWJsZS5cclxuICAgICAqL1xyXG4gICAgRG9jdW1lbnRIaWdobGlnaHRLaW5kW0RvY3VtZW50SGlnaGxpZ2h0S2luZFtcIldyaXRlXCJdID0gMl0gPSBcIldyaXRlXCI7XHJcbn0pKERvY3VtZW50SGlnaGxpZ2h0S2luZCB8fCAoRG9jdW1lbnRIaWdobGlnaHRLaW5kID0ge30pKTtcclxuLyoqXHJcbiAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgYXV0byBpbmRlbnRhdGlvbiBpbiB0aGUgZWRpdG9yXHJcbiAqL1xyXG5leHBvcnQgdmFyIEVkaXRvckF1dG9JbmRlbnRTdHJhdGVneTtcclxuKGZ1bmN0aW9uIChFZGl0b3JBdXRvSW5kZW50U3RyYXRlZ3kpIHtcclxuICAgIEVkaXRvckF1dG9JbmRlbnRTdHJhdGVneVtFZGl0b3JBdXRvSW5kZW50U3RyYXRlZ3lbXCJOb25lXCJdID0gMF0gPSBcIk5vbmVcIjtcclxuICAgIEVkaXRvckF1dG9JbmRlbnRTdHJhdGVneVtFZGl0b3JBdXRvSW5kZW50U3RyYXRlZ3lbXCJLZWVwXCJdID0gMV0gPSBcIktlZXBcIjtcclxuICAgIEVkaXRvckF1dG9JbmRlbnRTdHJhdGVneVtFZGl0b3JBdXRvSW5kZW50U3RyYXRlZ3lbXCJCcmFja2V0c1wiXSA9IDJdID0gXCJCcmFja2V0c1wiO1xyXG4gICAgRWRpdG9yQXV0b0luZGVudFN0cmF0ZWd5W0VkaXRvckF1dG9JbmRlbnRTdHJhdGVneVtcIkFkdmFuY2VkXCJdID0gM10gPSBcIkFkdmFuY2VkXCI7XHJcbiAgICBFZGl0b3JBdXRvSW5kZW50U3RyYXRlZ3lbRWRpdG9yQXV0b0luZGVudFN0cmF0ZWd5W1wiRnVsbFwiXSA9IDRdID0gXCJGdWxsXCI7XHJcbn0pKEVkaXRvckF1dG9JbmRlbnRTdHJhdGVneSB8fCAoRWRpdG9yQXV0b0luZGVudFN0cmF0ZWd5ID0ge30pKTtcclxuZXhwb3J0IHZhciBFZGl0b3JPcHRpb247XHJcbihmdW5jdGlvbiAoRWRpdG9yT3B0aW9uKSB7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiYWNjZXB0U3VnZ2VzdGlvbk9uQ29tbWl0Q2hhcmFjdGVyXCJdID0gMF0gPSBcImFjY2VwdFN1Z2dlc3Rpb25PbkNvbW1pdENoYXJhY3RlclwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImFjY2VwdFN1Z2dlc3Rpb25PbkVudGVyXCJdID0gMV0gPSBcImFjY2VwdFN1Z2dlc3Rpb25PbkVudGVyXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiYWNjZXNzaWJpbGl0eVN1cHBvcnRcIl0gPSAyXSA9IFwiYWNjZXNzaWJpbGl0eVN1cHBvcnRcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJhY2Nlc3NpYmlsaXR5UGFnZVNpemVcIl0gPSAzXSA9IFwiYWNjZXNzaWJpbGl0eVBhZ2VTaXplXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiYXJpYUxhYmVsXCJdID0gNF0gPSBcImFyaWFMYWJlbFwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImF1dG9DbG9zaW5nQnJhY2tldHNcIl0gPSA1XSA9IFwiYXV0b0Nsb3NpbmdCcmFja2V0c1wiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImF1dG9DbG9zaW5nRGVsZXRlXCJdID0gNl0gPSBcImF1dG9DbG9zaW5nRGVsZXRlXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiYXV0b0Nsb3NpbmdPdmVydHlwZVwiXSA9IDddID0gXCJhdXRvQ2xvc2luZ092ZXJ0eXBlXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiYXV0b0Nsb3NpbmdRdW90ZXNcIl0gPSA4XSA9IFwiYXV0b0Nsb3NpbmdRdW90ZXNcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJhdXRvSW5kZW50XCJdID0gOV0gPSBcImF1dG9JbmRlbnRcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJhdXRvbWF0aWNMYXlvdXRcIl0gPSAxMF0gPSBcImF1dG9tYXRpY0xheW91dFwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImF1dG9TdXJyb3VuZFwiXSA9IDExXSA9IFwiYXV0b1N1cnJvdW5kXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiY29kZUxlbnNcIl0gPSAxMl0gPSBcImNvZGVMZW5zXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiY29kZUxlbnNGb250RmFtaWx5XCJdID0gMTNdID0gXCJjb2RlTGVuc0ZvbnRGYW1pbHlcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJjb2RlTGVuc0ZvbnRTaXplXCJdID0gMTRdID0gXCJjb2RlTGVuc0ZvbnRTaXplXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiY29sb3JEZWNvcmF0b3JzXCJdID0gMTVdID0gXCJjb2xvckRlY29yYXRvcnNcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJjb2x1bW5TZWxlY3Rpb25cIl0gPSAxNl0gPSBcImNvbHVtblNlbGVjdGlvblwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImNvbW1lbnRzXCJdID0gMTddID0gXCJjb21tZW50c1wiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImNvbnRleHRtZW51XCJdID0gMThdID0gXCJjb250ZXh0bWVudVwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImNvcHlXaXRoU3ludGF4SGlnaGxpZ2h0aW5nXCJdID0gMTldID0gXCJjb3B5V2l0aFN5bnRheEhpZ2hsaWdodGluZ1wiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImN1cnNvckJsaW5raW5nXCJdID0gMjBdID0gXCJjdXJzb3JCbGlua2luZ1wiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImN1cnNvclNtb290aENhcmV0QW5pbWF0aW9uXCJdID0gMjFdID0gXCJjdXJzb3JTbW9vdGhDYXJldEFuaW1hdGlvblwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImN1cnNvclN0eWxlXCJdID0gMjJdID0gXCJjdXJzb3JTdHlsZVwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImN1cnNvclN1cnJvdW5kaW5nTGluZXNcIl0gPSAyM10gPSBcImN1cnNvclN1cnJvdW5kaW5nTGluZXNcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJjdXJzb3JTdXJyb3VuZGluZ0xpbmVzU3R5bGVcIl0gPSAyNF0gPSBcImN1cnNvclN1cnJvdW5kaW5nTGluZXNTdHlsZVwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImN1cnNvcldpZHRoXCJdID0gMjVdID0gXCJjdXJzb3JXaWR0aFwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImRpc2FibGVMYXllckhpbnRpbmdcIl0gPSAyNl0gPSBcImRpc2FibGVMYXllckhpbnRpbmdcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJkaXNhYmxlTW9ub3NwYWNlT3B0aW1pemF0aW9uc1wiXSA9IDI3XSA9IFwiZGlzYWJsZU1vbm9zcGFjZU9wdGltaXphdGlvbnNcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJkb21SZWFkT25seVwiXSA9IDI4XSA9IFwiZG9tUmVhZE9ubHlcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJkcmFnQW5kRHJvcFwiXSA9IDI5XSA9IFwiZHJhZ0FuZERyb3BcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJlbXB0eVNlbGVjdGlvbkNsaXBib2FyZFwiXSA9IDMwXSA9IFwiZW1wdHlTZWxlY3Rpb25DbGlwYm9hcmRcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJleHRyYUVkaXRvckNsYXNzTmFtZVwiXSA9IDMxXSA9IFwiZXh0cmFFZGl0b3JDbGFzc05hbWVcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJmYXN0U2Nyb2xsU2Vuc2l0aXZpdHlcIl0gPSAzMl0gPSBcImZhc3RTY3JvbGxTZW5zaXRpdml0eVwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImZpbmRcIl0gPSAzM10gPSBcImZpbmRcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJmaXhlZE92ZXJmbG93V2lkZ2V0c1wiXSA9IDM0XSA9IFwiZml4ZWRPdmVyZmxvd1dpZGdldHNcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJmb2xkaW5nXCJdID0gMzVdID0gXCJmb2xkaW5nXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiZm9sZGluZ1N0cmF0ZWd5XCJdID0gMzZdID0gXCJmb2xkaW5nU3RyYXRlZ3lcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJmb2xkaW5nSGlnaGxpZ2h0XCJdID0gMzddID0gXCJmb2xkaW5nSGlnaGxpZ2h0XCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1widW5mb2xkT25DbGlja0FmdGVyRW5kT2ZMaW5lXCJdID0gMzhdID0gXCJ1bmZvbGRPbkNsaWNrQWZ0ZXJFbmRPZkxpbmVcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJmb250RmFtaWx5XCJdID0gMzldID0gXCJmb250RmFtaWx5XCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiZm9udEluZm9cIl0gPSA0MF0gPSBcImZvbnRJbmZvXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiZm9udExpZ2F0dXJlc1wiXSA9IDQxXSA9IFwiZm9udExpZ2F0dXJlc1wiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImZvbnRTaXplXCJdID0gNDJdID0gXCJmb250U2l6ZVwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImZvbnRXZWlnaHRcIl0gPSA0M10gPSBcImZvbnRXZWlnaHRcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJmb3JtYXRPblBhc3RlXCJdID0gNDRdID0gXCJmb3JtYXRPblBhc3RlXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiZm9ybWF0T25UeXBlXCJdID0gNDVdID0gXCJmb3JtYXRPblR5cGVcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJnbHlwaE1hcmdpblwiXSA9IDQ2XSA9IFwiZ2x5cGhNYXJnaW5cIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJnb3RvTG9jYXRpb25cIl0gPSA0N10gPSBcImdvdG9Mb2NhdGlvblwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImhpZGVDdXJzb3JJbk92ZXJ2aWV3UnVsZXJcIl0gPSA0OF0gPSBcImhpZGVDdXJzb3JJbk92ZXJ2aWV3UnVsZXJcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJoaWdobGlnaHRBY3RpdmVJbmRlbnRHdWlkZVwiXSA9IDQ5XSA9IFwiaGlnaGxpZ2h0QWN0aXZlSW5kZW50R3VpZGVcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJob3ZlclwiXSA9IDUwXSA9IFwiaG92ZXJcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJpbkRpZmZFZGl0b3JcIl0gPSA1MV0gPSBcImluRGlmZkVkaXRvclwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImlubGluZVN1Z2dlc3RcIl0gPSA1Ml0gPSBcImlubGluZVN1Z2dlc3RcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJsZXR0ZXJTcGFjaW5nXCJdID0gNTNdID0gXCJsZXR0ZXJTcGFjaW5nXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wibGlnaHRidWxiXCJdID0gNTRdID0gXCJsaWdodGJ1bGJcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJsaW5lRGVjb3JhdGlvbnNXaWR0aFwiXSA9IDU1XSA9IFwibGluZURlY29yYXRpb25zV2lkdGhcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJsaW5lSGVpZ2h0XCJdID0gNTZdID0gXCJsaW5lSGVpZ2h0XCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wibGluZU51bWJlcnNcIl0gPSA1N10gPSBcImxpbmVOdW1iZXJzXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wibGluZU51bWJlcnNNaW5DaGFyc1wiXSA9IDU4XSA9IFwibGluZU51bWJlcnNNaW5DaGFyc1wiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImxpbmtlZEVkaXRpbmdcIl0gPSA1OV0gPSBcImxpbmtlZEVkaXRpbmdcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJsaW5rc1wiXSA9IDYwXSA9IFwibGlua3NcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJtYXRjaEJyYWNrZXRzXCJdID0gNjFdID0gXCJtYXRjaEJyYWNrZXRzXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wibWluaW1hcFwiXSA9IDYyXSA9IFwibWluaW1hcFwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIm1vdXNlU3R5bGVcIl0gPSA2M10gPSBcIm1vdXNlU3R5bGVcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJtb3VzZVdoZWVsU2Nyb2xsU2Vuc2l0aXZpdHlcIl0gPSA2NF0gPSBcIm1vdXNlV2hlZWxTY3JvbGxTZW5zaXRpdml0eVwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIm1vdXNlV2hlZWxab29tXCJdID0gNjVdID0gXCJtb3VzZVdoZWVsWm9vbVwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIm11bHRpQ3Vyc29yTWVyZ2VPdmVybGFwcGluZ1wiXSA9IDY2XSA9IFwibXVsdGlDdXJzb3JNZXJnZU92ZXJsYXBwaW5nXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wibXVsdGlDdXJzb3JNb2RpZmllclwiXSA9IDY3XSA9IFwibXVsdGlDdXJzb3JNb2RpZmllclwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIm11bHRpQ3Vyc29yUGFzdGVcIl0gPSA2OF0gPSBcIm11bHRpQ3Vyc29yUGFzdGVcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJvY2N1cnJlbmNlc0hpZ2hsaWdodFwiXSA9IDY5XSA9IFwib2NjdXJyZW5jZXNIaWdobGlnaHRcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJvdmVydmlld1J1bGVyQm9yZGVyXCJdID0gNzBdID0gXCJvdmVydmlld1J1bGVyQm9yZGVyXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wib3ZlcnZpZXdSdWxlckxhbmVzXCJdID0gNzFdID0gXCJvdmVydmlld1J1bGVyTGFuZXNcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJwYWRkaW5nXCJdID0gNzJdID0gXCJwYWRkaW5nXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wicGFyYW1ldGVySGludHNcIl0gPSA3M10gPSBcInBhcmFtZXRlckhpbnRzXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wicGVla1dpZGdldERlZmF1bHRGb2N1c1wiXSA9IDc0XSA9IFwicGVla1dpZGdldERlZmF1bHRGb2N1c1wiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImRlZmluaXRpb25MaW5rT3BlbnNJblBlZWtcIl0gPSA3NV0gPSBcImRlZmluaXRpb25MaW5rT3BlbnNJblBlZWtcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJxdWlja1N1Z2dlc3Rpb25zXCJdID0gNzZdID0gXCJxdWlja1N1Z2dlc3Rpb25zXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wicXVpY2tTdWdnZXN0aW9uc0RlbGF5XCJdID0gNzddID0gXCJxdWlja1N1Z2dlc3Rpb25zRGVsYXlcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJyZWFkT25seVwiXSA9IDc4XSA9IFwicmVhZE9ubHlcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJyZW5hbWVPblR5cGVcIl0gPSA3OV0gPSBcInJlbmFtZU9uVHlwZVwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInJlbmRlckNvbnRyb2xDaGFyYWN0ZXJzXCJdID0gODBdID0gXCJyZW5kZXJDb250cm9sQ2hhcmFjdGVyc1wiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInJlbmRlckluZGVudEd1aWRlc1wiXSA9IDgxXSA9IFwicmVuZGVySW5kZW50R3VpZGVzXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wicmVuZGVyRmluYWxOZXdsaW5lXCJdID0gODJdID0gXCJyZW5kZXJGaW5hbE5ld2xpbmVcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJyZW5kZXJMaW5lSGlnaGxpZ2h0XCJdID0gODNdID0gXCJyZW5kZXJMaW5lSGlnaGxpZ2h0XCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wicmVuZGVyTGluZUhpZ2hsaWdodE9ubHlXaGVuRm9jdXNcIl0gPSA4NF0gPSBcInJlbmRlckxpbmVIaWdobGlnaHRPbmx5V2hlbkZvY3VzXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wicmVuZGVyVmFsaWRhdGlvbkRlY29yYXRpb25zXCJdID0gODVdID0gXCJyZW5kZXJWYWxpZGF0aW9uRGVjb3JhdGlvbnNcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJyZW5kZXJXaGl0ZXNwYWNlXCJdID0gODZdID0gXCJyZW5kZXJXaGl0ZXNwYWNlXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wicmV2ZWFsSG9yaXpvbnRhbFJpZ2h0UGFkZGluZ1wiXSA9IDg3XSA9IFwicmV2ZWFsSG9yaXpvbnRhbFJpZ2h0UGFkZGluZ1wiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInJvdW5kZWRTZWxlY3Rpb25cIl0gPSA4OF0gPSBcInJvdW5kZWRTZWxlY3Rpb25cIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJydWxlcnNcIl0gPSA4OV0gPSBcInJ1bGVyc1wiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInNjcm9sbGJhclwiXSA9IDkwXSA9IFwic2Nyb2xsYmFyXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wic2Nyb2xsQmV5b25kTGFzdENvbHVtblwiXSA9IDkxXSA9IFwic2Nyb2xsQmV5b25kTGFzdENvbHVtblwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInNjcm9sbEJleW9uZExhc3RMaW5lXCJdID0gOTJdID0gXCJzY3JvbGxCZXlvbmRMYXN0TGluZVwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInNjcm9sbFByZWRvbWluYW50QXhpc1wiXSA9IDkzXSA9IFwic2Nyb2xsUHJlZG9taW5hbnRBeGlzXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wic2VsZWN0aW9uQ2xpcGJvYXJkXCJdID0gOTRdID0gXCJzZWxlY3Rpb25DbGlwYm9hcmRcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJzZWxlY3Rpb25IaWdobGlnaHRcIl0gPSA5NV0gPSBcInNlbGVjdGlvbkhpZ2hsaWdodFwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInNlbGVjdE9uTGluZU51bWJlcnNcIl0gPSA5Nl0gPSBcInNlbGVjdE9uTGluZU51bWJlcnNcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJzaG93Rm9sZGluZ0NvbnRyb2xzXCJdID0gOTddID0gXCJzaG93Rm9sZGluZ0NvbnRyb2xzXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wic2hvd1VudXNlZFwiXSA9IDk4XSA9IFwic2hvd1VudXNlZFwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInNuaXBwZXRTdWdnZXN0aW9uc1wiXSA9IDk5XSA9IFwic25pcHBldFN1Z2dlc3Rpb25zXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wic21hcnRTZWxlY3RcIl0gPSAxMDBdID0gXCJzbWFydFNlbGVjdFwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInNtb290aFNjcm9sbGluZ1wiXSA9IDEwMV0gPSBcInNtb290aFNjcm9sbGluZ1wiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInN0aWNreVRhYlN0b3BzXCJdID0gMTAyXSA9IFwic3RpY2t5VGFiU3RvcHNcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJzdG9wUmVuZGVyaW5nTGluZUFmdGVyXCJdID0gMTAzXSA9IFwic3RvcFJlbmRlcmluZ0xpbmVBZnRlclwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInN1Z2dlc3RcIl0gPSAxMDRdID0gXCJzdWdnZXN0XCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wic3VnZ2VzdEZvbnRTaXplXCJdID0gMTA1XSA9IFwic3VnZ2VzdEZvbnRTaXplXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wic3VnZ2VzdExpbmVIZWlnaHRcIl0gPSAxMDZdID0gXCJzdWdnZXN0TGluZUhlaWdodFwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInN1Z2dlc3RPblRyaWdnZXJDaGFyYWN0ZXJzXCJdID0gMTA3XSA9IFwic3VnZ2VzdE9uVHJpZ2dlckNoYXJhY3RlcnNcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJzdWdnZXN0U2VsZWN0aW9uXCJdID0gMTA4XSA9IFwic3VnZ2VzdFNlbGVjdGlvblwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInRhYkNvbXBsZXRpb25cIl0gPSAxMDldID0gXCJ0YWJDb21wbGV0aW9uXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1widGFiSW5kZXhcIl0gPSAxMTBdID0gXCJ0YWJJbmRleFwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInVudXN1YWxMaW5lVGVybWluYXRvcnNcIl0gPSAxMTFdID0gXCJ1bnVzdWFsTGluZVRlcm1pbmF0b3JzXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1widXNlU2hhZG93RE9NXCJdID0gMTEyXSA9IFwidXNlU2hhZG93RE9NXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1widXNlVGFiU3RvcHNcIl0gPSAxMTNdID0gXCJ1c2VUYWJTdG9wc1wiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIndvcmRTZXBhcmF0b3JzXCJdID0gMTE0XSA9IFwid29yZFNlcGFyYXRvcnNcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJ3b3JkV3JhcFwiXSA9IDExNV0gPSBcIndvcmRXcmFwXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wid29yZFdyYXBCcmVha0FmdGVyQ2hhcmFjdGVyc1wiXSA9IDExNl0gPSBcIndvcmRXcmFwQnJlYWtBZnRlckNoYXJhY3RlcnNcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJ3b3JkV3JhcEJyZWFrQmVmb3JlQ2hhcmFjdGVyc1wiXSA9IDExN10gPSBcIndvcmRXcmFwQnJlYWtCZWZvcmVDaGFyYWN0ZXJzXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wid29yZFdyYXBDb2x1bW5cIl0gPSAxMThdID0gXCJ3b3JkV3JhcENvbHVtblwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIndvcmRXcmFwT3ZlcnJpZGUxXCJdID0gMTE5XSA9IFwid29yZFdyYXBPdmVycmlkZTFcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJ3b3JkV3JhcE92ZXJyaWRlMlwiXSA9IDEyMF0gPSBcIndvcmRXcmFwT3ZlcnJpZGUyXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wid3JhcHBpbmdJbmRlbnRcIl0gPSAxMjFdID0gXCJ3cmFwcGluZ0luZGVudFwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIndyYXBwaW5nU3RyYXRlZ3lcIl0gPSAxMjJdID0gXCJ3cmFwcGluZ1N0cmF0ZWd5XCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wic2hvd0RlcHJlY2F0ZWRcIl0gPSAxMjNdID0gXCJzaG93RGVwcmVjYXRlZFwiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImlubGF5SGludHNcIl0gPSAxMjRdID0gXCJpbmxheUhpbnRzXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiZWRpdG9yQ2xhc3NOYW1lXCJdID0gMTI1XSA9IFwiZWRpdG9yQ2xhc3NOYW1lXCI7XHJcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wicGl4ZWxSYXRpb1wiXSA9IDEyNl0gPSBcInBpeGVsUmF0aW9cIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJ0YWJGb2N1c01vZGVcIl0gPSAxMjddID0gXCJ0YWJGb2N1c01vZGVcIjtcclxuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJsYXlvdXRJbmZvXCJdID0gMTI4XSA9IFwibGF5b3V0SW5mb1wiO1xyXG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIndyYXBwaW5nSW5mb1wiXSA9IDEyOV0gPSBcIndyYXBwaW5nSW5mb1wiO1xyXG59KShFZGl0b3JPcHRpb24gfHwgKEVkaXRvck9wdGlvbiA9IHt9KSk7XHJcbi8qKlxyXG4gKiBFbmQgb2YgbGluZSBjaGFyYWN0ZXIgcHJlZmVyZW5jZS5cclxuICovXHJcbmV4cG9ydCB2YXIgRW5kT2ZMaW5lUHJlZmVyZW5jZTtcclxuKGZ1bmN0aW9uIChFbmRPZkxpbmVQcmVmZXJlbmNlKSB7XHJcbiAgICAvKipcclxuICAgICAqIFVzZSB0aGUgZW5kIG9mIGxpbmUgY2hhcmFjdGVyIGlkZW50aWZpZWQgaW4gdGhlIHRleHQgYnVmZmVyLlxyXG4gICAgICovXHJcbiAgICBFbmRPZkxpbmVQcmVmZXJlbmNlW0VuZE9mTGluZVByZWZlcmVuY2VbXCJUZXh0RGVmaW5lZFwiXSA9IDBdID0gXCJUZXh0RGVmaW5lZFwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBVc2UgbGluZSBmZWVkIChcXG4pIGFzIHRoZSBlbmQgb2YgbGluZSBjaGFyYWN0ZXIuXHJcbiAgICAgKi9cclxuICAgIEVuZE9mTGluZVByZWZlcmVuY2VbRW5kT2ZMaW5lUHJlZmVyZW5jZVtcIkxGXCJdID0gMV0gPSBcIkxGXCI7XHJcbiAgICAvKipcclxuICAgICAqIFVzZSBjYXJyaWFnZSByZXR1cm4gYW5kIGxpbmUgZmVlZCAoXFxyXFxuKSBhcyB0aGUgZW5kIG9mIGxpbmUgY2hhcmFjdGVyLlxyXG4gICAgICovXHJcbiAgICBFbmRPZkxpbmVQcmVmZXJlbmNlW0VuZE9mTGluZVByZWZlcmVuY2VbXCJDUkxGXCJdID0gMl0gPSBcIkNSTEZcIjtcclxufSkoRW5kT2ZMaW5lUHJlZmVyZW5jZSB8fCAoRW5kT2ZMaW5lUHJlZmVyZW5jZSA9IHt9KSk7XHJcbi8qKlxyXG4gKiBFbmQgb2YgbGluZSBjaGFyYWN0ZXIgcHJlZmVyZW5jZS5cclxuICovXHJcbmV4cG9ydCB2YXIgRW5kT2ZMaW5lU2VxdWVuY2U7XHJcbihmdW5jdGlvbiAoRW5kT2ZMaW5lU2VxdWVuY2UpIHtcclxuICAgIC8qKlxyXG4gICAgICogVXNlIGxpbmUgZmVlZCAoXFxuKSBhcyB0aGUgZW5kIG9mIGxpbmUgY2hhcmFjdGVyLlxyXG4gICAgICovXHJcbiAgICBFbmRPZkxpbmVTZXF1ZW5jZVtFbmRPZkxpbmVTZXF1ZW5jZVtcIkxGXCJdID0gMF0gPSBcIkxGXCI7XHJcbiAgICAvKipcclxuICAgICAqIFVzZSBjYXJyaWFnZSByZXR1cm4gYW5kIGxpbmUgZmVlZCAoXFxyXFxuKSBhcyB0aGUgZW5kIG9mIGxpbmUgY2hhcmFjdGVyLlxyXG4gICAgICovXHJcbiAgICBFbmRPZkxpbmVTZXF1ZW5jZVtFbmRPZkxpbmVTZXF1ZW5jZVtcIkNSTEZcIl0gPSAxXSA9IFwiQ1JMRlwiO1xyXG59KShFbmRPZkxpbmVTZXF1ZW5jZSB8fCAoRW5kT2ZMaW5lU2VxdWVuY2UgPSB7fSkpO1xyXG4vKipcclxuICogRGVzY3JpYmVzIHdoYXQgdG8gZG8gd2l0aCB0aGUgaW5kZW50YXRpb24gd2hlbiBwcmVzc2luZyBFbnRlci5cclxuICovXHJcbmV4cG9ydCB2YXIgSW5kZW50QWN0aW9uO1xyXG4oZnVuY3Rpb24gKEluZGVudEFjdGlvbikge1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbnNlcnQgbmV3IGxpbmUgYW5kIGNvcHkgdGhlIHByZXZpb3VzIGxpbmUncyBpbmRlbnRhdGlvbi5cclxuICAgICAqL1xyXG4gICAgSW5kZW50QWN0aW9uW0luZGVudEFjdGlvbltcIk5vbmVcIl0gPSAwXSA9IFwiTm9uZVwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbnNlcnQgbmV3IGxpbmUgYW5kIGluZGVudCBvbmNlIChyZWxhdGl2ZSB0byB0aGUgcHJldmlvdXMgbGluZSdzIGluZGVudGF0aW9uKS5cclxuICAgICAqL1xyXG4gICAgSW5kZW50QWN0aW9uW0luZGVudEFjdGlvbltcIkluZGVudFwiXSA9IDFdID0gXCJJbmRlbnRcIjtcclxuICAgIC8qKlxyXG4gICAgICogSW5zZXJ0IHR3byBuZXcgbGluZXM6XHJcbiAgICAgKiAgLSB0aGUgZmlyc3Qgb25lIGluZGVudGVkIHdoaWNoIHdpbGwgaG9sZCB0aGUgY3Vyc29yXHJcbiAgICAgKiAgLSB0aGUgc2Vjb25kIG9uZSBhdCB0aGUgc2FtZSBpbmRlbnRhdGlvbiBsZXZlbFxyXG4gICAgICovXHJcbiAgICBJbmRlbnRBY3Rpb25bSW5kZW50QWN0aW9uW1wiSW5kZW50T3V0ZGVudFwiXSA9IDJdID0gXCJJbmRlbnRPdXRkZW50XCI7XHJcbiAgICAvKipcclxuICAgICAqIEluc2VydCBuZXcgbGluZSBhbmQgb3V0ZGVudCBvbmNlIChyZWxhdGl2ZSB0byB0aGUgcHJldmlvdXMgbGluZSdzIGluZGVudGF0aW9uKS5cclxuICAgICAqL1xyXG4gICAgSW5kZW50QWN0aW9uW0luZGVudEFjdGlvbltcIk91dGRlbnRcIl0gPSAzXSA9IFwiT3V0ZGVudFwiO1xyXG59KShJbmRlbnRBY3Rpb24gfHwgKEluZGVudEFjdGlvbiA9IHt9KSk7XHJcbmV4cG9ydCB2YXIgSW5sYXlIaW50S2luZDtcclxuKGZ1bmN0aW9uIChJbmxheUhpbnRLaW5kKSB7XHJcbiAgICBJbmxheUhpbnRLaW5kW0lubGF5SGludEtpbmRbXCJPdGhlclwiXSA9IDBdID0gXCJPdGhlclwiO1xyXG4gICAgSW5sYXlIaW50S2luZFtJbmxheUhpbnRLaW5kW1wiVHlwZVwiXSA9IDFdID0gXCJUeXBlXCI7XHJcbiAgICBJbmxheUhpbnRLaW5kW0lubGF5SGludEtpbmRbXCJQYXJhbWV0ZXJcIl0gPSAyXSA9IFwiUGFyYW1ldGVyXCI7XHJcbn0pKElubGF5SGludEtpbmQgfHwgKElubGF5SGludEtpbmQgPSB7fSkpO1xyXG4vKipcclxuICogSG93IGFuIHtAbGluayBJbmxpbmVDb21wbGV0aW9uc1Byb3ZpZGVyIGlubGluZSBjb21wbGV0aW9uIHByb3ZpZGVyfSB3YXMgdHJpZ2dlcmVkLlxyXG4gKi9cclxuZXhwb3J0IHZhciBJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQ7XHJcbihmdW5jdGlvbiAoSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kKSB7XHJcbiAgICAvKipcclxuICAgICAqIENvbXBsZXRpb24gd2FzIHRyaWdnZXJlZCBhdXRvbWF0aWNhbGx5IHdoaWxlIGVkaXRpbmcuXHJcbiAgICAgKiBJdCBpcyBzdWZmaWNpZW50IHRvIHJldHVybiBhIHNpbmdsZSBjb21wbGV0aW9uIGl0ZW0gaW4gdGhpcyBjYXNlLlxyXG4gICAgICovXHJcbiAgICBJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmRbSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kW1wiQXV0b21hdGljXCJdID0gMF0gPSBcIkF1dG9tYXRpY1wiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDb21wbGV0aW9uIHdhcyB0cmlnZ2VyZWQgZXhwbGljaXRseSBieSBhIHVzZXIgZ2VzdHVyZS5cclxuICAgICAqIFJldHVybiBtdWx0aXBsZSBjb21wbGV0aW9uIGl0ZW1zIHRvIGVuYWJsZSBjeWNsaW5nIHRocm91Z2ggdGhlbS5cclxuICAgICAqL1xyXG4gICAgSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kW0lubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZFtcIkV4cGxpY2l0XCJdID0gMV0gPSBcIkV4cGxpY2l0XCI7XHJcbn0pKElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZCB8fCAoSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kID0ge30pKTtcclxuLyoqXHJcbiAqIFZpcnR1YWwgS2V5IENvZGVzLCB0aGUgdmFsdWUgZG9lcyBub3QgaG9sZCBhbnkgaW5oZXJlbnQgbWVhbmluZy5cclxuICogSW5zcGlyZWQgc29tZXdoYXQgZnJvbSBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L3dpbmRvd3MvZGVza3RvcC9kZDM3NTczMSh2PXZzLjg1KS5hc3B4XHJcbiAqIEJ1dCB0aGVzZSBhcmUgXCJtb3JlIGdlbmVyYWxcIiwgYXMgdGhleSBzaG91bGQgd29yayBhY3Jvc3MgYnJvd3NlcnMgJiBPU2BzLlxyXG4gKi9cclxuZXhwb3J0IHZhciBLZXlDb2RlO1xyXG4oZnVuY3Rpb24gKEtleUNvZGUpIHtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIkRlcGVuZHNPbktiTGF5b3V0XCJdID0gLTFdID0gXCJEZXBlbmRzT25LYkxheW91dFwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBQbGFjZWQgZmlyc3QgdG8gY292ZXIgdGhlIDAgdmFsdWUgb2YgdGhlIGVudW0uXHJcbiAgICAgKi9cclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIlVua25vd25cIl0gPSAwXSA9IFwiVW5rbm93blwiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiQmFja3NwYWNlXCJdID0gMV0gPSBcIkJhY2tzcGFjZVwiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiVGFiXCJdID0gMl0gPSBcIlRhYlwiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRW50ZXJcIl0gPSAzXSA9IFwiRW50ZXJcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIlNoaWZ0XCJdID0gNF0gPSBcIlNoaWZ0XCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJDdHJsXCJdID0gNV0gPSBcIkN0cmxcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIkFsdFwiXSA9IDZdID0gXCJBbHRcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIlBhdXNlQnJlYWtcIl0gPSA3XSA9IFwiUGF1c2VCcmVha1wiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiQ2Fwc0xvY2tcIl0gPSA4XSA9IFwiQ2Fwc0xvY2tcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIkVzY2FwZVwiXSA9IDldID0gXCJFc2NhcGVcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIlNwYWNlXCJdID0gMTBdID0gXCJTcGFjZVwiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiUGFnZVVwXCJdID0gMTFdID0gXCJQYWdlVXBcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIlBhZ2VEb3duXCJdID0gMTJdID0gXCJQYWdlRG93blwiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRW5kXCJdID0gMTNdID0gXCJFbmRcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIkhvbWVcIl0gPSAxNF0gPSBcIkhvbWVcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIkxlZnRBcnJvd1wiXSA9IDE1XSA9IFwiTGVmdEFycm93XCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJVcEFycm93XCJdID0gMTZdID0gXCJVcEFycm93XCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJSaWdodEFycm93XCJdID0gMTddID0gXCJSaWdodEFycm93XCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJEb3duQXJyb3dcIl0gPSAxOF0gPSBcIkRvd25BcnJvd1wiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiSW5zZXJ0XCJdID0gMTldID0gXCJJbnNlcnRcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIkRlbGV0ZVwiXSA9IDIwXSA9IFwiRGVsZXRlXCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLRVlfMFwiXSA9IDIxXSA9IFwiS0VZXzBcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIktFWV8xXCJdID0gMjJdID0gXCJLRVlfMVwiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS0VZXzJcIl0gPSAyM10gPSBcIktFWV8yXCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLRVlfM1wiXSA9IDI0XSA9IFwiS0VZXzNcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIktFWV80XCJdID0gMjVdID0gXCJLRVlfNFwiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS0VZXzVcIl0gPSAyNl0gPSBcIktFWV81XCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLRVlfNlwiXSA9IDI3XSA9IFwiS0VZXzZcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIktFWV83XCJdID0gMjhdID0gXCJLRVlfN1wiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS0VZXzhcIl0gPSAyOV0gPSBcIktFWV84XCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLRVlfOVwiXSA9IDMwXSA9IFwiS0VZXzlcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIktFWV9BXCJdID0gMzFdID0gXCJLRVlfQVwiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS0VZX0JcIl0gPSAzMl0gPSBcIktFWV9CXCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLRVlfQ1wiXSA9IDMzXSA9IFwiS0VZX0NcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIktFWV9EXCJdID0gMzRdID0gXCJLRVlfRFwiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS0VZX0VcIl0gPSAzNV0gPSBcIktFWV9FXCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLRVlfRlwiXSA9IDM2XSA9IFwiS0VZX0ZcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIktFWV9HXCJdID0gMzddID0gXCJLRVlfR1wiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS0VZX0hcIl0gPSAzOF0gPSBcIktFWV9IXCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLRVlfSVwiXSA9IDM5XSA9IFwiS0VZX0lcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIktFWV9KXCJdID0gNDBdID0gXCJLRVlfSlwiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS0VZX0tcIl0gPSA0MV0gPSBcIktFWV9LXCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLRVlfTFwiXSA9IDQyXSA9IFwiS0VZX0xcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIktFWV9NXCJdID0gNDNdID0gXCJLRVlfTVwiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS0VZX05cIl0gPSA0NF0gPSBcIktFWV9OXCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLRVlfT1wiXSA9IDQ1XSA9IFwiS0VZX09cIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIktFWV9QXCJdID0gNDZdID0gXCJLRVlfUFwiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS0VZX1FcIl0gPSA0N10gPSBcIktFWV9RXCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLRVlfUlwiXSA9IDQ4XSA9IFwiS0VZX1JcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIktFWV9TXCJdID0gNDldID0gXCJLRVlfU1wiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS0VZX1RcIl0gPSA1MF0gPSBcIktFWV9UXCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLRVlfVVwiXSA9IDUxXSA9IFwiS0VZX1VcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIktFWV9WXCJdID0gNTJdID0gXCJLRVlfVlwiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS0VZX1dcIl0gPSA1M10gPSBcIktFWV9XXCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLRVlfWFwiXSA9IDU0XSA9IFwiS0VZX1hcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIktFWV9ZXCJdID0gNTVdID0gXCJLRVlfWVwiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS0VZX1pcIl0gPSA1Nl0gPSBcIktFWV9aXCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJNZXRhXCJdID0gNTddID0gXCJNZXRhXCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJDb250ZXh0TWVudVwiXSA9IDU4XSA9IFwiQ29udGV4dE1lbnVcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIkYxXCJdID0gNTldID0gXCJGMVwiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRjJcIl0gPSA2MF0gPSBcIkYyXCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGM1wiXSA9IDYxXSA9IFwiRjNcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIkY0XCJdID0gNjJdID0gXCJGNFwiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRjVcIl0gPSA2M10gPSBcIkY1XCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGNlwiXSA9IDY0XSA9IFwiRjZcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIkY3XCJdID0gNjVdID0gXCJGN1wiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRjhcIl0gPSA2Nl0gPSBcIkY4XCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGOVwiXSA9IDY3XSA9IFwiRjlcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIkYxMFwiXSA9IDY4XSA9IFwiRjEwXCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGMTFcIl0gPSA2OV0gPSBcIkYxMVwiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRjEyXCJdID0gNzBdID0gXCJGMTJcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIkYxM1wiXSA9IDcxXSA9IFwiRjEzXCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGMTRcIl0gPSA3Ml0gPSBcIkYxNFwiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRjE1XCJdID0gNzNdID0gXCJGMTVcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIkYxNlwiXSA9IDc0XSA9IFwiRjE2XCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGMTdcIl0gPSA3NV0gPSBcIkYxN1wiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRjE4XCJdID0gNzZdID0gXCJGMThcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIkYxOVwiXSA9IDc3XSA9IFwiRjE5XCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJOdW1Mb2NrXCJdID0gNzhdID0gXCJOdW1Mb2NrXCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJTY3JvbGxMb2NrXCJdID0gNzldID0gXCJTY3JvbGxMb2NrXCI7XHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgZm9yIG1pc2NlbGxhbmVvdXMgY2hhcmFjdGVyczsgaXQgY2FuIHZhcnkgYnkga2V5Ym9hcmQuXHJcbiAgICAgKiBGb3IgdGhlIFVTIHN0YW5kYXJkIGtleWJvYXJkLCB0aGUgJzs6JyBrZXlcclxuICAgICAqL1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiVVNfU0VNSUNPTE9OXCJdID0gODBdID0gXCJVU19TRU1JQ09MT05cIjtcclxuICAgIC8qKlxyXG4gICAgICogRm9yIGFueSBjb3VudHJ5L3JlZ2lvbiwgdGhlICcrJyBrZXlcclxuICAgICAqIEZvciB0aGUgVVMgc3RhbmRhcmQga2V5Ym9hcmQsIHRoZSAnPSsnIGtleVxyXG4gICAgICovXHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJVU19FUVVBTFwiXSA9IDgxXSA9IFwiVVNfRVFVQUxcIjtcclxuICAgIC8qKlxyXG4gICAgICogRm9yIGFueSBjb3VudHJ5L3JlZ2lvbiwgdGhlICcsJyBrZXlcclxuICAgICAqIEZvciB0aGUgVVMgc3RhbmRhcmQga2V5Ym9hcmQsIHRoZSAnLDwnIGtleVxyXG4gICAgICovXHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJVU19DT01NQVwiXSA9IDgyXSA9IFwiVVNfQ09NTUFcIjtcclxuICAgIC8qKlxyXG4gICAgICogRm9yIGFueSBjb3VudHJ5L3JlZ2lvbiwgdGhlICctJyBrZXlcclxuICAgICAqIEZvciB0aGUgVVMgc3RhbmRhcmQga2V5Ym9hcmQsIHRoZSAnLV8nIGtleVxyXG4gICAgICovXHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJVU19NSU5VU1wiXSA9IDgzXSA9IFwiVVNfTUlOVVNcIjtcclxuICAgIC8qKlxyXG4gICAgICogRm9yIGFueSBjb3VudHJ5L3JlZ2lvbiwgdGhlICcuJyBrZXlcclxuICAgICAqIEZvciB0aGUgVVMgc3RhbmRhcmQga2V5Ym9hcmQsIHRoZSAnLj4nIGtleVxyXG4gICAgICovXHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJVU19ET1RcIl0gPSA4NF0gPSBcIlVTX0RPVFwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIGZvciBtaXNjZWxsYW5lb3VzIGNoYXJhY3RlcnM7IGl0IGNhbiB2YXJ5IGJ5IGtleWJvYXJkLlxyXG4gICAgICogRm9yIHRoZSBVUyBzdGFuZGFyZCBrZXlib2FyZCwgdGhlICcvPycga2V5XHJcbiAgICAgKi9cclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIlVTX1NMQVNIXCJdID0gODVdID0gXCJVU19TTEFTSFwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIGZvciBtaXNjZWxsYW5lb3VzIGNoYXJhY3RlcnM7IGl0IGNhbiB2YXJ5IGJ5IGtleWJvYXJkLlxyXG4gICAgICogRm9yIHRoZSBVUyBzdGFuZGFyZCBrZXlib2FyZCwgdGhlICdgficga2V5XHJcbiAgICAgKi9cclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIlVTX0JBQ0tUSUNLXCJdID0gODZdID0gXCJVU19CQUNLVElDS1wiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIGZvciBtaXNjZWxsYW5lb3VzIGNoYXJhY3RlcnM7IGl0IGNhbiB2YXJ5IGJ5IGtleWJvYXJkLlxyXG4gICAgICogRm9yIHRoZSBVUyBzdGFuZGFyZCBrZXlib2FyZCwgdGhlICdbeycga2V5XHJcbiAgICAgKi9cclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIlVTX09QRU5fU1FVQVJFX0JSQUNLRVRcIl0gPSA4N10gPSBcIlVTX09QRU5fU1FVQVJFX0JSQUNLRVRcIjtcclxuICAgIC8qKlxyXG4gICAgICogVXNlZCBmb3IgbWlzY2VsbGFuZW91cyBjaGFyYWN0ZXJzOyBpdCBjYW4gdmFyeSBieSBrZXlib2FyZC5cclxuICAgICAqIEZvciB0aGUgVVMgc3RhbmRhcmQga2V5Ym9hcmQsIHRoZSAnXFx8JyBrZXlcclxuICAgICAqL1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiVVNfQkFDS1NMQVNIXCJdID0gODhdID0gXCJVU19CQUNLU0xBU0hcIjtcclxuICAgIC8qKlxyXG4gICAgICogVXNlZCBmb3IgbWlzY2VsbGFuZW91cyBjaGFyYWN0ZXJzOyBpdCBjYW4gdmFyeSBieSBrZXlib2FyZC5cclxuICAgICAqIEZvciB0aGUgVVMgc3RhbmRhcmQga2V5Ym9hcmQsIHRoZSAnXX0nIGtleVxyXG4gICAgICovXHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJVU19DTE9TRV9TUVVBUkVfQlJBQ0tFVFwiXSA9IDg5XSA9IFwiVVNfQ0xPU0VfU1FVQVJFX0JSQUNLRVRcIjtcclxuICAgIC8qKlxyXG4gICAgICogVXNlZCBmb3IgbWlzY2VsbGFuZW91cyBjaGFyYWN0ZXJzOyBpdCBjYW4gdmFyeSBieSBrZXlib2FyZC5cclxuICAgICAqIEZvciB0aGUgVVMgc3RhbmRhcmQga2V5Ym9hcmQsIHRoZSAnJ1wiJyBrZXlcclxuICAgICAqL1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiVVNfUVVPVEVcIl0gPSA5MF0gPSBcIlVTX1FVT1RFXCI7XHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgZm9yIG1pc2NlbGxhbmVvdXMgY2hhcmFjdGVyczsgaXQgY2FuIHZhcnkgYnkga2V5Ym9hcmQuXHJcbiAgICAgKi9cclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIk9FTV84XCJdID0gOTFdID0gXCJPRU1fOFwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBFaXRoZXIgdGhlIGFuZ2xlIGJyYWNrZXQga2V5IG9yIHRoZSBiYWNrc2xhc2gga2V5IG9uIHRoZSBSVCAxMDIta2V5IGtleWJvYXJkLlxyXG4gICAgICovXHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJPRU1fMTAyXCJdID0gOTJdID0gXCJPRU1fMTAyXCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJOVU1QQURfMFwiXSA9IDkzXSA9IFwiTlVNUEFEXzBcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIk5VTVBBRF8xXCJdID0gOTRdID0gXCJOVU1QQURfMVwiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiTlVNUEFEXzJcIl0gPSA5NV0gPSBcIk5VTVBBRF8yXCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJOVU1QQURfM1wiXSA9IDk2XSA9IFwiTlVNUEFEXzNcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIk5VTVBBRF80XCJdID0gOTddID0gXCJOVU1QQURfNFwiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiTlVNUEFEXzVcIl0gPSA5OF0gPSBcIk5VTVBBRF81XCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJOVU1QQURfNlwiXSA9IDk5XSA9IFwiTlVNUEFEXzZcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIk5VTVBBRF83XCJdID0gMTAwXSA9IFwiTlVNUEFEXzdcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIk5VTVBBRF84XCJdID0gMTAxXSA9IFwiTlVNUEFEXzhcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIk5VTVBBRF85XCJdID0gMTAyXSA9IFwiTlVNUEFEXzlcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIk5VTVBBRF9NVUxUSVBMWVwiXSA9IDEwM10gPSBcIk5VTVBBRF9NVUxUSVBMWVwiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiTlVNUEFEX0FERFwiXSA9IDEwNF0gPSBcIk5VTVBBRF9BRERcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIk5VTVBBRF9TRVBBUkFUT1JcIl0gPSAxMDVdID0gXCJOVU1QQURfU0VQQVJBVE9SXCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJOVU1QQURfU1VCVFJBQ1RcIl0gPSAxMDZdID0gXCJOVU1QQURfU1VCVFJBQ1RcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIk5VTVBBRF9ERUNJTUFMXCJdID0gMTA3XSA9IFwiTlVNUEFEX0RFQ0lNQUxcIjtcclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIk5VTVBBRF9ESVZJREVcIl0gPSAxMDhdID0gXCJOVU1QQURfRElWSURFXCI7XHJcbiAgICAvKipcclxuICAgICAqIENvdmVyIGFsbCBrZXkgY29kZXMgd2hlbiBJTUUgaXMgcHJvY2Vzc2luZyBpbnB1dC5cclxuICAgICAqL1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS0VZX0lOX0NPTVBPU0lUSU9OXCJdID0gMTA5XSA9IFwiS0VZX0lOX0NPTVBPU0lUSU9OXCI7XHJcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJBQk5UX0MxXCJdID0gMTEwXSA9IFwiQUJOVF9DMVwiO1xyXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiQUJOVF9DMlwiXSA9IDExMV0gPSBcIkFCTlRfQzJcIjtcclxuICAgIC8qKlxyXG4gICAgICogUGxhY2VkIGxhc3QgdG8gY292ZXIgdGhlIGxlbmd0aCBvZiB0aGUgZW51bS5cclxuICAgICAqIFBsZWFzZSBkbyBub3QgZGVwZW5kIG9uIHRoaXMgdmFsdWUhXHJcbiAgICAgKi9cclxuICAgIEtleUNvZGVbS2V5Q29kZVtcIk1BWF9WQUxVRVwiXSA9IDExMl0gPSBcIk1BWF9WQUxVRVwiO1xyXG59KShLZXlDb2RlIHx8IChLZXlDb2RlID0ge30pKTtcclxuZXhwb3J0IHZhciBNYXJrZXJTZXZlcml0eTtcclxuKGZ1bmN0aW9uIChNYXJrZXJTZXZlcml0eSkge1xyXG4gICAgTWFya2VyU2V2ZXJpdHlbTWFya2VyU2V2ZXJpdHlbXCJIaW50XCJdID0gMV0gPSBcIkhpbnRcIjtcclxuICAgIE1hcmtlclNldmVyaXR5W01hcmtlclNldmVyaXR5W1wiSW5mb1wiXSA9IDJdID0gXCJJbmZvXCI7XHJcbiAgICBNYXJrZXJTZXZlcml0eVtNYXJrZXJTZXZlcml0eVtcIldhcm5pbmdcIl0gPSA0XSA9IFwiV2FybmluZ1wiO1xyXG4gICAgTWFya2VyU2V2ZXJpdHlbTWFya2VyU2V2ZXJpdHlbXCJFcnJvclwiXSA9IDhdID0gXCJFcnJvclwiO1xyXG59KShNYXJrZXJTZXZlcml0eSB8fCAoTWFya2VyU2V2ZXJpdHkgPSB7fSkpO1xyXG5leHBvcnQgdmFyIE1hcmtlclRhZztcclxuKGZ1bmN0aW9uIChNYXJrZXJUYWcpIHtcclxuICAgIE1hcmtlclRhZ1tNYXJrZXJUYWdbXCJVbm5lY2Vzc2FyeVwiXSA9IDFdID0gXCJVbm5lY2Vzc2FyeVwiO1xyXG4gICAgTWFya2VyVGFnW01hcmtlclRhZ1tcIkRlcHJlY2F0ZWRcIl0gPSAyXSA9IFwiRGVwcmVjYXRlZFwiO1xyXG59KShNYXJrZXJUYWcgfHwgKE1hcmtlclRhZyA9IHt9KSk7XHJcbi8qKlxyXG4gKiBQb3NpdGlvbiBpbiB0aGUgbWluaW1hcCB0byByZW5kZXIgdGhlIGRlY29yYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgdmFyIE1pbmltYXBQb3NpdGlvbjtcclxuKGZ1bmN0aW9uIChNaW5pbWFwUG9zaXRpb24pIHtcclxuICAgIE1pbmltYXBQb3NpdGlvbltNaW5pbWFwUG9zaXRpb25bXCJJbmxpbmVcIl0gPSAxXSA9IFwiSW5saW5lXCI7XHJcbiAgICBNaW5pbWFwUG9zaXRpb25bTWluaW1hcFBvc2l0aW9uW1wiR3V0dGVyXCJdID0gMl0gPSBcIkd1dHRlclwiO1xyXG59KShNaW5pbWFwUG9zaXRpb24gfHwgKE1pbmltYXBQb3NpdGlvbiA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUeXBlIG9mIGhpdCBlbGVtZW50IHdpdGggdGhlIG1vdXNlIGluIHRoZSBlZGl0b3IuXHJcbiAqL1xyXG5leHBvcnQgdmFyIE1vdXNlVGFyZ2V0VHlwZTtcclxuKGZ1bmN0aW9uIChNb3VzZVRhcmdldFR5cGUpIHtcclxuICAgIC8qKlxyXG4gICAgICogTW91c2UgaXMgb24gdG9wIG9mIGFuIHVua25vd24gZWxlbWVudC5cclxuICAgICAqL1xyXG4gICAgTW91c2VUYXJnZXRUeXBlW01vdXNlVGFyZ2V0VHlwZVtcIlVOS05PV05cIl0gPSAwXSA9IFwiVU5LTk9XTlwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBNb3VzZSBpcyBvbiB0b3Agb2YgdGhlIHRleHRhcmVhIHVzZWQgZm9yIGlucHV0LlxyXG4gICAgICovXHJcbiAgICBNb3VzZVRhcmdldFR5cGVbTW91c2VUYXJnZXRUeXBlW1wiVEVYVEFSRUFcIl0gPSAxXSA9IFwiVEVYVEFSRUFcIjtcclxuICAgIC8qKlxyXG4gICAgICogTW91c2UgaXMgb24gdG9wIG9mIHRoZSBnbHlwaCBtYXJnaW5cclxuICAgICAqL1xyXG4gICAgTW91c2VUYXJnZXRUeXBlW01vdXNlVGFyZ2V0VHlwZVtcIkdVVFRFUl9HTFlQSF9NQVJHSU5cIl0gPSAyXSA9IFwiR1VUVEVSX0dMWVBIX01BUkdJTlwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBNb3VzZSBpcyBvbiB0b3Agb2YgdGhlIGxpbmUgbnVtYmVyc1xyXG4gICAgICovXHJcbiAgICBNb3VzZVRhcmdldFR5cGVbTW91c2VUYXJnZXRUeXBlW1wiR1VUVEVSX0xJTkVfTlVNQkVSU1wiXSA9IDNdID0gXCJHVVRURVJfTElORV9OVU1CRVJTXCI7XHJcbiAgICAvKipcclxuICAgICAqIE1vdXNlIGlzIG9uIHRvcCBvZiB0aGUgbGluZSBkZWNvcmF0aW9uc1xyXG4gICAgICovXHJcbiAgICBNb3VzZVRhcmdldFR5cGVbTW91c2VUYXJnZXRUeXBlW1wiR1VUVEVSX0xJTkVfREVDT1JBVElPTlNcIl0gPSA0XSA9IFwiR1VUVEVSX0xJTkVfREVDT1JBVElPTlNcIjtcclxuICAgIC8qKlxyXG4gICAgICogTW91c2UgaXMgb24gdG9wIG9mIHRoZSB3aGl0ZXNwYWNlIGxlZnQgaW4gdGhlIGd1dHRlciBieSBhIHZpZXcgem9uZS5cclxuICAgICAqL1xyXG4gICAgTW91c2VUYXJnZXRUeXBlW01vdXNlVGFyZ2V0VHlwZVtcIkdVVFRFUl9WSUVXX1pPTkVcIl0gPSA1XSA9IFwiR1VUVEVSX1ZJRVdfWk9ORVwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBNb3VzZSBpcyBvbiB0b3Agb2YgdGV4dCBpbiB0aGUgY29udGVudC5cclxuICAgICAqL1xyXG4gICAgTW91c2VUYXJnZXRUeXBlW01vdXNlVGFyZ2V0VHlwZVtcIkNPTlRFTlRfVEVYVFwiXSA9IDZdID0gXCJDT05URU5UX1RFWFRcIjtcclxuICAgIC8qKlxyXG4gICAgICogTW91c2UgaXMgb24gdG9wIG9mIGVtcHR5IHNwYWNlIGluIHRoZSBjb250ZW50IChlLmcuIGFmdGVyIGxpbmUgdGV4dCBvciBiZWxvdyBsYXN0IGxpbmUpXHJcbiAgICAgKi9cclxuICAgIE1vdXNlVGFyZ2V0VHlwZVtNb3VzZVRhcmdldFR5cGVbXCJDT05URU5UX0VNUFRZXCJdID0gN10gPSBcIkNPTlRFTlRfRU1QVFlcIjtcclxuICAgIC8qKlxyXG4gICAgICogTW91c2UgaXMgb24gdG9wIG9mIGEgdmlldyB6b25lIGluIHRoZSBjb250ZW50LlxyXG4gICAgICovXHJcbiAgICBNb3VzZVRhcmdldFR5cGVbTW91c2VUYXJnZXRUeXBlW1wiQ09OVEVOVF9WSUVXX1pPTkVcIl0gPSA4XSA9IFwiQ09OVEVOVF9WSUVXX1pPTkVcIjtcclxuICAgIC8qKlxyXG4gICAgICogTW91c2UgaXMgb24gdG9wIG9mIGEgY29udGVudCB3aWRnZXQuXHJcbiAgICAgKi9cclxuICAgIE1vdXNlVGFyZ2V0VHlwZVtNb3VzZVRhcmdldFR5cGVbXCJDT05URU5UX1dJREdFVFwiXSA9IDldID0gXCJDT05URU5UX1dJREdFVFwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBNb3VzZSBpcyBvbiB0b3Agb2YgdGhlIGRlY29yYXRpb25zIG92ZXJ2aWV3IHJ1bGVyLlxyXG4gICAgICovXHJcbiAgICBNb3VzZVRhcmdldFR5cGVbTW91c2VUYXJnZXRUeXBlW1wiT1ZFUlZJRVdfUlVMRVJcIl0gPSAxMF0gPSBcIk9WRVJWSUVXX1JVTEVSXCI7XHJcbiAgICAvKipcclxuICAgICAqIE1vdXNlIGlzIG9uIHRvcCBvZiBhIHNjcm9sbGJhci5cclxuICAgICAqL1xyXG4gICAgTW91c2VUYXJnZXRUeXBlW01vdXNlVGFyZ2V0VHlwZVtcIlNDUk9MTEJBUlwiXSA9IDExXSA9IFwiU0NST0xMQkFSXCI7XHJcbiAgICAvKipcclxuICAgICAqIE1vdXNlIGlzIG9uIHRvcCBvZiBhbiBvdmVybGF5IHdpZGdldC5cclxuICAgICAqL1xyXG4gICAgTW91c2VUYXJnZXRUeXBlW01vdXNlVGFyZ2V0VHlwZVtcIk9WRVJMQVlfV0lER0VUXCJdID0gMTJdID0gXCJPVkVSTEFZX1dJREdFVFwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBNb3VzZSBpcyBvdXRzaWRlIG9mIHRoZSBlZGl0b3IuXHJcbiAgICAgKi9cclxuICAgIE1vdXNlVGFyZ2V0VHlwZVtNb3VzZVRhcmdldFR5cGVbXCJPVVRTSURFX0VESVRPUlwiXSA9IDEzXSA9IFwiT1VUU0lERV9FRElUT1JcIjtcclxufSkoTW91c2VUYXJnZXRUeXBlIHx8IChNb3VzZVRhcmdldFR5cGUgPSB7fSkpO1xyXG4vKipcclxuICogQSBwb3NpdGlvbmluZyBwcmVmZXJlbmNlIGZvciByZW5kZXJpbmcgb3ZlcmxheSB3aWRnZXRzLlxyXG4gKi9cclxuZXhwb3J0IHZhciBPdmVybGF5V2lkZ2V0UG9zaXRpb25QcmVmZXJlbmNlO1xyXG4oZnVuY3Rpb24gKE92ZXJsYXlXaWRnZXRQb3NpdGlvblByZWZlcmVuY2UpIHtcclxuICAgIC8qKlxyXG4gICAgICogUG9zaXRpb24gdGhlIG92ZXJsYXkgd2lkZ2V0IGluIHRoZSB0b3AgcmlnaHQgY29ybmVyXHJcbiAgICAgKi9cclxuICAgIE92ZXJsYXlXaWRnZXRQb3NpdGlvblByZWZlcmVuY2VbT3ZlcmxheVdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZVtcIlRPUF9SSUdIVF9DT1JORVJcIl0gPSAwXSA9IFwiVE9QX1JJR0hUX0NPUk5FUlwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBQb3NpdGlvbiB0aGUgb3ZlcmxheSB3aWRnZXQgaW4gdGhlIGJvdHRvbSByaWdodCBjb3JuZXJcclxuICAgICAqL1xyXG4gICAgT3ZlcmxheVdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZVtPdmVybGF5V2lkZ2V0UG9zaXRpb25QcmVmZXJlbmNlW1wiQk9UVE9NX1JJR0hUX0NPUk5FUlwiXSA9IDFdID0gXCJCT1RUT01fUklHSFRfQ09STkVSXCI7XHJcbiAgICAvKipcclxuICAgICAqIFBvc2l0aW9uIHRoZSBvdmVybGF5IHdpZGdldCBpbiB0aGUgdG9wIGNlbnRlclxyXG4gICAgICovXHJcbiAgICBPdmVybGF5V2lkZ2V0UG9zaXRpb25QcmVmZXJlbmNlW092ZXJsYXlXaWRnZXRQb3NpdGlvblByZWZlcmVuY2VbXCJUT1BfQ0VOVEVSXCJdID0gMl0gPSBcIlRPUF9DRU5URVJcIjtcclxufSkoT3ZlcmxheVdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZSB8fCAoT3ZlcmxheVdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZSA9IHt9KSk7XHJcbi8qKlxyXG4gKiBWZXJ0aWNhbCBMYW5lIGluIHRoZSBvdmVydmlldyBydWxlciBvZiB0aGUgZWRpdG9yLlxyXG4gKi9cclxuZXhwb3J0IHZhciBPdmVydmlld1J1bGVyTGFuZTtcclxuKGZ1bmN0aW9uIChPdmVydmlld1J1bGVyTGFuZSkge1xyXG4gICAgT3ZlcnZpZXdSdWxlckxhbmVbT3ZlcnZpZXdSdWxlckxhbmVbXCJMZWZ0XCJdID0gMV0gPSBcIkxlZnRcIjtcclxuICAgIE92ZXJ2aWV3UnVsZXJMYW5lW092ZXJ2aWV3UnVsZXJMYW5lW1wiQ2VudGVyXCJdID0gMl0gPSBcIkNlbnRlclwiO1xyXG4gICAgT3ZlcnZpZXdSdWxlckxhbmVbT3ZlcnZpZXdSdWxlckxhbmVbXCJSaWdodFwiXSA9IDRdID0gXCJSaWdodFwiO1xyXG4gICAgT3ZlcnZpZXdSdWxlckxhbmVbT3ZlcnZpZXdSdWxlckxhbmVbXCJGdWxsXCJdID0gN10gPSBcIkZ1bGxcIjtcclxufSkoT3ZlcnZpZXdSdWxlckxhbmUgfHwgKE92ZXJ2aWV3UnVsZXJMYW5lID0ge30pKTtcclxuZXhwb3J0IHZhciBSZW5kZXJMaW5lTnVtYmVyc1R5cGU7XHJcbihmdW5jdGlvbiAoUmVuZGVyTGluZU51bWJlcnNUeXBlKSB7XHJcbiAgICBSZW5kZXJMaW5lTnVtYmVyc1R5cGVbUmVuZGVyTGluZU51bWJlcnNUeXBlW1wiT2ZmXCJdID0gMF0gPSBcIk9mZlwiO1xyXG4gICAgUmVuZGVyTGluZU51bWJlcnNUeXBlW1JlbmRlckxpbmVOdW1iZXJzVHlwZVtcIk9uXCJdID0gMV0gPSBcIk9uXCI7XHJcbiAgICBSZW5kZXJMaW5lTnVtYmVyc1R5cGVbUmVuZGVyTGluZU51bWJlcnNUeXBlW1wiUmVsYXRpdmVcIl0gPSAyXSA9IFwiUmVsYXRpdmVcIjtcclxuICAgIFJlbmRlckxpbmVOdW1iZXJzVHlwZVtSZW5kZXJMaW5lTnVtYmVyc1R5cGVbXCJJbnRlcnZhbFwiXSA9IDNdID0gXCJJbnRlcnZhbFwiO1xyXG4gICAgUmVuZGVyTGluZU51bWJlcnNUeXBlW1JlbmRlckxpbmVOdW1iZXJzVHlwZVtcIkN1c3RvbVwiXSA9IDRdID0gXCJDdXN0b21cIjtcclxufSkoUmVuZGVyTGluZU51bWJlcnNUeXBlIHx8IChSZW5kZXJMaW5lTnVtYmVyc1R5cGUgPSB7fSkpO1xyXG5leHBvcnQgdmFyIFJlbmRlck1pbmltYXA7XHJcbihmdW5jdGlvbiAoUmVuZGVyTWluaW1hcCkge1xyXG4gICAgUmVuZGVyTWluaW1hcFtSZW5kZXJNaW5pbWFwW1wiTm9uZVwiXSA9IDBdID0gXCJOb25lXCI7XHJcbiAgICBSZW5kZXJNaW5pbWFwW1JlbmRlck1pbmltYXBbXCJUZXh0XCJdID0gMV0gPSBcIlRleHRcIjtcclxuICAgIFJlbmRlck1pbmltYXBbUmVuZGVyTWluaW1hcFtcIkJsb2Nrc1wiXSA9IDJdID0gXCJCbG9ja3NcIjtcclxufSkoUmVuZGVyTWluaW1hcCB8fCAoUmVuZGVyTWluaW1hcCA9IHt9KSk7XHJcbmV4cG9ydCB2YXIgU2Nyb2xsVHlwZTtcclxuKGZ1bmN0aW9uIChTY3JvbGxUeXBlKSB7XHJcbiAgICBTY3JvbGxUeXBlW1Njcm9sbFR5cGVbXCJTbW9vdGhcIl0gPSAwXSA9IFwiU21vb3RoXCI7XHJcbiAgICBTY3JvbGxUeXBlW1Njcm9sbFR5cGVbXCJJbW1lZGlhdGVcIl0gPSAxXSA9IFwiSW1tZWRpYXRlXCI7XHJcbn0pKFNjcm9sbFR5cGUgfHwgKFNjcm9sbFR5cGUgPSB7fSkpO1xyXG5leHBvcnQgdmFyIFNjcm9sbGJhclZpc2liaWxpdHk7XHJcbihmdW5jdGlvbiAoU2Nyb2xsYmFyVmlzaWJpbGl0eSkge1xyXG4gICAgU2Nyb2xsYmFyVmlzaWJpbGl0eVtTY3JvbGxiYXJWaXNpYmlsaXR5W1wiQXV0b1wiXSA9IDFdID0gXCJBdXRvXCI7XHJcbiAgICBTY3JvbGxiYXJWaXNpYmlsaXR5W1Njcm9sbGJhclZpc2liaWxpdHlbXCJIaWRkZW5cIl0gPSAyXSA9IFwiSGlkZGVuXCI7XHJcbiAgICBTY3JvbGxiYXJWaXNpYmlsaXR5W1Njcm9sbGJhclZpc2liaWxpdHlbXCJWaXNpYmxlXCJdID0gM10gPSBcIlZpc2libGVcIjtcclxufSkoU2Nyb2xsYmFyVmlzaWJpbGl0eSB8fCAoU2Nyb2xsYmFyVmlzaWJpbGl0eSA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgZGlyZWN0aW9uIG9mIGEgc2VsZWN0aW9uLlxyXG4gKi9cclxuZXhwb3J0IHZhciBTZWxlY3Rpb25EaXJlY3Rpb247XHJcbihmdW5jdGlvbiAoU2VsZWN0aW9uRGlyZWN0aW9uKSB7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBzZWxlY3Rpb24gc3RhcnRzIGFib3ZlIHdoZXJlIGl0IGVuZHMuXHJcbiAgICAgKi9cclxuICAgIFNlbGVjdGlvbkRpcmVjdGlvbltTZWxlY3Rpb25EaXJlY3Rpb25bXCJMVFJcIl0gPSAwXSA9IFwiTFRSXCI7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBzZWxlY3Rpb24gc3RhcnRzIGJlbG93IHdoZXJlIGl0IGVuZHMuXHJcbiAgICAgKi9cclxuICAgIFNlbGVjdGlvbkRpcmVjdGlvbltTZWxlY3Rpb25EaXJlY3Rpb25bXCJSVExcIl0gPSAxXSA9IFwiUlRMXCI7XHJcbn0pKFNlbGVjdGlvbkRpcmVjdGlvbiB8fCAoU2VsZWN0aW9uRGlyZWN0aW9uID0ge30pKTtcclxuZXhwb3J0IHZhciBTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmQ7XHJcbihmdW5jdGlvbiAoU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kKSB7XHJcbiAgICBTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmRbU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kW1wiSW52b2tlXCJdID0gMV0gPSBcIkludm9rZVwiO1xyXG4gICAgU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kW1NpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZFtcIlRyaWdnZXJDaGFyYWN0ZXJcIl0gPSAyXSA9IFwiVHJpZ2dlckNoYXJhY3RlclwiO1xyXG4gICAgU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kW1NpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZFtcIkNvbnRlbnRDaGFuZ2VcIl0gPSAzXSA9IFwiQ29udGVudENoYW5nZVwiO1xyXG59KShTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmQgfHwgKFNpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZCA9IHt9KSk7XHJcbi8qKlxyXG4gKiBBIHN5bWJvbCBraW5kLlxyXG4gKi9cclxuZXhwb3J0IHZhciBTeW1ib2xLaW5kO1xyXG4oZnVuY3Rpb24gKFN5bWJvbEtpbmQpIHtcclxuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIkZpbGVcIl0gPSAwXSA9IFwiRmlsZVwiO1xyXG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiTW9kdWxlXCJdID0gMV0gPSBcIk1vZHVsZVwiO1xyXG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiTmFtZXNwYWNlXCJdID0gMl0gPSBcIk5hbWVzcGFjZVwiO1xyXG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiUGFja2FnZVwiXSA9IDNdID0gXCJQYWNrYWdlXCI7XHJcbiAgICBTeW1ib2xLaW5kW1N5bWJvbEtpbmRbXCJDbGFzc1wiXSA9IDRdID0gXCJDbGFzc1wiO1xyXG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiTWV0aG9kXCJdID0gNV0gPSBcIk1ldGhvZFwiO1xyXG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiUHJvcGVydHlcIl0gPSA2XSA9IFwiUHJvcGVydHlcIjtcclxuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIkZpZWxkXCJdID0gN10gPSBcIkZpZWxkXCI7XHJcbiAgICBTeW1ib2xLaW5kW1N5bWJvbEtpbmRbXCJDb25zdHJ1Y3RvclwiXSA9IDhdID0gXCJDb25zdHJ1Y3RvclwiO1xyXG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiRW51bVwiXSA9IDldID0gXCJFbnVtXCI7XHJcbiAgICBTeW1ib2xLaW5kW1N5bWJvbEtpbmRbXCJJbnRlcmZhY2VcIl0gPSAxMF0gPSBcIkludGVyZmFjZVwiO1xyXG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiRnVuY3Rpb25cIl0gPSAxMV0gPSBcIkZ1bmN0aW9uXCI7XHJcbiAgICBTeW1ib2xLaW5kW1N5bWJvbEtpbmRbXCJWYXJpYWJsZVwiXSA9IDEyXSA9IFwiVmFyaWFibGVcIjtcclxuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIkNvbnN0YW50XCJdID0gMTNdID0gXCJDb25zdGFudFwiO1xyXG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiU3RyaW5nXCJdID0gMTRdID0gXCJTdHJpbmdcIjtcclxuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIk51bWJlclwiXSA9IDE1XSA9IFwiTnVtYmVyXCI7XHJcbiAgICBTeW1ib2xLaW5kW1N5bWJvbEtpbmRbXCJCb29sZWFuXCJdID0gMTZdID0gXCJCb29sZWFuXCI7XHJcbiAgICBTeW1ib2xLaW5kW1N5bWJvbEtpbmRbXCJBcnJheVwiXSA9IDE3XSA9IFwiQXJyYXlcIjtcclxuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIk9iamVjdFwiXSA9IDE4XSA9IFwiT2JqZWN0XCI7XHJcbiAgICBTeW1ib2xLaW5kW1N5bWJvbEtpbmRbXCJLZXlcIl0gPSAxOV0gPSBcIktleVwiO1xyXG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiTnVsbFwiXSA9IDIwXSA9IFwiTnVsbFwiO1xyXG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiRW51bU1lbWJlclwiXSA9IDIxXSA9IFwiRW51bU1lbWJlclwiO1xyXG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiU3RydWN0XCJdID0gMjJdID0gXCJTdHJ1Y3RcIjtcclxuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIkV2ZW50XCJdID0gMjNdID0gXCJFdmVudFwiO1xyXG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiT3BlcmF0b3JcIl0gPSAyNF0gPSBcIk9wZXJhdG9yXCI7XHJcbiAgICBTeW1ib2xLaW5kW1N5bWJvbEtpbmRbXCJUeXBlUGFyYW1ldGVyXCJdID0gMjVdID0gXCJUeXBlUGFyYW1ldGVyXCI7XHJcbn0pKFN5bWJvbEtpbmQgfHwgKFN5bWJvbEtpbmQgPSB7fSkpO1xyXG5leHBvcnQgdmFyIFN5bWJvbFRhZztcclxuKGZ1bmN0aW9uIChTeW1ib2xUYWcpIHtcclxuICAgIFN5bWJvbFRhZ1tTeW1ib2xUYWdbXCJEZXByZWNhdGVkXCJdID0gMV0gPSBcIkRlcHJlY2F0ZWRcIjtcclxufSkoU3ltYm9sVGFnIHx8IChTeW1ib2xUYWcgPSB7fSkpO1xyXG4vKipcclxuICogVGhlIGtpbmQgb2YgYW5pbWF0aW9uIGluIHdoaWNoIHRoZSBlZGl0b3IncyBjdXJzb3Igc2hvdWxkIGJlIHJlbmRlcmVkLlxyXG4gKi9cclxuZXhwb3J0IHZhciBUZXh0RWRpdG9yQ3Vyc29yQmxpbmtpbmdTdHlsZTtcclxuKGZ1bmN0aW9uIChUZXh0RWRpdG9yQ3Vyc29yQmxpbmtpbmdTdHlsZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBIaWRkZW5cclxuICAgICAqL1xyXG4gICAgVGV4dEVkaXRvckN1cnNvckJsaW5raW5nU3R5bGVbVGV4dEVkaXRvckN1cnNvckJsaW5raW5nU3R5bGVbXCJIaWRkZW5cIl0gPSAwXSA9IFwiSGlkZGVuXCI7XHJcbiAgICAvKipcclxuICAgICAqIEJsaW5raW5nXHJcbiAgICAgKi9cclxuICAgIFRleHRFZGl0b3JDdXJzb3JCbGlua2luZ1N0eWxlW1RleHRFZGl0b3JDdXJzb3JCbGlua2luZ1N0eWxlW1wiQmxpbmtcIl0gPSAxXSA9IFwiQmxpbmtcIjtcclxuICAgIC8qKlxyXG4gICAgICogQmxpbmtpbmcgd2l0aCBzbW9vdGggZmFkaW5nXHJcbiAgICAgKi9cclxuICAgIFRleHRFZGl0b3JDdXJzb3JCbGlua2luZ1N0eWxlW1RleHRFZGl0b3JDdXJzb3JCbGlua2luZ1N0eWxlW1wiU21vb3RoXCJdID0gMl0gPSBcIlNtb290aFwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBCbGlua2luZyB3aXRoIHByb2xvbmdlZCBmaWxsZWQgc3RhdGUgYW5kIHNtb290aCBmYWRpbmdcclxuICAgICAqL1xyXG4gICAgVGV4dEVkaXRvckN1cnNvckJsaW5raW5nU3R5bGVbVGV4dEVkaXRvckN1cnNvckJsaW5raW5nU3R5bGVbXCJQaGFzZVwiXSA9IDNdID0gXCJQaGFzZVwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBFeHBhbmQgY29sbGFwc2UgYW5pbWF0aW9uIG9uIHRoZSB5IGF4aXNcclxuICAgICAqL1xyXG4gICAgVGV4dEVkaXRvckN1cnNvckJsaW5raW5nU3R5bGVbVGV4dEVkaXRvckN1cnNvckJsaW5raW5nU3R5bGVbXCJFeHBhbmRcIl0gPSA0XSA9IFwiRXhwYW5kXCI7XHJcbiAgICAvKipcclxuICAgICAqIE5vLUJsaW5raW5nXHJcbiAgICAgKi9cclxuICAgIFRleHRFZGl0b3JDdXJzb3JCbGlua2luZ1N0eWxlW1RleHRFZGl0b3JDdXJzb3JCbGlua2luZ1N0eWxlW1wiU29saWRcIl0gPSA1XSA9IFwiU29saWRcIjtcclxufSkoVGV4dEVkaXRvckN1cnNvckJsaW5raW5nU3R5bGUgfHwgKFRleHRFZGl0b3JDdXJzb3JCbGlua2luZ1N0eWxlID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBzdHlsZSBpbiB3aGljaCB0aGUgZWRpdG9yJ3MgY3Vyc29yIHNob3VsZCBiZSByZW5kZXJlZC5cclxuICovXHJcbmV4cG9ydCB2YXIgVGV4dEVkaXRvckN1cnNvclN0eWxlO1xyXG4oZnVuY3Rpb24gKFRleHRFZGl0b3JDdXJzb3JTdHlsZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBBcyBhIHZlcnRpY2FsIGxpbmUgKHNpdHRpbmcgYmV0d2VlbiB0d28gY2hhcmFjdGVycykuXHJcbiAgICAgKi9cclxuICAgIFRleHRFZGl0b3JDdXJzb3JTdHlsZVtUZXh0RWRpdG9yQ3Vyc29yU3R5bGVbXCJMaW5lXCJdID0gMV0gPSBcIkxpbmVcIjtcclxuICAgIC8qKlxyXG4gICAgICogQXMgYSBibG9jayAoc2l0dGluZyBvbiB0b3Agb2YgYSBjaGFyYWN0ZXIpLlxyXG4gICAgICovXHJcbiAgICBUZXh0RWRpdG9yQ3Vyc29yU3R5bGVbVGV4dEVkaXRvckN1cnNvclN0eWxlW1wiQmxvY2tcIl0gPSAyXSA9IFwiQmxvY2tcIjtcclxuICAgIC8qKlxyXG4gICAgICogQXMgYSBob3Jpem9udGFsIGxpbmUgKHNpdHRpbmcgdW5kZXIgYSBjaGFyYWN0ZXIpLlxyXG4gICAgICovXHJcbiAgICBUZXh0RWRpdG9yQ3Vyc29yU3R5bGVbVGV4dEVkaXRvckN1cnNvclN0eWxlW1wiVW5kZXJsaW5lXCJdID0gM10gPSBcIlVuZGVybGluZVwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBcyBhIHRoaW4gdmVydGljYWwgbGluZSAoc2l0dGluZyBiZXR3ZWVuIHR3byBjaGFyYWN0ZXJzKS5cclxuICAgICAqL1xyXG4gICAgVGV4dEVkaXRvckN1cnNvclN0eWxlW1RleHRFZGl0b3JDdXJzb3JTdHlsZVtcIkxpbmVUaGluXCJdID0gNF0gPSBcIkxpbmVUaGluXCI7XHJcbiAgICAvKipcclxuICAgICAqIEFzIGFuIG91dGxpbmVkIGJsb2NrIChzaXR0aW5nIG9uIHRvcCBvZiBhIGNoYXJhY3RlcikuXHJcbiAgICAgKi9cclxuICAgIFRleHRFZGl0b3JDdXJzb3JTdHlsZVtUZXh0RWRpdG9yQ3Vyc29yU3R5bGVbXCJCbG9ja091dGxpbmVcIl0gPSA1XSA9IFwiQmxvY2tPdXRsaW5lXCI7XHJcbiAgICAvKipcclxuICAgICAqIEFzIGEgdGhpbiBob3Jpem9udGFsIGxpbmUgKHNpdHRpbmcgdW5kZXIgYSBjaGFyYWN0ZXIpLlxyXG4gICAgICovXHJcbiAgICBUZXh0RWRpdG9yQ3Vyc29yU3R5bGVbVGV4dEVkaXRvckN1cnNvclN0eWxlW1wiVW5kZXJsaW5lVGhpblwiXSA9IDZdID0gXCJVbmRlcmxpbmVUaGluXCI7XHJcbn0pKFRleHRFZGl0b3JDdXJzb3JTdHlsZSB8fCAoVGV4dEVkaXRvckN1cnNvclN0eWxlID0ge30pKTtcclxuLyoqXHJcbiAqIERlc2NyaWJlcyB0aGUgYmVoYXZpb3Igb2YgZGVjb3JhdGlvbnMgd2hlbiB0eXBpbmcvZWRpdGluZyBuZWFyIHRoZWlyIGVkZ2VzLlxyXG4gKiBOb3RlOiBQbGVhc2UgZG8gbm90IGVkaXQgdGhlIHZhbHVlcywgYXMgdGhleSB2ZXJ5IGNhcmVmdWxseSBtYXRjaCBgRGVjb3JhdGlvblJhbmdlQmVoYXZpb3JgXHJcbiAqL1xyXG5leHBvcnQgdmFyIFRyYWNrZWRSYW5nZVN0aWNraW5lc3M7XHJcbihmdW5jdGlvbiAoVHJhY2tlZFJhbmdlU3RpY2tpbmVzcykge1xyXG4gICAgVHJhY2tlZFJhbmdlU3RpY2tpbmVzc1tUcmFja2VkUmFuZ2VTdGlja2luZXNzW1wiQWx3YXlzR3Jvd3NXaGVuVHlwaW5nQXRFZGdlc1wiXSA9IDBdID0gXCJBbHdheXNHcm93c1doZW5UeXBpbmdBdEVkZ2VzXCI7XHJcbiAgICBUcmFja2VkUmFuZ2VTdGlja2luZXNzW1RyYWNrZWRSYW5nZVN0aWNraW5lc3NbXCJOZXZlckdyb3dzV2hlblR5cGluZ0F0RWRnZXNcIl0gPSAxXSA9IFwiTmV2ZXJHcm93c1doZW5UeXBpbmdBdEVkZ2VzXCI7XHJcbiAgICBUcmFja2VkUmFuZ2VTdGlja2luZXNzW1RyYWNrZWRSYW5nZVN0aWNraW5lc3NbXCJHcm93c09ubHlXaGVuVHlwaW5nQmVmb3JlXCJdID0gMl0gPSBcIkdyb3dzT25seVdoZW5UeXBpbmdCZWZvcmVcIjtcclxuICAgIFRyYWNrZWRSYW5nZVN0aWNraW5lc3NbVHJhY2tlZFJhbmdlU3RpY2tpbmVzc1tcIkdyb3dzT25seVdoZW5UeXBpbmdBZnRlclwiXSA9IDNdID0gXCJHcm93c09ubHlXaGVuVHlwaW5nQWZ0ZXJcIjtcclxufSkoVHJhY2tlZFJhbmdlU3RpY2tpbmVzcyB8fCAoVHJhY2tlZFJhbmdlU3RpY2tpbmVzcyA9IHt9KSk7XHJcbi8qKlxyXG4gKiBEZXNjcmliZXMgaG93IHRvIGluZGVudCB3cmFwcGVkIGxpbmVzLlxyXG4gKi9cclxuZXhwb3J0IHZhciBXcmFwcGluZ0luZGVudDtcclxuKGZ1bmN0aW9uIChXcmFwcGluZ0luZGVudCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBObyBpbmRlbnRhdGlvbiA9PiB3cmFwcGVkIGxpbmVzIGJlZ2luIGF0IGNvbHVtbiAxLlxyXG4gICAgICovXHJcbiAgICBXcmFwcGluZ0luZGVudFtXcmFwcGluZ0luZGVudFtcIk5vbmVcIl0gPSAwXSA9IFwiTm9uZVwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTYW1lID0+IHdyYXBwZWQgbGluZXMgZ2V0IHRoZSBzYW1lIGluZGVudGF0aW9uIGFzIHRoZSBwYXJlbnQuXHJcbiAgICAgKi9cclxuICAgIFdyYXBwaW5nSW5kZW50W1dyYXBwaW5nSW5kZW50W1wiU2FtZVwiXSA9IDFdID0gXCJTYW1lXCI7XHJcbiAgICAvKipcclxuICAgICAqIEluZGVudCA9PiB3cmFwcGVkIGxpbmVzIGdldCArMSBpbmRlbnRhdGlvbiB0b3dhcmQgdGhlIHBhcmVudC5cclxuICAgICAqL1xyXG4gICAgV3JhcHBpbmdJbmRlbnRbV3JhcHBpbmdJbmRlbnRbXCJJbmRlbnRcIl0gPSAyXSA9IFwiSW5kZW50XCI7XHJcbiAgICAvKipcclxuICAgICAqIERlZXBJbmRlbnQgPT4gd3JhcHBlZCBsaW5lcyBnZXQgKzIgaW5kZW50YXRpb24gdG93YXJkIHRoZSBwYXJlbnQuXHJcbiAgICAgKi9cclxuICAgIFdyYXBwaW5nSW5kZW50W1dyYXBwaW5nSW5kZW50W1wiRGVlcEluZGVudFwiXSA9IDNdID0gXCJEZWVwSW5kZW50XCI7XHJcbn0pKFdyYXBwaW5nSW5kZW50IHx8IChXcmFwcGluZ0luZGVudCA9IHt9KSk7XHJcbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5pbXBvcnQgeyBQb3NpdGlvbiB9IGZyb20gJy4vcG9zaXRpb24uanMnO1xyXG5pbXBvcnQgeyBSYW5nZSB9IGZyb20gJy4vcmFuZ2UuanMnO1xyXG4vKipcclxuICogQSBzZWxlY3Rpb24gaW4gdGhlIGVkaXRvci5cclxuICogVGhlIHNlbGVjdGlvbiBpcyBhIHJhbmdlIHRoYXQgaGFzIGFuIG9yaWVudGF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNlbGVjdGlvbiBleHRlbmRzIFJhbmdlIHtcclxuICAgIGNvbnN0cnVjdG9yKHNlbGVjdGlvblN0YXJ0TGluZU51bWJlciwgc2VsZWN0aW9uU3RhcnRDb2x1bW4sIHBvc2l0aW9uTGluZU51bWJlciwgcG9zaXRpb25Db2x1bW4pIHtcclxuICAgICAgICBzdXBlcihzZWxlY3Rpb25TdGFydExpbmVOdW1iZXIsIHNlbGVjdGlvblN0YXJ0Q29sdW1uLCBwb3NpdGlvbkxpbmVOdW1iZXIsIHBvc2l0aW9uQ29sdW1uKTtcclxuICAgICAgICB0aGlzLnNlbGVjdGlvblN0YXJ0TGluZU51bWJlciA9IHNlbGVjdGlvblN0YXJ0TGluZU51bWJlcjtcclxuICAgICAgICB0aGlzLnNlbGVjdGlvblN0YXJ0Q29sdW1uID0gc2VsZWN0aW9uU3RhcnRDb2x1bW47XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbkxpbmVOdW1iZXIgPSBwb3NpdGlvbkxpbmVOdW1iZXI7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbkNvbHVtbiA9IHBvc2l0aW9uQ29sdW1uO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmFuc2Zvcm0gdG8gYSBodW1hbi1yZWFkYWJsZSByZXByZXNlbnRhdGlvbi5cclxuICAgICAqL1xyXG4gICAgdG9TdHJpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuICdbJyArIHRoaXMuc2VsZWN0aW9uU3RhcnRMaW5lTnVtYmVyICsgJywnICsgdGhpcy5zZWxlY3Rpb25TdGFydENvbHVtbiArICcgLT4gJyArIHRoaXMucG9zaXRpb25MaW5lTnVtYmVyICsgJywnICsgdGhpcy5wb3NpdGlvbkNvbHVtbiArICddJztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGVzdCBpZiBlcXVhbHMgb3RoZXIgc2VsZWN0aW9uLlxyXG4gICAgICovXHJcbiAgICBlcXVhbHNTZWxlY3Rpb24ob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gKFNlbGVjdGlvbi5zZWxlY3Rpb25zRXF1YWwodGhpcywgb3RoZXIpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGVzdCBpZiB0aGUgdHdvIHNlbGVjdGlvbnMgYXJlIGVxdWFsLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgc2VsZWN0aW9uc0VxdWFsKGEsIGIpIHtcclxuICAgICAgICByZXR1cm4gKGEuc2VsZWN0aW9uU3RhcnRMaW5lTnVtYmVyID09PSBiLnNlbGVjdGlvblN0YXJ0TGluZU51bWJlciAmJlxyXG4gICAgICAgICAgICBhLnNlbGVjdGlvblN0YXJ0Q29sdW1uID09PSBiLnNlbGVjdGlvblN0YXJ0Q29sdW1uICYmXHJcbiAgICAgICAgICAgIGEucG9zaXRpb25MaW5lTnVtYmVyID09PSBiLnBvc2l0aW9uTGluZU51bWJlciAmJlxyXG4gICAgICAgICAgICBhLnBvc2l0aW9uQ29sdW1uID09PSBiLnBvc2l0aW9uQ29sdW1uKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGRpcmVjdGlvbnMgKExUUiBvciBSVEwpLlxyXG4gICAgICovXHJcbiAgICBnZXREaXJlY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uU3RhcnRMaW5lTnVtYmVyID09PSB0aGlzLnN0YXJ0TGluZU51bWJlciAmJiB0aGlzLnNlbGVjdGlvblN0YXJ0Q29sdW1uID09PSB0aGlzLnN0YXJ0Q29sdW1uKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwIC8qIExUUiAqLztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDEgLyogUlRMICovO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBuZXcgc2VsZWN0aW9uIHdpdGggYSBkaWZmZXJlbnQgYHBvc2l0aW9uTGluZU51bWJlcmAgYW5kIGBwb3NpdGlvbkNvbHVtbmAuXHJcbiAgICAgKi9cclxuICAgIHNldEVuZFBvc2l0aW9uKGVuZExpbmVOdW1iZXIsIGVuZENvbHVtbikge1xyXG4gICAgICAgIGlmICh0aGlzLmdldERpcmVjdGlvbigpID09PSAwIC8qIExUUiAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLnN0YXJ0TGluZU51bWJlciwgdGhpcy5zdGFydENvbHVtbiwgZW5kTGluZU51bWJlciwgZW5kQ29sdW1uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oZW5kTGluZU51bWJlciwgZW5kQ29sdW1uLCB0aGlzLnN0YXJ0TGluZU51bWJlciwgdGhpcy5zdGFydENvbHVtbik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgcG9zaXRpb24gYXQgYHBvc2l0aW9uTGluZU51bWJlcmAgYW5kIGBwb3NpdGlvbkNvbHVtbmAuXHJcbiAgICAgKi9cclxuICAgIGdldFBvc2l0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUG9zaXRpb24odGhpcy5wb3NpdGlvbkxpbmVOdW1iZXIsIHRoaXMucG9zaXRpb25Db2x1bW4pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBuZXcgc2VsZWN0aW9uIHdpdGggYSBkaWZmZXJlbnQgYHNlbGVjdGlvblN0YXJ0TGluZU51bWJlcmAgYW5kIGBzZWxlY3Rpb25TdGFydENvbHVtbmAuXHJcbiAgICAgKi9cclxuICAgIHNldFN0YXJ0UG9zaXRpb24oc3RhcnRMaW5lTnVtYmVyLCBzdGFydENvbHVtbikge1xyXG4gICAgICAgIGlmICh0aGlzLmdldERpcmVjdGlvbigpID09PSAwIC8qIExUUiAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdGFydExpbmVOdW1iZXIsIHN0YXJ0Q29sdW1uLCB0aGlzLmVuZExpbmVOdW1iZXIsIHRoaXMuZW5kQ29sdW1uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5lbmRMaW5lTnVtYmVyLCB0aGlzLmVuZENvbHVtbiwgc3RhcnRMaW5lTnVtYmVyLCBzdGFydENvbHVtbik7XHJcbiAgICB9XHJcbiAgICAvLyAtLS0tXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhIGBTZWxlY3Rpb25gIGZyb20gb25lIG9yIHR3byBwb3NpdGlvbnNcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGZyb21Qb3NpdGlvbnMoc3RhcnQsIGVuZCA9IHN0YXJ0KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3RhcnQubGluZU51bWJlciwgc3RhcnQuY29sdW1uLCBlbmQubGluZU51bWJlciwgZW5kLmNvbHVtbik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhIGBTZWxlY3Rpb25gIGZyb20gYW4gYElTZWxlY3Rpb25gLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgbGlmdFNlbGVjdGlvbihzZWwpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFNlbGVjdGlvbihzZWwuc2VsZWN0aW9uU3RhcnRMaW5lTnVtYmVyLCBzZWwuc2VsZWN0aW9uU3RhcnRDb2x1bW4sIHNlbC5wb3NpdGlvbkxpbmVOdW1iZXIsIHNlbC5wb3NpdGlvbkNvbHVtbik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGBhYCBlcXVhbHMgYGJgLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgc2VsZWN0aW9uc0FyckVxdWFsKGEsIGIpIHtcclxuICAgICAgICBpZiAoYSAmJiAhYiB8fCAhYSAmJiBiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFhICYmICFiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGEubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnNlbGVjdGlvbnNFcXVhbChhW2ldLCBiW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0IGlmIGBvYmpgIGlzIGFuIGBJU2VsZWN0aW9uYC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGlzSVNlbGVjdGlvbihvYmopIHtcclxuICAgICAgICByZXR1cm4gKG9ialxyXG4gICAgICAgICAgICAmJiAodHlwZW9mIG9iai5zZWxlY3Rpb25TdGFydExpbmVOdW1iZXIgPT09ICdudW1iZXInKVxyXG4gICAgICAgICAgICAmJiAodHlwZW9mIG9iai5zZWxlY3Rpb25TdGFydENvbHVtbiA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgICAgICYmICh0eXBlb2Ygb2JqLnBvc2l0aW9uTGluZU51bWJlciA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgICAgICYmICh0eXBlb2Ygb2JqLnBvc2l0aW9uQ29sdW1uID09PSAnbnVtYmVyJykpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgd2l0aCBhIGRpcmVjdGlvbi5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWF0ZVdpdGhEaXJlY3Rpb24oc3RhcnRMaW5lTnVtYmVyLCBzdGFydENvbHVtbiwgZW5kTGluZU51bWJlciwgZW5kQ29sdW1uLCBkaXJlY3Rpb24pIHtcclxuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAwIC8qIExUUiAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdGFydExpbmVOdW1iZXIsIHN0YXJ0Q29sdW1uLCBlbmRMaW5lTnVtYmVyLCBlbmRDb2x1bW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFNlbGVjdGlvbihlbmRMaW5lTnVtYmVyLCBlbmRDb2x1bW4sIHN0YXJ0TGluZU51bWJlciwgc3RhcnRDb2x1bW4pO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5pbXBvcnQgeyBDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL2NhbmNlbGxhdGlvbi5qcyc7XHJcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi9ldmVudC5qcyc7XHJcbmltcG9ydCB7IEtleUNob3JkIH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24va2V5Q29kZXMuanMnO1xyXG5pbXBvcnQgeyBVUkkgfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi91cmkuanMnO1xyXG5pbXBvcnQgeyBQb3NpdGlvbiB9IGZyb20gJy4uL2NvcmUvcG9zaXRpb24uanMnO1xyXG5pbXBvcnQgeyBSYW5nZSB9IGZyb20gJy4uL2NvcmUvcmFuZ2UuanMnO1xyXG5pbXBvcnQgeyBTZWxlY3Rpb24gfSBmcm9tICcuLi9jb3JlL3NlbGVjdGlvbi5qcyc7XHJcbmltcG9ydCB7IFRva2VuIH0gZnJvbSAnLi4vY29yZS90b2tlbi5qcyc7XHJcbmltcG9ydCAqIGFzIHN0YW5kYWxvbmVFbnVtcyBmcm9tICcuL3N0YW5kYWxvbmVFbnVtcy5qcyc7XHJcbmV4cG9ydCBjbGFzcyBLZXlNb2Qge1xyXG4gICAgc3RhdGljIGNob3JkKGZpcnN0UGFydCwgc2Vjb25kUGFydCkge1xyXG4gICAgICAgIHJldHVybiBLZXlDaG9yZChmaXJzdFBhcnQsIHNlY29uZFBhcnQpO1xyXG4gICAgfVxyXG59XHJcbktleU1vZC5DdHJsQ21kID0gMjA0OCAvKiBDdHJsQ21kICovO1xyXG5LZXlNb2QuU2hpZnQgPSAxMDI0IC8qIFNoaWZ0ICovO1xyXG5LZXlNb2QuQWx0ID0gNTEyIC8qIEFsdCAqLztcclxuS2V5TW9kLldpbkN0cmwgPSAyNTYgLyogV2luQ3RybCAqLztcclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1vbmFjb0Jhc2VBUEkoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGVkaXRvcjogdW5kZWZpbmVkLFxyXG4gICAgICAgIGxhbmd1YWdlczogdW5kZWZpbmVkLFxyXG4gICAgICAgIENhbmNlbGxhdGlvblRva2VuU291cmNlOiBDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSxcclxuICAgICAgICBFbWl0dGVyOiBFbWl0dGVyLFxyXG4gICAgICAgIEtleUNvZGU6IHN0YW5kYWxvbmVFbnVtcy5LZXlDb2RlLFxyXG4gICAgICAgIEtleU1vZDogS2V5TW9kLFxyXG4gICAgICAgIFBvc2l0aW9uOiBQb3NpdGlvbixcclxuICAgICAgICBSYW5nZTogUmFuZ2UsXHJcbiAgICAgICAgU2VsZWN0aW9uOiBTZWxlY3Rpb24sXHJcbiAgICAgICAgU2VsZWN0aW9uRGlyZWN0aW9uOiBzdGFuZGFsb25lRW51bXMuU2VsZWN0aW9uRGlyZWN0aW9uLFxyXG4gICAgICAgIE1hcmtlclNldmVyaXR5OiBzdGFuZGFsb25lRW51bXMuTWFya2VyU2V2ZXJpdHksXHJcbiAgICAgICAgTWFya2VyVGFnOiBzdGFuZGFsb25lRW51bXMuTWFya2VyVGFnLFxyXG4gICAgICAgIFVyaTogVVJJLFxyXG4gICAgICAgIFRva2VuOiBUb2tlblxyXG4gICAgfTtcclxufVxyXG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG5pbXBvcnQgeyBzdHJpbmdEaWZmIH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vZGlmZi9kaWZmLmpzJztcclxuaW1wb3J0IHsgZ2xvYmFscyB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL3BsYXRmb3JtLmpzJztcclxuaW1wb3J0IHsgVVJJIH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vdXJpLmpzJztcclxuaW1wb3J0IHsgUG9zaXRpb24gfSBmcm9tICcuLi9jb3JlL3Bvc2l0aW9uLmpzJztcclxuaW1wb3J0IHsgUmFuZ2UgfSBmcm9tICcuLi9jb3JlL3JhbmdlLmpzJztcclxuaW1wb3J0IHsgRGlmZkNvbXB1dGVyIH0gZnJvbSAnLi4vZGlmZi9kaWZmQ29tcHV0ZXIuanMnO1xyXG5pbXBvcnQgeyBNaXJyb3JUZXh0TW9kZWwgYXMgQmFzZU1pcnJvck1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvbWlycm9yVGV4dE1vZGVsLmpzJztcclxuaW1wb3J0IHsgZW5zdXJlVmFsaWRXb3JkRGVmaW5pdGlvbiwgZ2V0V29yZEF0VGV4dCB9IGZyb20gJy4uL21vZGVsL3dvcmRIZWxwZXIuanMnO1xyXG5pbXBvcnQgeyBjb21wdXRlTGlua3MgfSBmcm9tICcuLi9tb2Rlcy9saW5rQ29tcHV0ZXIuanMnO1xyXG5pbXBvcnQgeyBCYXNpY0lucGxhY2VSZXBsYWNlIH0gZnJvbSAnLi4vbW9kZXMvc3VwcG9ydHMvaW5wbGFjZVJlcGxhY2VTdXBwb3J0LmpzJztcclxuaW1wb3J0IHsgY3JlYXRlTW9uYWNvQmFzZUFQSSB9IGZyb20gJy4uL3N0YW5kYWxvbmUvc3RhbmRhbG9uZUJhc2UuanMnO1xyXG5pbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi90eXBlcy5qcyc7XHJcbmltcG9ydCB7IFN0b3BXYXRjaCB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL3N0b3B3YXRjaC5qcyc7XHJcbi8qKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmNsYXNzIE1pcnJvck1vZGVsIGV4dGVuZHMgQmFzZU1pcnJvck1vZGVsIHtcclxuICAgIGdldCB1cmkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VyaTtcclxuICAgIH1cclxuICAgIGdldCBlb2woKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VvbDtcclxuICAgIH1cclxuICAgIGdldFZhbHVlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFRleHQoKTtcclxuICAgIH1cclxuICAgIGdldExpbmVzQ29udGVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbGluZXMuc2xpY2UoMCk7XHJcbiAgICB9XHJcbiAgICBnZXRMaW5lQ291bnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpbmVzLmxlbmd0aDtcclxuICAgIH1cclxuICAgIGdldExpbmVDb250ZW50KGxpbmVOdW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbGluZXNbbGluZU51bWJlciAtIDFdO1xyXG4gICAgfVxyXG4gICAgZ2V0V29yZEF0UG9zaXRpb24ocG9zaXRpb24sIHdvcmREZWZpbml0aW9uKSB7XHJcbiAgICAgICAgbGV0IHdvcmRBdFRleHQgPSBnZXRXb3JkQXRUZXh0KHBvc2l0aW9uLmNvbHVtbiwgZW5zdXJlVmFsaWRXb3JkRGVmaW5pdGlvbih3b3JkRGVmaW5pdGlvbiksIHRoaXMuX2xpbmVzW3Bvc2l0aW9uLmxpbmVOdW1iZXIgLSAxXSwgMCk7XHJcbiAgICAgICAgaWYgKHdvcmRBdFRleHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSYW5nZShwb3NpdGlvbi5saW5lTnVtYmVyLCB3b3JkQXRUZXh0LnN0YXJ0Q29sdW1uLCBwb3NpdGlvbi5saW5lTnVtYmVyLCB3b3JkQXRUZXh0LmVuZENvbHVtbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgd29yZHMod29yZERlZmluaXRpb24pIHtcclxuICAgICAgICBjb25zdCBsaW5lcyA9IHRoaXMuX2xpbmVzO1xyXG4gICAgICAgIGNvbnN0IHdvcmRlbml6ZSA9IHRoaXMuX3dvcmRlbml6ZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIGxldCBsaW5lTnVtYmVyID0gMDtcclxuICAgICAgICBsZXQgbGluZVRleHQgPSAnJztcclxuICAgICAgICBsZXQgd29yZFJhbmdlc0lkeCA9IDA7XHJcbiAgICAgICAgbGV0IHdvcmRSYW5nZXMgPSBbXTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3b3JkUmFuZ2VzSWR4IDwgd29yZFJhbmdlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBsaW5lVGV4dC5zdWJzdHJpbmcod29yZFJhbmdlc1t3b3JkUmFuZ2VzSWR4XS5zdGFydCwgd29yZFJhbmdlc1t3b3JkUmFuZ2VzSWR4XS5lbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JkUmFuZ2VzSWR4ICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVOdW1iZXIgPCBsaW5lcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVUZXh0ID0gbGluZXNbbGluZU51bWJlcl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JkUmFuZ2VzID0gd29yZGVuaXplKGxpbmVUZXh0LCB3b3JkRGVmaW5pdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JkUmFuZ2VzSWR4ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXIgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGdldExpbmVXb3JkcyhsaW5lTnVtYmVyLCB3b3JkRGVmaW5pdGlvbikge1xyXG4gICAgICAgIGxldCBjb250ZW50ID0gdGhpcy5fbGluZXNbbGluZU51bWJlciAtIDFdO1xyXG4gICAgICAgIGxldCByYW5nZXMgPSB0aGlzLl93b3JkZW5pemUoY29udGVudCwgd29yZERlZmluaXRpb24pO1xyXG4gICAgICAgIGxldCB3b3JkcyA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgcmFuZ2Ugb2YgcmFuZ2VzKSB7XHJcbiAgICAgICAgICAgIHdvcmRzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgd29yZDogY29udGVudC5zdWJzdHJpbmcocmFuZ2Uuc3RhcnQsIHJhbmdlLmVuZCksXHJcbiAgICAgICAgICAgICAgICBzdGFydENvbHVtbjogcmFuZ2Uuc3RhcnQgKyAxLFxyXG4gICAgICAgICAgICAgICAgZW5kQ29sdW1uOiByYW5nZS5lbmQgKyAxXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gd29yZHM7XHJcbiAgICB9XHJcbiAgICBfd29yZGVuaXplKGNvbnRlbnQsIHdvcmREZWZpbml0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XHJcbiAgICAgICAgbGV0IG1hdGNoO1xyXG4gICAgICAgIHdvcmREZWZpbml0aW9uLmxhc3RJbmRleCA9IDA7IC8vIHJlc2V0IGxhc3RJbmRleCBqdXN0IHRvIGJlIHN1cmVcclxuICAgICAgICB3aGlsZSAobWF0Y2ggPSB3b3JkRGVmaW5pdGlvbi5leGVjKGNvbnRlbnQpKSB7XHJcbiAgICAgICAgICAgIGlmIChtYXRjaFswXS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIGl0IGRpZCBtYXRjaCB0aGUgZW1wdHkgc3RyaW5nXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXN1bHQucHVzaCh7IHN0YXJ0OiBtYXRjaC5pbmRleCwgZW5kOiBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIGdldFZhbHVlSW5SYW5nZShyYW5nZSkge1xyXG4gICAgICAgIHJhbmdlID0gdGhpcy5fdmFsaWRhdGVSYW5nZShyYW5nZSk7XHJcbiAgICAgICAgaWYgKHJhbmdlLnN0YXJ0TGluZU51bWJlciA9PT0gcmFuZ2UuZW5kTGluZU51bWJlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGluZXNbcmFuZ2Uuc3RhcnRMaW5lTnVtYmVyIC0gMV0uc3Vic3RyaW5nKHJhbmdlLnN0YXJ0Q29sdW1uIC0gMSwgcmFuZ2UuZW5kQ29sdW1uIC0gMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBsaW5lRW5kaW5nID0gdGhpcy5fZW9sO1xyXG4gICAgICAgIGxldCBzdGFydExpbmVJbmRleCA9IHJhbmdlLnN0YXJ0TGluZU51bWJlciAtIDE7XHJcbiAgICAgICAgbGV0IGVuZExpbmVJbmRleCA9IHJhbmdlLmVuZExpbmVOdW1iZXIgLSAxO1xyXG4gICAgICAgIGxldCByZXN1bHRMaW5lcyA9IFtdO1xyXG4gICAgICAgIHJlc3VsdExpbmVzLnB1c2godGhpcy5fbGluZXNbc3RhcnRMaW5lSW5kZXhdLnN1YnN0cmluZyhyYW5nZS5zdGFydENvbHVtbiAtIDEpKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnRMaW5lSW5kZXggKyAxOyBpIDwgZW5kTGluZUluZGV4OyBpKyspIHtcclxuICAgICAgICAgICAgcmVzdWx0TGluZXMucHVzaCh0aGlzLl9saW5lc1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlc3VsdExpbmVzLnB1c2godGhpcy5fbGluZXNbZW5kTGluZUluZGV4XS5zdWJzdHJpbmcoMCwgcmFuZ2UuZW5kQ29sdW1uIC0gMSkpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHRMaW5lcy5qb2luKGxpbmVFbmRpbmcpO1xyXG4gICAgfVxyXG4gICAgb2Zmc2V0QXQocG9zaXRpb24pIHtcclxuICAgICAgICBwb3NpdGlvbiA9IHRoaXMuX3ZhbGlkYXRlUG9zaXRpb24ocG9zaXRpb24pO1xyXG4gICAgICAgIHRoaXMuX2Vuc3VyZUxpbmVTdGFydHMoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbGluZVN0YXJ0cy5nZXRBY2N1bXVsYXRlZFZhbHVlKHBvc2l0aW9uLmxpbmVOdW1iZXIgLSAyKSArIChwb3NpdGlvbi5jb2x1bW4gLSAxKTtcclxuICAgIH1cclxuICAgIHBvc2l0aW9uQXQob2Zmc2V0KSB7XHJcbiAgICAgICAgb2Zmc2V0ID0gTWF0aC5mbG9vcihvZmZzZXQpO1xyXG4gICAgICAgIG9mZnNldCA9IE1hdGgubWF4KDAsIG9mZnNldCk7XHJcbiAgICAgICAgdGhpcy5fZW5zdXJlTGluZVN0YXJ0cygpO1xyXG4gICAgICAgIGxldCBvdXQgPSB0aGlzLl9saW5lU3RhcnRzLmdldEluZGV4T2Yob2Zmc2V0KTtcclxuICAgICAgICBsZXQgbGluZUxlbmd0aCA9IHRoaXMuX2xpbmVzW291dC5pbmRleF0ubGVuZ3RoO1xyXG4gICAgICAgIC8vIEVuc3VyZSB3ZSByZXR1cm4gYSB2YWxpZCBwb3NpdGlvblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGxpbmVOdW1iZXI6IDEgKyBvdXQuaW5kZXgsXHJcbiAgICAgICAgICAgIGNvbHVtbjogMSArIE1hdGgubWluKG91dC5yZW1haW5kZXIsIGxpbmVMZW5ndGgpXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIF92YWxpZGF0ZVJhbmdlKHJhbmdlKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhcnQgPSB0aGlzLl92YWxpZGF0ZVBvc2l0aW9uKHsgbGluZU51bWJlcjogcmFuZ2Uuc3RhcnRMaW5lTnVtYmVyLCBjb2x1bW46IHJhbmdlLnN0YXJ0Q29sdW1uIH0pO1xyXG4gICAgICAgIGNvbnN0IGVuZCA9IHRoaXMuX3ZhbGlkYXRlUG9zaXRpb24oeyBsaW5lTnVtYmVyOiByYW5nZS5lbmRMaW5lTnVtYmVyLCBjb2x1bW46IHJhbmdlLmVuZENvbHVtbiB9KTtcclxuICAgICAgICBpZiAoc3RhcnQubGluZU51bWJlciAhPT0gcmFuZ2Uuc3RhcnRMaW5lTnVtYmVyXHJcbiAgICAgICAgICAgIHx8IHN0YXJ0LmNvbHVtbiAhPT0gcmFuZ2Uuc3RhcnRDb2x1bW5cclxuICAgICAgICAgICAgfHwgZW5kLmxpbmVOdW1iZXIgIT09IHJhbmdlLmVuZExpbmVOdW1iZXJcclxuICAgICAgICAgICAgfHwgZW5kLmNvbHVtbiAhPT0gcmFuZ2UuZW5kQ29sdW1uKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBzdGFydExpbmVOdW1iZXI6IHN0YXJ0LmxpbmVOdW1iZXIsXHJcbiAgICAgICAgICAgICAgICBzdGFydENvbHVtbjogc3RhcnQuY29sdW1uLFxyXG4gICAgICAgICAgICAgICAgZW5kTGluZU51bWJlcjogZW5kLmxpbmVOdW1iZXIsXHJcbiAgICAgICAgICAgICAgICBlbmRDb2x1bW46IGVuZC5jb2x1bW5cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJhbmdlO1xyXG4gICAgfVxyXG4gICAgX3ZhbGlkYXRlUG9zaXRpb24ocG9zaXRpb24pIHtcclxuICAgICAgICBpZiAoIVBvc2l0aW9uLmlzSVBvc2l0aW9uKHBvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBwb3NpdGlvbicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgeyBsaW5lTnVtYmVyLCBjb2x1bW4gfSA9IHBvc2l0aW9uO1xyXG4gICAgICAgIGxldCBoYXNDaGFuZ2VkID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKGxpbmVOdW1iZXIgPCAxKSB7XHJcbiAgICAgICAgICAgIGxpbmVOdW1iZXIgPSAxO1xyXG4gICAgICAgICAgICBjb2x1bW4gPSAxO1xyXG4gICAgICAgICAgICBoYXNDaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobGluZU51bWJlciA+IHRoaXMuX2xpbmVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBsaW5lTnVtYmVyID0gdGhpcy5fbGluZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb2x1bW4gPSB0aGlzLl9saW5lc1tsaW5lTnVtYmVyIC0gMV0ubGVuZ3RoICsgMTtcclxuICAgICAgICAgICAgaGFzQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgbWF4Q2hhcmFjdGVyID0gdGhpcy5fbGluZXNbbGluZU51bWJlciAtIDFdLmxlbmd0aCArIDE7XHJcbiAgICAgICAgICAgIGlmIChjb2x1bW4gPCAxKSB7XHJcbiAgICAgICAgICAgICAgICBjb2x1bW4gPSAxO1xyXG4gICAgICAgICAgICAgICAgaGFzQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY29sdW1uID4gbWF4Q2hhcmFjdGVyKSB7XHJcbiAgICAgICAgICAgICAgICBjb2x1bW4gPSBtYXhDaGFyYWN0ZXI7XHJcbiAgICAgICAgICAgICAgICBoYXNDaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWhhc0NoYW5nZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgbGluZU51bWJlciwgY29sdW1uIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmV4cG9ydCBjbGFzcyBFZGl0b3JTaW1wbGVXb3JrZXIge1xyXG4gICAgY29uc3RydWN0b3IoaG9zdCwgZm9yZWlnbk1vZHVsZUZhY3RvcnkpIHtcclxuICAgICAgICB0aGlzLl9ob3N0ID0gaG9zdDtcclxuICAgICAgICB0aGlzLl9tb2RlbHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgICAgIHRoaXMuX2ZvcmVpZ25Nb2R1bGVGYWN0b3J5ID0gZm9yZWlnbk1vZHVsZUZhY3Rvcnk7XHJcbiAgICAgICAgdGhpcy5fZm9yZWlnbk1vZHVsZSA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgIHRoaXMuX21vZGVscyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICB9XHJcbiAgICBfZ2V0TW9kZWwodXJpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21vZGVsc1t1cmldO1xyXG4gICAgfVxyXG4gICAgX2dldE1vZGVscygpIHtcclxuICAgICAgICBsZXQgYWxsID0gW107XHJcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5fbW9kZWxzKS5mb3JFYWNoKChrZXkpID0+IGFsbC5wdXNoKHRoaXMuX21vZGVsc1trZXldKSk7XHJcbiAgICAgICAgcmV0dXJuIGFsbDtcclxuICAgIH1cclxuICAgIGFjY2VwdE5ld01vZGVsKGRhdGEpIHtcclxuICAgICAgICB0aGlzLl9tb2RlbHNbZGF0YS51cmxdID0gbmV3IE1pcnJvck1vZGVsKFVSSS5wYXJzZShkYXRhLnVybCksIGRhdGEubGluZXMsIGRhdGEuRU9MLCBkYXRhLnZlcnNpb25JZCk7XHJcbiAgICB9XHJcbiAgICBhY2NlcHRNb2RlbENoYW5nZWQoc3RyVVJMLCBlKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9tb2RlbHNbc3RyVVJMXSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBtb2RlbCA9IHRoaXMuX21vZGVsc1tzdHJVUkxdO1xyXG4gICAgICAgIG1vZGVsLm9uRXZlbnRzKGUpO1xyXG4gICAgfVxyXG4gICAgYWNjZXB0UmVtb3ZlZE1vZGVsKHN0clVSTCkge1xyXG4gICAgICAgIGlmICghdGhpcy5fbW9kZWxzW3N0clVSTF0pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkZWxldGUgdGhpcy5fbW9kZWxzW3N0clVSTF07XHJcbiAgICB9XHJcbiAgICAvLyAtLS0tIEJFR0lOIGRpZmYgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIGNvbXB1dGVEaWZmKG9yaWdpbmFsVXJsLCBtb2RpZmllZFVybCwgaWdub3JlVHJpbVdoaXRlc3BhY2UsIG1heENvbXB1dGF0aW9uVGltZSkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsID0gdGhpcy5fZ2V0TW9kZWwob3JpZ2luYWxVcmwpO1xyXG4gICAgICAgICAgICBjb25zdCBtb2RpZmllZCA9IHRoaXMuX2dldE1vZGVsKG1vZGlmaWVkVXJsKTtcclxuICAgICAgICAgICAgaWYgKCFvcmlnaW5hbCB8fCAhbW9kaWZpZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsTGluZXMgPSBvcmlnaW5hbC5nZXRMaW5lc0NvbnRlbnQoKTtcclxuICAgICAgICAgICAgY29uc3QgbW9kaWZpZWRMaW5lcyA9IG1vZGlmaWVkLmdldExpbmVzQ29udGVudCgpO1xyXG4gICAgICAgICAgICBjb25zdCBkaWZmQ29tcHV0ZXIgPSBuZXcgRGlmZkNvbXB1dGVyKG9yaWdpbmFsTGluZXMsIG1vZGlmaWVkTGluZXMsIHtcclxuICAgICAgICAgICAgICAgIHNob3VsZENvbXB1dGVDaGFyQ2hhbmdlczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHNob3VsZFBvc3RQcm9jZXNzQ2hhckNoYW5nZXM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBzaG91bGRJZ25vcmVUcmltV2hpdGVzcGFjZTogaWdub3JlVHJpbVdoaXRlc3BhY2UsXHJcbiAgICAgICAgICAgICAgICBzaG91bGRNYWtlUHJldHR5RGlmZjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIG1heENvbXB1dGF0aW9uVGltZTogbWF4Q29tcHV0YXRpb25UaW1lXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjb25zdCBkaWZmUmVzdWx0ID0gZGlmZkNvbXB1dGVyLmNvbXB1dGVEaWZmKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGlkZW50aWNhbCA9IChkaWZmUmVzdWx0LmNoYW5nZXMubGVuZ3RoID4gMCA/IGZhbHNlIDogdGhpcy5fbW9kZWxzQXJlSWRlbnRpY2FsKG9yaWdpbmFsLCBtb2RpZmllZCkpO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgcXVpdEVhcmx5OiBkaWZmUmVzdWx0LnF1aXRFYXJseSxcclxuICAgICAgICAgICAgICAgIGlkZW50aWNhbDogaWRlbnRpY2FsLFxyXG4gICAgICAgICAgICAgICAgY2hhbmdlczogZGlmZlJlc3VsdC5jaGFuZ2VzXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBfbW9kZWxzQXJlSWRlbnRpY2FsKG9yaWdpbmFsLCBtb2RpZmllZCkge1xyXG4gICAgICAgIGNvbnN0IG9yaWdpbmFsTGluZUNvdW50ID0gb3JpZ2luYWwuZ2V0TGluZUNvdW50KCk7XHJcbiAgICAgICAgY29uc3QgbW9kaWZpZWRMaW5lQ291bnQgPSBtb2RpZmllZC5nZXRMaW5lQ291bnQoKTtcclxuICAgICAgICBpZiAob3JpZ2luYWxMaW5lQ291bnQgIT09IG1vZGlmaWVkTGluZUNvdW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgbGluZSA9IDE7IGxpbmUgPD0gb3JpZ2luYWxMaW5lQ291bnQ7IGxpbmUrKykge1xyXG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbExpbmUgPSBvcmlnaW5hbC5nZXRMaW5lQ29udGVudChsaW5lKTtcclxuICAgICAgICAgICAgY29uc3QgbW9kaWZpZWRMaW5lID0gbW9kaWZpZWQuZ2V0TGluZUNvbnRlbnQobGluZSk7XHJcbiAgICAgICAgICAgIGlmIChvcmlnaW5hbExpbmUgIT09IG1vZGlmaWVkTGluZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgY29tcHV0ZU1vcmVNaW5pbWFsRWRpdHMobW9kZWxVcmwsIGVkaXRzKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLl9nZXRNb2RlbChtb2RlbFVybCk7XHJcbiAgICAgICAgICAgIGlmICghbW9kZWwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlZGl0cztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgbGV0IGxhc3RFb2wgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIGVkaXRzID0gZWRpdHMuc2xpY2UoMCkuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGEucmFuZ2UgJiYgYi5yYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBSYW5nZS5jb21wYXJlUmFuZ2VzVXNpbmdTdGFydHMoYS5yYW5nZSwgYi5yYW5nZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBlb2wgb25seSBjaGFuZ2VzIHNob3VsZCBnbyB0byB0aGUgZW5kXHJcbiAgICAgICAgICAgICAgICBsZXQgYVJuZyA9IGEucmFuZ2UgPyAwIDogMTtcclxuICAgICAgICAgICAgICAgIGxldCBiUm5nID0gYi5yYW5nZSA/IDAgOiAxO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFSbmcgLSBiUm5nO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZm9yIChsZXQgeyByYW5nZSwgdGV4dCwgZW9sIH0gb2YgZWRpdHMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZW9sID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RFb2wgPSBlb2w7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoUmFuZ2UuaXNFbXB0eShyYW5nZSkgJiYgIXRleHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBlbXB0eSBjaGFuZ2VcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsID0gbW9kZWwuZ2V0VmFsdWVJblJhbmdlKHJhbmdlKTtcclxuICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcclxcbnxcXG58XFxyL2csIG1vZGVsLmVvbCk7XHJcbiAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWwgPT09IHRleHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBub29wXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgZGlmZiB3b24ndCB0YWtlIHRvbyBsb25nXHJcbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5tYXgodGV4dC5sZW5ndGgsIG9yaWdpbmFsLmxlbmd0aCkgPiBFZGl0b3JTaW1wbGVXb3JrZXIuX2RpZmZMaW1pdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHsgcmFuZ2UsIHRleHQgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBjb21wdXRlIGRpZmYgYmV0d2VlbiBvcmlnaW5hbCBhbmQgZWRpdC50ZXh0XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFuZ2VzID0gc3RyaW5nRGlmZihvcmlnaW5hbCwgdGV4dCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWRpdE9mZnNldCA9IG1vZGVsLm9mZnNldEF0KFJhbmdlLmxpZnQocmFuZ2UpLmdldFN0YXJ0UG9zaXRpb24oKSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNoYW5nZSBvZiBjaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBtb2RlbC5wb3NpdGlvbkF0KGVkaXRPZmZzZXQgKyBjaGFuZ2Uub3JpZ2luYWxTdGFydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kID0gbW9kZWwucG9zaXRpb25BdChlZGl0T2Zmc2V0ICsgY2hhbmdlLm9yaWdpbmFsU3RhcnQgKyBjaGFuZ2Uub3JpZ2luYWxMZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0VkaXQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHRleHQuc3Vic3RyKGNoYW5nZS5tb2RpZmllZFN0YXJ0LCBjaGFuZ2UubW9kaWZpZWRMZW5ndGgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZTogeyBzdGFydExpbmVOdW1iZXI6IHN0YXJ0LmxpbmVOdW1iZXIsIHN0YXJ0Q29sdW1uOiBzdGFydC5jb2x1bW4sIGVuZExpbmVOdW1iZXI6IGVuZC5saW5lTnVtYmVyLCBlbmRDb2x1bW46IGVuZC5jb2x1bW4gfVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGVsLmdldFZhbHVlSW5SYW5nZShuZXdFZGl0LnJhbmdlKSAhPT0gbmV3RWRpdC50ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ld0VkaXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGxhc3RFb2wgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7IGVvbDogbGFzdEVvbCwgdGV4dDogJycsIHJhbmdlOiB7IHN0YXJ0TGluZU51bWJlcjogMCwgc3RhcnRDb2x1bW46IDAsIGVuZExpbmVOdW1iZXI6IDAsIGVuZENvbHVtbjogMCB9IH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvLyAtLS0tIEVORCBtaW5pbWFsIGVkaXRzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgY29tcHV0ZUxpbmtzKG1vZGVsVXJsKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgbGV0IG1vZGVsID0gdGhpcy5fZ2V0TW9kZWwobW9kZWxVcmwpO1xyXG4gICAgICAgICAgICBpZiAoIW1vZGVsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY29tcHV0ZUxpbmtzKG1vZGVsKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHRleHR1YWxTdWdnZXN0KG1vZGVsVXJscywgbGVhZGluZ1dvcmQsIHdvcmREZWYsIHdvcmREZWZGbGFncykge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN3ID0gbmV3IFN0b3BXYXRjaCh0cnVlKTtcclxuICAgICAgICAgICAgY29uc3Qgd29yZERlZlJlZ0V4cCA9IG5ldyBSZWdFeHAod29yZERlZiwgd29yZERlZkZsYWdzKTtcclxuICAgICAgICAgICAgY29uc3Qgc2VlbiA9IG5ldyBTZXQoKTtcclxuICAgICAgICAgICAgb3V0ZXI6IGZvciAobGV0IHVybCBvZiBtb2RlbFVybHMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vZGVsID0gdGhpcy5fZ2V0TW9kZWwodXJsKTtcclxuICAgICAgICAgICAgICAgIGlmICghbW9kZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHdvcmQgb2YgbW9kZWwud29yZHMod29yZERlZlJlZ0V4cCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAod29yZCA9PT0gbGVhZGluZ1dvcmQgfHwgIWlzTmFOKE51bWJlcih3b3JkKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHNlZW4uYWRkKHdvcmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWVuLnNpemUgPiBFZGl0b3JTaW1wbGVXb3JrZXIuX3N1Z2dlc3Rpb25zTGltaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgb3V0ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB7IHdvcmRzOiBBcnJheS5mcm9tKHNlZW4pLCBkdXJhdGlvbjogc3cuZWxhcHNlZCgpIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvLyAtLS0tIEVORCBzdWdnZXN0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAvLyNyZWdpb24gLS0gd29yZCByYW5nZXMgLS1cclxuICAgIGNvbXB1dGVXb3JkUmFuZ2VzKG1vZGVsVXJsLCByYW5nZSwgd29yZERlZiwgd29yZERlZkZsYWdzKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgbGV0IG1vZGVsID0gdGhpcy5fZ2V0TW9kZWwobW9kZWxVcmwpO1xyXG4gICAgICAgICAgICBpZiAoIW1vZGVsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB3b3JkRGVmUmVnRXhwID0gbmV3IFJlZ0V4cCh3b3JkRGVmLCB3b3JkRGVmRmxhZ3MpO1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBsaW5lID0gcmFuZ2Uuc3RhcnRMaW5lTnVtYmVyOyBsaW5lIDwgcmFuZ2UuZW5kTGluZU51bWJlcjsgbGluZSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgd29yZHMgPSBtb2RlbC5nZXRMaW5lV29yZHMobGluZSwgd29yZERlZlJlZ0V4cCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHdvcmQgb2Ygd29yZHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKE51bWJlcih3b3JkLndvcmQpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFycmF5ID0gcmVzdWx0W3dvcmQud29yZF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbd29yZC53b3JkXSA9IGFycmF5O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBhcnJheS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRMaW5lTnVtYmVyOiBsaW5lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydENvbHVtbjogd29yZC5zdGFydENvbHVtbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kTGluZU51bWJlcjogbGluZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kQ29sdW1uOiB3b3JkLmVuZENvbHVtblxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvLyNlbmRyZWdpb25cclxuICAgIG5hdmlnYXRlVmFsdWVTZXQobW9kZWxVcmwsIHJhbmdlLCB1cCwgd29yZERlZiwgd29yZERlZkZsYWdzKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgbGV0IG1vZGVsID0gdGhpcy5fZ2V0TW9kZWwobW9kZWxVcmwpO1xyXG4gICAgICAgICAgICBpZiAoIW1vZGVsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgd29yZERlZlJlZ0V4cCA9IG5ldyBSZWdFeHAod29yZERlZiwgd29yZERlZkZsYWdzKTtcclxuICAgICAgICAgICAgaWYgKHJhbmdlLnN0YXJ0Q29sdW1uID09PSByYW5nZS5lbmRDb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgIHJhbmdlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0TGluZU51bWJlcjogcmFuZ2Uuc3RhcnRMaW5lTnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0Q29sdW1uOiByYW5nZS5zdGFydENvbHVtbixcclxuICAgICAgICAgICAgICAgICAgICBlbmRMaW5lTnVtYmVyOiByYW5nZS5lbmRMaW5lTnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZENvbHVtbjogcmFuZ2UuZW5kQ29sdW1uICsgMVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgc2VsZWN0aW9uVGV4dCA9IG1vZGVsLmdldFZhbHVlSW5SYW5nZShyYW5nZSk7XHJcbiAgICAgICAgICAgIGxldCB3b3JkUmFuZ2UgPSBtb2RlbC5nZXRXb3JkQXRQb3NpdGlvbih7IGxpbmVOdW1iZXI6IHJhbmdlLnN0YXJ0TGluZU51bWJlciwgY29sdW1uOiByYW5nZS5zdGFydENvbHVtbiB9LCB3b3JkRGVmUmVnRXhwKTtcclxuICAgICAgICAgICAgaWYgKCF3b3JkUmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCB3b3JkID0gbW9kZWwuZ2V0VmFsdWVJblJhbmdlKHdvcmRSYW5nZSk7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBCYXNpY0lucGxhY2VSZXBsYWNlLklOU1RBTkNFLm5hdmlnYXRlVmFsdWVTZXQocmFuZ2UsIHNlbGVjdGlvblRleHQsIHdvcmRSYW5nZSwgd29yZCwgdXApO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLy8gLS0tLSBCRUdJTiBmb3JlaWduIG1vZHVsZSBzdXBwb3J0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICBsb2FkRm9yZWlnbk1vZHVsZShtb2R1bGVJZCwgY3JlYXRlRGF0YSwgZm9yZWlnbkhvc3RNZXRob2RzKSB7XHJcbiAgICAgICAgY29uc3QgcHJveHlNZXRob2RSZXF1ZXN0ID0gKG1ldGhvZCwgYXJncykgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faG9zdC5maHIobWV0aG9kLCBhcmdzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGZvcmVpZ25Ib3N0ID0gdHlwZXMuY3JlYXRlUHJveHlPYmplY3QoZm9yZWlnbkhvc3RNZXRob2RzLCBwcm94eU1ldGhvZFJlcXVlc3QpO1xyXG4gICAgICAgIGxldCBjdHggPSB7XHJcbiAgICAgICAgICAgIGhvc3Q6IGZvcmVpZ25Ib3N0LFxyXG4gICAgICAgICAgICBnZXRNaXJyb3JNb2RlbHM6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRNb2RlbHMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHRoaXMuX2ZvcmVpZ25Nb2R1bGVGYWN0b3J5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZvcmVpZ25Nb2R1bGUgPSB0aGlzLl9mb3JlaWduTW9kdWxlRmFjdG9yeShjdHgsIGNyZWF0ZURhdGEpO1xyXG4gICAgICAgICAgICAvLyBzdGF0aWMgZm9yZWluZyBtb2R1bGVcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0eXBlcy5nZXRBbGxNZXRob2ROYW1lcyh0aGlzLl9mb3JlaWduTW9kdWxlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEVTTS1jb21tZW50LWJlZ2luXHJcbiAgICAgICAgLy8gXHRcdHJldHVybiBuZXcgUHJvbWlzZTxhbnk+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAvLyBcdFx0XHRyZXF1aXJlKFttb2R1bGVJZF0sIChmb3JlaWduTW9kdWxlOiB7IGNyZWF0ZTogSUZvcmVpZ25Nb2R1bGVGYWN0b3J5IH0pID0+IHtcclxuICAgICAgICAvLyBcdFx0XHRcdHRoaXMuX2ZvcmVpZ25Nb2R1bGUgPSBmb3JlaWduTW9kdWxlLmNyZWF0ZShjdHgsIGNyZWF0ZURhdGEpO1xyXG4gICAgICAgIC8vIFxyXG4gICAgICAgIC8vIFx0XHRcdFx0cmVzb2x2ZSh0eXBlcy5nZXRBbGxNZXRob2ROYW1lcyh0aGlzLl9mb3JlaWduTW9kdWxlKSk7XHJcbiAgICAgICAgLy8gXHJcbiAgICAgICAgLy8gXHRcdFx0fSwgcmVqZWN0KTtcclxuICAgICAgICAvLyBcdFx0fSk7XHJcbiAgICAgICAgLy8gRVNNLWNvbW1lbnQtZW5kXHJcbiAgICAgICAgLy8gRVNNLXVuY29tbWVudC1iZWdpblxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgdXNhZ2VgKSk7XHJcbiAgICAgICAgLy8gRVNNLXVuY29tbWVudC1lbmRcclxuICAgIH1cclxuICAgIC8vIGZvcmVpZ24gbWV0aG9kIHJlcXVlc3RcclxuICAgIGZtcihtZXRob2QsIGFyZ3MpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2ZvcmVpZ25Nb2R1bGUgfHwgdHlwZW9mIHRoaXMuX2ZvcmVpZ25Nb2R1bGVbbWV0aG9kXSAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdNaXNzaW5nIHJlcXVlc3RIYW5kbGVyIG9yIG1ldGhvZDogJyArIG1ldGhvZCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2ZvcmVpZ25Nb2R1bGVbbWV0aG9kXS5hcHBseSh0aGlzLl9mb3JlaWduTW9kdWxlLCBhcmdzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuLy8gLS0tLSBFTkQgZGlmZiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAtLS0tIEJFR0lOIG1pbmltYWwgZWRpdHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbkVkaXRvclNpbXBsZVdvcmtlci5fZGlmZkxpbWl0ID0gMTAwMDAwO1xyXG4vLyAtLS0tIEJFR0lOIHN1Z2dlc3QgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuRWRpdG9yU2ltcGxlV29ya2VyLl9zdWdnZXN0aW9uc0xpbWl0ID0gMTAwMDA7XHJcbi8qKlxyXG4gKiBDYWxsZWQgb24gdGhlIHdvcmtlciBzaWRlXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZShob3N0KSB7XHJcbiAgICByZXR1cm4gbmV3IEVkaXRvclNpbXBsZVdvcmtlcihob3N0LCBudWxsKTtcclxufVxyXG5pZiAodHlwZW9mIGltcG9ydFNjcmlwdHMgPT09ICdmdW5jdGlvbicpIHtcclxuICAgIC8vIFJ1bm5pbmcgaW4gYSB3ZWIgd29ya2VyXHJcbiAgICBnbG9iYWxzLm1vbmFjbyA9IGNyZWF0ZU1vbmFjb0Jhc2VBUEkoKTtcclxufVxyXG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuaW1wb3J0IHsgc3BsaXRMaW5lcyB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL3N0cmluZ3MuanMnO1xyXG5pbXBvcnQgeyBQb3NpdGlvbiB9IGZyb20gJy4uL2NvcmUvcG9zaXRpb24uanMnO1xyXG5pbXBvcnQgeyBQcmVmaXhTdW1Db21wdXRlciB9IGZyb20gJy4uL3ZpZXdNb2RlbC9wcmVmaXhTdW1Db21wdXRlci5qcyc7XHJcbmV4cG9ydCBjbGFzcyBNaXJyb3JUZXh0TW9kZWwge1xyXG4gICAgY29uc3RydWN0b3IodXJpLCBsaW5lcywgZW9sLCB2ZXJzaW9uSWQpIHtcclxuICAgICAgICB0aGlzLl91cmkgPSB1cmk7XHJcbiAgICAgICAgdGhpcy5fbGluZXMgPSBsaW5lcztcclxuICAgICAgICB0aGlzLl9lb2wgPSBlb2w7XHJcbiAgICAgICAgdGhpcy5fdmVyc2lvbklkID0gdmVyc2lvbklkO1xyXG4gICAgICAgIHRoaXMuX2xpbmVTdGFydHMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX2NhY2hlZFRleHRWYWx1ZSA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgIHRoaXMuX2xpbmVzLmxlbmd0aCA9IDA7XHJcbiAgICB9XHJcbiAgICBnZXQgdmVyc2lvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmVyc2lvbklkO1xyXG4gICAgfVxyXG4gICAgZ2V0VGV4dCgpIHtcclxuICAgICAgICBpZiAodGhpcy5fY2FjaGVkVGV4dFZhbHVlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlZFRleHRWYWx1ZSA9IHRoaXMuX2xpbmVzLmpvaW4odGhpcy5fZW9sKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZFRleHRWYWx1ZTtcclxuICAgIH1cclxuICAgIG9uRXZlbnRzKGUpIHtcclxuICAgICAgICBpZiAoZS5lb2wgJiYgZS5lb2wgIT09IHRoaXMuX2VvbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9lb2wgPSBlLmVvbDtcclxuICAgICAgICAgICAgdGhpcy5fbGluZVN0YXJ0cyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFVwZGF0ZSBteSBsaW5lc1xyXG4gICAgICAgIGNvbnN0IGNoYW5nZXMgPSBlLmNoYW5nZXM7XHJcbiAgICAgICAgZm9yIChjb25zdCBjaGFuZ2Ugb2YgY2hhbmdlcykge1xyXG4gICAgICAgICAgICB0aGlzLl9hY2NlcHREZWxldGVSYW5nZShjaGFuZ2UucmFuZ2UpO1xyXG4gICAgICAgICAgICB0aGlzLl9hY2NlcHRJbnNlcnRUZXh0KG5ldyBQb3NpdGlvbihjaGFuZ2UucmFuZ2Uuc3RhcnRMaW5lTnVtYmVyLCBjaGFuZ2UucmFuZ2Uuc3RhcnRDb2x1bW4pLCBjaGFuZ2UudGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3ZlcnNpb25JZCA9IGUudmVyc2lvbklkO1xyXG4gICAgICAgIHRoaXMuX2NhY2hlZFRleHRWYWx1ZSA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBfZW5zdXJlTGluZVN0YXJ0cygpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2xpbmVTdGFydHMpIHtcclxuICAgICAgICAgICAgY29uc3QgZW9sTGVuZ3RoID0gdGhpcy5fZW9sLmxlbmd0aDtcclxuICAgICAgICAgICAgY29uc3QgbGluZXNMZW5ndGggPSB0aGlzLl9saW5lcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpbmVTdGFydFZhbHVlcyA9IG5ldyBVaW50MzJBcnJheShsaW5lc0xlbmd0aCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXNMZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGluZVN0YXJ0VmFsdWVzW2ldID0gdGhpcy5fbGluZXNbaV0ubGVuZ3RoICsgZW9sTGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2xpbmVTdGFydHMgPSBuZXcgUHJlZml4U3VtQ29tcHV0ZXIobGluZVN0YXJ0VmFsdWVzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFsbCBjaGFuZ2VzIHRvIGEgbGluZSdzIHRleHQgZ28gdGhyb3VnaCB0aGlzIG1ldGhvZFxyXG4gICAgICovXHJcbiAgICBfc2V0TGluZVRleHQobGluZUluZGV4LCBuZXdWYWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX2xpbmVzW2xpbmVJbmRleF0gPSBuZXdWYWx1ZTtcclxuICAgICAgICBpZiAodGhpcy5fbGluZVN0YXJ0cykge1xyXG4gICAgICAgICAgICAvLyB1cGRhdGUgcHJlZml4IHN1bVxyXG4gICAgICAgICAgICB0aGlzLl9saW5lU3RhcnRzLmNoYW5nZVZhbHVlKGxpbmVJbmRleCwgdGhpcy5fbGluZXNbbGluZUluZGV4XS5sZW5ndGggKyB0aGlzLl9lb2wubGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBfYWNjZXB0RGVsZXRlUmFuZ2UocmFuZ2UpIHtcclxuICAgICAgICBpZiAocmFuZ2Uuc3RhcnRMaW5lTnVtYmVyID09PSByYW5nZS5lbmRMaW5lTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGlmIChyYW5nZS5zdGFydENvbHVtbiA9PT0gcmFuZ2UuZW5kQ29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBOb3RoaW5nIHRvIGRlbGV0ZVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIERlbGV0ZSB0ZXh0IG9uIHRoZSBhZmZlY3RlZCBsaW5lXHJcbiAgICAgICAgICAgIHRoaXMuX3NldExpbmVUZXh0KHJhbmdlLnN0YXJ0TGluZU51bWJlciAtIDEsIHRoaXMuX2xpbmVzW3JhbmdlLnN0YXJ0TGluZU51bWJlciAtIDFdLnN1YnN0cmluZygwLCByYW5nZS5zdGFydENvbHVtbiAtIDEpXHJcbiAgICAgICAgICAgICAgICArIHRoaXMuX2xpbmVzW3JhbmdlLnN0YXJ0TGluZU51bWJlciAtIDFdLnN1YnN0cmluZyhyYW5nZS5lbmRDb2x1bW4gLSAxKSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVGFrZSByZW1haW5pbmcgdGV4dCBvbiBsYXN0IGxpbmUgYW5kIGFwcGVuZCBpdCB0byByZW1haW5pbmcgdGV4dCBvbiBmaXJzdCBsaW5lXHJcbiAgICAgICAgdGhpcy5fc2V0TGluZVRleHQocmFuZ2Uuc3RhcnRMaW5lTnVtYmVyIC0gMSwgdGhpcy5fbGluZXNbcmFuZ2Uuc3RhcnRMaW5lTnVtYmVyIC0gMV0uc3Vic3RyaW5nKDAsIHJhbmdlLnN0YXJ0Q29sdW1uIC0gMSlcclxuICAgICAgICAgICAgKyB0aGlzLl9saW5lc1tyYW5nZS5lbmRMaW5lTnVtYmVyIC0gMV0uc3Vic3RyaW5nKHJhbmdlLmVuZENvbHVtbiAtIDEpKTtcclxuICAgICAgICAvLyBEZWxldGUgbWlkZGxlIGxpbmVzXHJcbiAgICAgICAgdGhpcy5fbGluZXMuc3BsaWNlKHJhbmdlLnN0YXJ0TGluZU51bWJlciwgcmFuZ2UuZW5kTGluZU51bWJlciAtIHJhbmdlLnN0YXJ0TGluZU51bWJlcik7XHJcbiAgICAgICAgaWYgKHRoaXMuX2xpbmVTdGFydHMpIHtcclxuICAgICAgICAgICAgLy8gdXBkYXRlIHByZWZpeCBzdW1cclxuICAgICAgICAgICAgdGhpcy5fbGluZVN0YXJ0cy5yZW1vdmVWYWx1ZXMocmFuZ2Uuc3RhcnRMaW5lTnVtYmVyLCByYW5nZS5lbmRMaW5lTnVtYmVyIC0gcmFuZ2Uuc3RhcnRMaW5lTnVtYmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBfYWNjZXB0SW5zZXJ0VGV4dChwb3NpdGlvbiwgaW5zZXJ0VGV4dCkge1xyXG4gICAgICAgIGlmIChpbnNlcnRUZXh0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAvLyBOb3RoaW5nIHRvIGluc2VydFxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBpbnNlcnRMaW5lcyA9IHNwbGl0TGluZXMoaW5zZXJ0VGV4dCk7XHJcbiAgICAgICAgaWYgKGluc2VydExpbmVzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAvLyBJbnNlcnRpbmcgdGV4dCBvbiBvbmUgbGluZVxyXG4gICAgICAgICAgICB0aGlzLl9zZXRMaW5lVGV4dChwb3NpdGlvbi5saW5lTnVtYmVyIC0gMSwgdGhpcy5fbGluZXNbcG9zaXRpb24ubGluZU51bWJlciAtIDFdLnN1YnN0cmluZygwLCBwb3NpdGlvbi5jb2x1bW4gLSAxKVxyXG4gICAgICAgICAgICAgICAgKyBpbnNlcnRMaW5lc1swXVxyXG4gICAgICAgICAgICAgICAgKyB0aGlzLl9saW5lc1twb3NpdGlvbi5saW5lTnVtYmVyIC0gMV0uc3Vic3RyaW5nKHBvc2l0aW9uLmNvbHVtbiAtIDEpKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBcHBlbmQgb3ZlcmZsb3dpbmcgdGV4dCBmcm9tIGZpcnN0IGxpbmUgdG8gdGhlIGVuZCBvZiB0ZXh0IHRvIGluc2VydFxyXG4gICAgICAgIGluc2VydExpbmVzW2luc2VydExpbmVzLmxlbmd0aCAtIDFdICs9IHRoaXMuX2xpbmVzW3Bvc2l0aW9uLmxpbmVOdW1iZXIgLSAxXS5zdWJzdHJpbmcocG9zaXRpb24uY29sdW1uIC0gMSk7XHJcbiAgICAgICAgLy8gRGVsZXRlIG92ZXJmbG93aW5nIHRleHQgZnJvbSBmaXJzdCBsaW5lIGFuZCBpbnNlcnQgdGV4dCBvbiBmaXJzdCBsaW5lXHJcbiAgICAgICAgdGhpcy5fc2V0TGluZVRleHQocG9zaXRpb24ubGluZU51bWJlciAtIDEsIHRoaXMuX2xpbmVzW3Bvc2l0aW9uLmxpbmVOdW1iZXIgLSAxXS5zdWJzdHJpbmcoMCwgcG9zaXRpb24uY29sdW1uIC0gMSlcclxuICAgICAgICAgICAgKyBpbnNlcnRMaW5lc1swXSk7XHJcbiAgICAgICAgLy8gSW5zZXJ0IG5ldyBsaW5lcyAmIHN0b3JlIGxlbmd0aHNcclxuICAgICAgICBsZXQgbmV3TGVuZ3RocyA9IG5ldyBVaW50MzJBcnJheShpbnNlcnRMaW5lcy5sZW5ndGggLSAxKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGluc2VydExpbmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2xpbmVzLnNwbGljZShwb3NpdGlvbi5saW5lTnVtYmVyICsgaSAtIDEsIDAsIGluc2VydExpbmVzW2ldKTtcclxuICAgICAgICAgICAgbmV3TGVuZ3Roc1tpIC0gMV0gPSBpbnNlcnRMaW5lc1tpXS5sZW5ndGggKyB0aGlzLl9lb2wubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fbGluZVN0YXJ0cykge1xyXG4gICAgICAgICAgICAvLyB1cGRhdGUgcHJlZml4IHN1bVxyXG4gICAgICAgICAgICB0aGlzLl9saW5lU3RhcnRzLmluc2VydFZhbHVlcyhwb3NpdGlvbi5saW5lTnVtYmVyLCBuZXdMZW5ndGhzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbmV4cG9ydCBjbGFzcyBUb2tlbiB7XHJcbiAgICBjb25zdHJ1Y3RvcihvZmZzZXQsIHR5cGUsIGxhbmd1YWdlKSB7XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQgfCAwOyAvLyBAcGVyZlxyXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICAgICAgdGhpcy5sYW5ndWFnZSA9IGxhbmd1YWdlO1xyXG4gICAgfVxyXG4gICAgdG9TdHJpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuICcoJyArIHRoaXMub2Zmc2V0ICsgJywgJyArIHRoaXMudHlwZSArICcpJztcclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgVG9rZW5pemF0aW9uUmVzdWx0IHtcclxuICAgIGNvbnN0cnVjdG9yKHRva2VucywgZW5kU3RhdGUpIHtcclxuICAgICAgICB0aGlzLnRva2VucyA9IHRva2VucztcclxuICAgICAgICB0aGlzLmVuZFN0YXRlID0gZW5kU3RhdGU7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIFRva2VuaXphdGlvblJlc3VsdDIge1xyXG4gICAgY29uc3RydWN0b3IodG9rZW5zLCBlbmRTdGF0ZSkge1xyXG4gICAgICAgIHRoaXMudG9rZW5zID0gdG9rZW5zO1xyXG4gICAgICAgIHRoaXMuZW5kU3RhdGUgPSBlbmRTdGF0ZTtcclxuICAgIH1cclxufVxyXG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuaW1wb3J0IHsgU2ltcGxlV29ya2VyU2VydmVyIH0gZnJvbSAnLi4vYmFzZS9jb21tb24vd29ya2VyL3NpbXBsZVdvcmtlci5qcyc7XHJcbmltcG9ydCB7IEVkaXRvclNpbXBsZVdvcmtlciB9IGZyb20gJy4vY29tbW9uL3NlcnZpY2VzL2VkaXRvclNpbXBsZVdvcmtlci5qcyc7XHJcbmxldCBpbml0aWFsaXplZCA9IGZhbHNlO1xyXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZShmb3JlaWduTW9kdWxlKSB7XHJcbiAgICBpZiAoaW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpbml0aWFsaXplZCA9IHRydWU7XHJcbiAgICBjb25zdCBzaW1wbGVXb3JrZXIgPSBuZXcgU2ltcGxlV29ya2VyU2VydmVyKChtc2cpID0+IHtcclxuICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKG1zZyk7XHJcbiAgICB9LCAoaG9zdCkgPT4gbmV3IEVkaXRvclNpbXBsZVdvcmtlcihob3N0LCBmb3JlaWduTW9kdWxlKSk7XHJcbiAgICBzZWxmLm9ubWVzc2FnZSA9IChlKSA9PiB7XHJcbiAgICAgICAgc2ltcGxlV29ya2VyLm9ubWVzc2FnZShlLmRhdGEpO1xyXG4gICAgfTtcclxufVxyXG5zZWxmLm9ubWVzc2FnZSA9IChlKSA9PiB7XHJcbiAgICAvLyBJZ25vcmUgZmlyc3QgbWVzc2FnZSBpbiB0aGlzIGNhc2UgYW5kIGluaXRpYWxpemUgaWYgbm90IHlldCBpbml0aWFsaXplZFxyXG4gICAgaWYgKCFpbml0aWFsaXplZCkge1xyXG4gICAgICAgIGluaXRpYWxpemUobnVsbCk7XHJcbiAgICB9XHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=